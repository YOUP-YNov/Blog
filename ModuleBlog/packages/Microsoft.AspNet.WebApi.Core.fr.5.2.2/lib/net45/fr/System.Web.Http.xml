<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Web.Http</name>
  </assembly>
  <members>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.Http.InvalidByteRangeException)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Exception)">
      <summary>Crée un <see cref="T:System.Net.Http.HttpResponseMessage" /> qui représente une exception.</summary>
      <returns>La requête doit être associée à une instance <see cref="T:System.Web.Http.HttpConfiguration" />.<see cref="T:System.Net.Http.HttpResponseMessage" /> dont le contenu est une représentation sérialisée d'une instance <see cref="T:System.Web.Http.HttpError" />.</returns>
      <param name="request">Requête HTTP.</param>
      <param name="statusCode">Code d'état de la réponse.</param>
      <param name="exception">Exception.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.String)">
      <summary>Crée un <see cref="T:System.Net.Http.HttpResponseMessage" /> qui représente un message d'erreur.</summary>
      <returns>La requête doit être associée à une instance <see cref="T:System.Web.Http.HttpConfiguration" />.<see cref="T:System.Net.Http.HttpResponseMessage" /> dont le contenu est une représentation sérialisée d'une instance <see cref="T:System.Web.Http.HttpError" />.</returns>
      <param name="request">Requête HTTP.</param>
      <param name="statusCode">Code d'état de la réponse.</param>
      <param name="message">Message d'erreur.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.String,System.Exception)">
      <summary>Crée un <see cref="T:System.Net.Http.HttpResponseMessage" /> qui représente une exception associée à un message d'erreur.</summary>
      <returns>La requête doit être associée à une instance <see cref="T:System.Web.Http.HttpConfiguration" />.<see cref="T:System.Net.Http.HttpResponseMessage" /> dont le contenu est une représentation sérialisée d'une instance <see cref="T:System.Web.Http.HttpError" />.</returns>
      <param name="request">Requête HTTP.</param>
      <param name="statusCode">Code d'état de la réponse.</param>
      <param name="message">Message d'erreur.</param>
      <param name="exception">Exception.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Web.Http.HttpError)">
      <summary>Crée un <see cref="T:System.Net.Http.HttpResponseMessage" /> qui représente une erreur.</summary>
      <returns>La requête doit être associée à une instance <see cref="T:System.Web.Http.HttpConfiguration" />.<see cref="T:System.Net.Http.HttpResponseMessage" /> dont le contenu est une représentation sérialisée d'une instance <see cref="T:System.Web.Http.HttpError" />.</returns>
      <param name="request">Requête HTTP.</param>
      <param name="statusCode">Code d'état de la réponse.</param>
      <param name="error">Erreur HTTP.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Web.Http.ModelBinding.ModelStateDictionary)">
      <summary>Crée un <see cref="T:System.Net.Http.HttpResponseMessage" /> qui représente une erreur dans l'état du modèle.</summary>
      <returns>La requête doit être associée à une instance <see cref="T:System.Web.Http.HttpConfiguration" />.<see cref="T:System.Net.Http.HttpResponseMessage" /> dont le contenu est une représentation sérialisée d'une instance <see cref="T:System.Web.Http.HttpError" />.</returns>
      <param name="request">Requête HTTP.</param>
      <param name="statusCode">Code d'état de la réponse.</param>
      <param name="modelState">État du modèle.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0)">
      <summary>Crée un <see cref="T:System.Net.Http.HttpResponseMessage" /> lié au <see cref="T:System.Net.Http.HttpRequestMessage" /> associé.</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpResponseMessage" /> initialisé lié au <see cref="T:System.Net.Http.HttpRequestMessage" /> associé.</returns>
      <param name="request">Message de requête HTTP ayant entraîné ce message de réponse.</param>
      <param name="statusCode">Code d'état de réponse HTTP.</param>
      <param name="value">Contenu du message de réponse HTTP.</param>
      <typeparam name="T">Type du message de réponse HTTP.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Crée un <see cref="T:System.Net.Http.HttpResponseMessage" /> lié au <see cref="T:System.Net.Http.HttpRequestMessage" /> associé.</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpResponseMessage" /> initialisé lié au <see cref="T:System.Net.Http.HttpRequestMessage" /> associé.</returns>
      <param name="request">Message de requête HTTP ayant entraîné ce message de réponse.</param>
      <param name="statusCode">Code d'état de réponse HTTP.</param>
      <param name="value">Contenu du message de réponse HTTP.</param>
      <param name="formatter">Formateur de type de média.</param>
      <typeparam name="T">Type du message de réponse HTTP.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Crée un <see cref="T:System.Net.Http.HttpResponseMessage" /> lié au <see cref="T:System.Net.Http.HttpRequestMessage" /> associé.</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpResponseMessage" /> initialisé lié au <see cref="T:System.Net.Http.HttpRequestMessage" /> associé.</returns>
      <param name="request">Message de requête HTTP ayant entraîné ce message de réponse.</param>
      <param name="statusCode">Code d'état de réponse HTTP.</param>
      <param name="value">Contenu du message de réponse HTTP.</param>
      <param name="formatter">Formateur de type de média.</param>
      <param name="mediaType">Valeur d'en-tête du type de média.</param>
      <typeparam name="T">Type du message de réponse HTTP.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>Crée un <see cref="T:System.Net.Http.HttpResponseMessage" /> lié au <see cref="T:System.Net.Http.HttpRequestMessage" /> associé.</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpResponseMessage" /> initialisé lié au <see cref="T:System.Net.Http.HttpRequestMessage" /> associé.</returns>
      <param name="request">Message de requête HTTP ayant entraîné ce message de réponse.</param>
      <param name="statusCode">Code d'état de réponse HTTP.</param>
      <param name="value">Contenu du message de réponse HTTP.</param>
      <param name="formatter">Formateur de type de média.</param>
      <param name="mediaType">Type de média.</param>
      <typeparam name="T">Type du message de réponse HTTP.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Crée un <see cref="T:System.Net.Http.HttpResponseMessage" /> lié au <see cref="T:System.Net.Http.HttpRequestMessage" /> associé.</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpResponseMessage" /> initialisé lié au <see cref="T:System.Net.Http.HttpRequestMessage" /> associé.</returns>
      <param name="request">Message de requête HTTP ayant entraîné ce message de réponse.</param>
      <param name="statusCode">Code d'état de réponse HTTP.</param>
      <param name="value">Contenu du message de réponse HTTP.</param>
      <param name="mediaType">Valeur d'en-tête du type de média.</param>
      <typeparam name="T">Type du message de réponse HTTP.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.String)">
      <summary>Crée un <see cref="T:System.Net.Http.HttpResponseMessage" /> lié au <see cref="T:System.Net.Http.HttpRequestMessage" /> associé.</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpResponseMessage" /> initialisé lié au <see cref="T:System.Net.Http.HttpRequestMessage" /> associé.</returns>
      <param name="request">Message de requête HTTP ayant entraîné ce message de réponse.</param>
      <param name="statusCode">Code d'état de réponse HTTP.</param>
      <param name="value">Contenu du message de réponse HTTP.</param>
      <param name="mediaType">Type de média.</param>
      <typeparam name="T">Type du message de réponse HTTP.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Web.Http.HttpConfiguration)">
      <summary>Crée un <see cref="T:System.Net.Http.HttpResponseMessage" /> lié au <see cref="T:System.Net.Http.HttpRequestMessage" /> associé.</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpResponseMessage" /> initialisé lié au <see cref="T:System.Net.Http.HttpRequestMessage" /> associé.</returns>
      <param name="request">Message de requête HTTP ayant entraîné ce message de réponse.</param>
      <param name="statusCode">Code d'état de réponse HTTP.</param>
      <param name="value">Contenu du message de réponse HTTP.</param>
      <param name="configuration">Configuration HTTP contenant le programme de résolution des dépendances utilisé pour résoudre les services.</param>
      <typeparam name="T">Type du message de réponse HTTP.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,``0)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.DisposeRequestResources(System.Net.Http.HttpRequestMessage)">
      <summary>Supprime toutes les ressources suivies associées à la <paramref name="request" /> qui ont été ajoutées via la méthode <see cref="M:System.Net.Http.HttpRequestMessageExtensions.RegisterForDispose(System.Net.Http.HttpRequestMessage,System.IDisposable)" />.</summary>
      <param name="request">Requête HTTP.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetActionDescriptor(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetClientCertificate(System.Net.Http.HttpRequestMessage)">
      <summary>Obtient le certificat X.509 actuel de la requête HTTP donnée.</summary>
      <returns>Certificat <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> actuel ou valeur null si aucun certificat n'est disponible.</returns>
      <param name="request">Requête HTTP.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetConfiguration(System.Net.Http.HttpRequestMessage)">
      <summary>Récupère la <see cref="T:System.Web.Http.HttpConfiguration" /> de la requête spécifiée.</summary>
      <returns>
        <see cref="T:System.Web.Http.HttpConfiguration" /> de la requête spécifiée.</returns>
      <param name="request">Requête HTTP.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetCorrelationId(System.Net.Http.HttpRequestMessage)">
      <summary>Récupère le <see cref="T:System.Guid" /> attribué comme ID de corrélation associé à la <paramref name="request" /> donnée.La valeur sera créée et définie lors du premier appel de cette méthode.</summary>
      <returns>Objet <see cref="T:System.Guid" /> qui représente l'ID de corrélation associé à la demande.</returns>
      <param name="request">Requête HTTP.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetDependencyScope(System.Net.Http.HttpRequestMessage)">
      <summary>Récupère les <see cref="T:System.Web.Http.Dependencies.IDependencyScope" /> de la requête spécifiée ou valeur null si celle-ci n'est pas disponible.</summary>
      <returns>
        <see cref="T:System.Web.Http.Dependencies.IDependencyScope" /> de la requête spécifiée ou valeur null si celle-ci n'est pas disponible.</returns>
      <param name="request">Requête HTTP.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetQueryNameValuePairs(System.Net.Http.HttpRequestMessage)">
      <summary>Obtient la chaîne de requête analysée en tant que collection de paires clé-valeur.</summary>
      <returns>Chaîne de requête en tant que collection de paires clé-valeur.</returns>
      <param name="request">Requête HTTP.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetRequestContext(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetResourcesForDisposal(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetRouteData(System.Net.Http.HttpRequestMessage)">
      <summary>Récupère les <see cref="T:System.Web.Http.Routing.IHttpRouteData" /> de la requête spécifiée ou valeur null si celle-ci n'est pas disponible.</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.IHttpRouteData" /> de la requête spécifiée ou valeur null si celle-ci n'est pas disponible.</returns>
      <param name="request">Requête HTTP.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetSynchronizationContext(System.Net.Http.HttpRequestMessage)">
      <summary>Récupère les <see cref="T:System.Threading.SynchronizationContext" /> de la requête spécifiée ou valeur null si celle-ci n'est pas disponible.</summary>
      <returns>
        <see cref="T:System.Threading.SynchronizationContext" /> de la requête spécifiée ou valeur null si celle-ci n'est pas disponible.</returns>
      <param name="request">Requête HTTP.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetUrlHelper(System.Net.Http.HttpRequestMessage)">
      <summary>Obtient une instance <see cref="T:System.Web.Http.Routing.UrlHelper" /> pour une requête HTTP.</summary>
      <returns>Instance <see cref="T:System.Web.Http.Routing.UrlHelper" /> initialisée pour la requête HTTP spécifiée.</returns>
      <param name="request">Requête HTTP.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.IsBatchRequest(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.IsLocal(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.RegisterForDispose(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.IDisposable})"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.RegisterForDispose(System.Net.Http.HttpRequestMessage,System.IDisposable)">
      <summary>Ajoute la <paramref name="resource" /> donnée à la liste des ressources qui seront supprimées par un hôte une fois la <paramref name="request" /> supprimée.</summary>
      <param name="request">Requête HTTP contrôlant le cycle de vie de la <paramref name="resource" />.</param>
      <param name="resource">Ressource à supprimer lorsque la <paramref name="request" /> est supprimée.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.SetConfiguration(System.Net.Http.HttpRequestMessage,System.Web.Http.HttpConfiguration)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.SetRequestContext(System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpRequestContext)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.SetRouteData(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRouteData)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.ShouldIncludeErrorDetail(System.Net.Http.HttpRequestMessage)"></member>
    <member name="T:System.Net.Http.HttpResponseMessageExtensions">
      <summary>Représente les extensions de message pour la réponse HTTP à partir d'une opération ASP.NET.</summary>
    </member>
    <member name="M:System.Net.Http.HttpResponseMessageExtensions.TryGetContentValue``1(System.Net.Http.HttpResponseMessage,``0@)">
      <summary>Tente de récupérer la valeur du contenu pour les <see cref="T:System.Net.Http.HttpResponseMessageExtensions" />.</summary>
      <returns>Résultat de la récupération de la valeur du contenu.</returns>
      <param name="response">Réponse de l'opération.</param>
      <param name="value">Valeur du contenu.</param>
      <typeparam name="T">Type de la valeur à récupérer.</typeparam>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatterExtensions">
      <summary>Représente des extensions pour l'ajout d'éléments <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> à un <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddUriPathExtensionMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)"></member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddUriPathExtensionMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String)"></member>
    <member name="T:System.Net.Http.Formatting.UriPathExtensionMapping">
      <summary>Fournit des valeurs <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> à partir des extensions de chemin d'accès qui apparaissent dans un <see cref="T:System.Uri" />. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.UriPathExtensionMapping.#ctor(System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Initialise une nouvelle instance de la classe <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping" />. </summary>
      <param name="uriPathExtension">Extension correspondant au paramètre mediaType. Cette valeur ne peut inclure ni point, ni caractère générique.</param>
      <param name="mediaType">Valeur <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> retournée si le paramètre uriPathExtension correspond.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.UriPathExtensionMapping.#ctor(System.String,System.String)">
      <summary> Initialise une nouvelle instance de la classe <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping" />. </summary>
      <param name="uriPathExtension">Extension correspondant au paramètre mediaType. Cette valeur ne peut inclure ni point, ni caractère générique.</param>
      <param name="mediaType">Type de média retourné si le paramètre uriPathExtension correspond.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.UriPathExtensionMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> Retourne une valeur indiquant si cette instance <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping" /> peut fournir une valeur <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> pour <see cref="T:System.Uri" /> de la demande. </summary>
      <returns>Si cette instance correspond à une extension de fichier de la demande, elle retourne la valeur 1.0. Sinon, elle retourne la valeur 0.0.</returns>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" /> à vérifier.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.UriPathExtensionMapping.UriPathExtension">
      <summary> Obtient l'extension de chemin d'accès <see cref="T:System.Uri" />. </summary>
      <returns>Extension de chemin d'accès <see cref="T:System.Uri" />.</returns>
    </member>
    <member name="F:System.Net.Http.Formatting.UriPathExtensionMapping.UriPathExtensionKey">
      <summary>Clé d'extension de chemin d'accès <see cref="T:System.Uri" />.</summary>
    </member>
    <member name="T:System.Web.Http.AcceptVerbsAttribute">
      <summary>Représente un attribut qui spécifie les méthodes HTTP auxquelles une méthode d'action doit répondre.</summary>
    </member>
    <member name="M:System.Web.Http.AcceptVerbsAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.AcceptVerbsAttribute" /> en utilisant la méthode d'action à laquelle elle doit répondre.</summary>
      <param name="method">Méthode HTTP à laquelle la méthode d'action doit répondre.</param>
    </member>
    <member name="M:System.Web.Http.AcceptVerbsAttribute.#ctor(System.String[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.AcceptVerbsAttribute" /> en utilisant la liste des méthodes HTTP auxquelles la méthode d'action doit répondre.</summary>
      <param name="methods">Méthodes HTTP auxquelles la méthode d'action doit répondre.</param>
    </member>
    <member name="P:System.Web.Http.AcceptVerbsAttribute.HttpMethods">
      <summary>Obtient ou définit la liste des méthodes HTTP auxquelles la méthode d'action doit répondre.</summary>
      <returns>Obtient ou définit la liste des méthodes HTTP auxquelles la méthode d'action doit répondre.</returns>
    </member>
    <member name="T:System.Web.Http.ActionNameAttribute">
      <summary>Représente un attribut utilisé pour le nom d'une action.</summary>
    </member>
    <member name="M:System.Web.Http.ActionNameAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ActionNameAttribute" />.</summary>
      <param name="name">Nom de l'action.</param>
    </member>
    <member name="P:System.Web.Http.ActionNameAttribute.Name">
      <summary>Obtient ou définit le nom de l'action.</summary>
      <returns>Nom de l'action.</returns>
    </member>
    <member name="T:System.Web.Http.AllowAnonymousAttribute">
      <summary>Spécifie que les actions et les contrôleurs sont ignorés par <see cref="T:System.Web.Http.AuthorizeAttribute" /> au cours de l'autorisation.</summary>
    </member>
    <member name="M:System.Web.Http.AllowAnonymousAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.AllowAnonymousAttribute" />.</summary>
    </member>
    <member name="T:System.Web.Http.ApiController">
      <summary>Définit des propriétés et des méthodes pour un contrôleur d'API.</summary>
    </member>
    <member name="M:System.Web.Http.ApiController.#ctor"></member>
    <member name="P:System.Web.Http.ApiController.ActionContext">
      <summary>Obtient le contexte de l'action.</summary>
      <returns>Contexte de l'action.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.BadRequest">
      <summary>Crée un <see cref="T:System.Web.Http.Results.BadRequestResult" />.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.BadRequestResult" />.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.BadRequest(System.String)">
      <summary>Crée un <see cref="T:System.Web.Http.Results.ErrorMessageResult" /> (400 Requête incorrecte) avec le message d'erreur spécifié.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.InvalidModelStateResult" /> avec l'état de modèle spécifié.</returns>
      <param name="message">Message d'erreur visible pour l'utilisateur.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.BadRequest(System.Web.Http.ModelBinding.ModelStateDictionary)">
      <summary>Crée un <see cref="T:System.Web.Http.Results.InvalidModelStateResult" /> avec l'état de modèle spécifié.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.InvalidModelStateResult" /> avec l'état de modèle spécifié.</returns>
      <param name="modelState">L'état de modèle à inclure dans l'erreur.</param>
    </member>
    <member name="P:System.Web.Http.ApiController.Configuration">
      <summary>Obtient le <see cref="T:System.Web.Http.HttpConfiguration" /> du <see cref="T:System.Web.Http.ApiController" /> actuel.</summary>
      <returns>
        <see cref="T:System.Web.Http.HttpConfiguration" /> du <see cref="T:System.Web.Http.ApiController" /> actuel.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.Conflict">
      <summary>Crée un <see cref="T:System.Web.Http.Results.ConflictResult" /> (409 Conflit).</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.ConflictResult" />.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)">
      <summary>Crée un &lt;see cref="T:System.Web.Http.NegotiatedContentResult`1" /&gt; avec les valeurs spécifiées.</summary>
      <returns>&lt;see cref="T:System.Web.Http.NegotiatedContentResult`1" /&gt; avec les valeurs spécifiées.</returns>
      <param name="statusCode">Le code d'état HTTP pour le message de réponse.</param>
      <param name="value">La valeur de contenu pour négocier et formater le corps de l'entité.</param>
      <typeparam name="T">Le type de contenu dans le corps d'entité.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Crée un &lt;see cref="T:System.Web.Http.FormattedContentResult`1" /&gt; avec les valeurs spécifiées.</summary>
      <returns>&lt;see cref="T:System.Web.Http.FormattedContentResult`1" /&gt; avec les valeurs spécifiées.</returns>
      <param name="statusCode">Le code d'état HTTP pour le message de réponse.</param>
      <param name="value">La valeur de contenu pour formater le corps de l'entité.</param>
      <param name="formatter">Le formateur à utiliser pour formater le contenu.</param>
      <typeparam name="T">Le type de contenu dans le corps d'entité.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Crée un &lt;see cref="T:System.Web.Http.FormattedContentResult`1" /&gt; avec les valeurs spécifiées.</summary>
      <returns>&lt;see cref="T:System.Web.Http.FormattedContentResult`1" /&gt; avec les valeurs spécifiées.</returns>
      <param name="statusCode">Le code d'état HTTP pour le message de réponse.</param>
      <param name="value">La valeur de contenu pour formater le corps de l'entité.</param>
      <param name="formatter">Le formateur à utiliser pour formater le contenu.</param>
      <param name="mediaType"> La valeur de l'en-tête Content-Type, ou &lt;see langword="null" /&gt; pour que le formateur choisisse une valeur par défaut. </param>
      <typeparam name="T">Le type de contenu dans le corps d'entité.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>Crée un &lt;see cref="T:System.Web.Http.FormattedContentResult`1" /&gt; avec les valeurs spécifiées.</summary>
      <returns>&lt;see cref="T:System.Web.Http.FormattedContentResult`1" /&gt; avec les valeurs spécifiées.</returns>
      <param name="statusCode">Le code d'état HTTP pour le message de réponse.</param>
      <param name="value">La valeur de contenu pour formater le corps de l'entité.</param>
      <param name="formatter">Le formateur à utiliser pour formater le contenu.</param>
      <param name="mediaType">Valeur de l'en-tête Content-Type.</param>
      <typeparam name="T">Le type de contenu dans le corps d'entité.</typeparam>
    </member>
    <member name="P:System.Web.Http.ApiController.ControllerContext">
      <summary>Obtient le <see cref="T:System.Web.Http.HttpConfiguration" /> du <see cref="T:System.Web.Http.ApiController" /> actuel.</summary>
      <returns>
        <see cref="T:System.Web.Http.HttpConfiguration" /> du <see cref="T:System.Web.Http.ApiController" /> actuel.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.Created``1(System.String,``0)">
      <summary>Crée un <see cref="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" /> (201 Créé) avec les valeurs spécifiées.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" /> avec les valeurs spécifiées.</returns>
      <param name="location">Emplacement où le contenu a été créé.</param>
      <param name="content">La valeur de contenu pour négocier et formater le corps de l'entité.</param>
      <typeparam name="T">Le type de contenu dans le corps d'entité.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)">
      <summary>Crée un <see cref="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" /> (201 Créé) avec les valeurs spécifiées.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" /> avec les valeurs spécifiées.</returns>
      <param name="location">Emplacement où le contenu a été créé.</param>
      <param name="content">La valeur de contenu pour négocier et formater le corps de l'entité.</param>
      <typeparam name="T">Le type de contenu dans le corps d'entité.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)">
      <summary>Crée un <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" /> (201 Créé) avec les valeurs spécifiées.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" /> avec les valeurs spécifiées.</returns>
      <param name="routeName">Nom de l'itinéraire à utiliser pour générer l'URL.</param>
      <param name="routeValues">Donnée d'itinéraire à utiliser pour générer l'URL.</param>
      <param name="content">La valeur de contenu pour négocier et formater le corps de l'entité.</param>
      <typeparam name="T">Le type de contenu dans le corps d'entité.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)">
      <summary>Crée un <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" /> (201 Créé) avec les valeurs spécifiées.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" /> avec les valeurs spécifiées.</returns>
      <param name="routeName">Nom de l'itinéraire à utiliser pour générer l'URL.</param>
      <param name="routeValues">Donnée d'itinéraire à utiliser pour générer l'URL.</param>
      <param name="content">La valeur de contenu pour négocier et formater le corps de l'entité.</param>
      <typeparam name="T">Le type de contenu dans le corps d'entité.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Dispose">
      <summary>Effectue des tâches définies par l'application associées à la libération, au lancement ou à la réinitialisation des ressources non managées.</summary>
    </member>
    <member name="M:System.Web.Http.ApiController.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par l'objet et libère éventuellement les ressources managées.</summary>
      <param name="disposing">true pour libérer à la fois les ressources managées et non managées ; false pour ne libérer que les ressources non managées.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
      <summary>Exécute de façon asynchrone une seule opération HTTP.</summary>
      <returns>Tâche lancée récemment.</returns>
      <param name="controllerContext">Contexte de contrôleur pour une seule opération HTTP.</param>
      <param name="cancellationToken">Jeton d'annulation attribué pour l'opération HTTP.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
      <summary>Initialise l'instance <see cref="T:System.Web.Http.ApiController" /> avec le controllerContext spécifié.</summary>
      <param name="controllerContext">Objet <see cref="T:System.Web.Http.Controllers.HttpControllerContext" /> servant à l'initialisation.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.InternalServerError">
      <summary>Crée un <see cref="T:System.Web.Http.Results.InternalServerErrorResult" /> (500 Erreur interne au serveur).</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.InternalServerErrorResult" />.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.InternalServerError(System.Exception)">
      <summary>Crée un <see cref="T:System.Web.Http.Results.ExceptionResult" /> (500 Erreur interne au serveur) avec l'exception spécifiée.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.ExceptionResult" /> avec l'exception spécifiée.</returns>
      <param name="exception">Exception à inclure dans l'erreur.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.Json``1(``0)">
      <summary>Crée un <see cref="T:System.Web.Http.Results.JsonResult`1" /> (200 OK) avec la valeur spécifiée.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.JsonResult`1" /> avec la valeur spécifiée.</returns>
      <param name="content">Valeur de contenu à sérialiser dans le corps de l'entité.</param>
      <typeparam name="T">Le type de contenu dans le corps d'entité.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>Crée un <see cref="T:System.Web.Http.Results.JsonResult`1" /> (200 OK) avec les valeurs spécifiées.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.JsonResult`1" /> avec les valeurs spécifiées.</returns>
      <param name="content">Valeur de contenu à sérialiser dans le corps de l'entité.</param>
      <param name="serializerSettings">Paramètres du sérialiseur.</param>
      <typeparam name="T">Le type de contenu dans le corps d'entité.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)">
      <summary>Crée un <see cref="T:System.Web.Http.Results.JsonResult`1" /> (200 OK) avec les valeurs spécifiées.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.JsonResult`1" /> avec les valeurs spécifiées.</returns>
      <param name="content">Valeur de contenu à sérialiser dans le corps de l'entité.</param>
      <param name="serializerSettings">Paramètres du sérialiseur.</param>
      <param name="encoding">Encodage du contenu.</param>
      <typeparam name="T">Le type de contenu dans le corps d'entité.</typeparam>
    </member>
    <member name="P:System.Web.Http.ApiController.ModelState">
      <summary>Obtient l'état du modèle après le processus de liaison du modèle.</summary>
      <returns>État du modèle après le processus de liaison du modèle.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.NotFound">
      <summary>Crée un <see cref="T:System.Web.Http.Results.NotFoundResult" />.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.NotFoundResult" />.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.Ok">
      <summary>Crée un <see cref="T:System.Web.Http.Results.OkResult" /> (200 OK).</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.OkResult" />.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.Ok``1(``0)">
      <summary>Crée un <see cref="T:System.Web.Http.Results.OkNegotiatedContentResult`1" /> avec les valeurs spécifiées.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.OkNegotiatedContentResult`1" /> avec les valeurs spécifiées.</returns>
      <param name="content">La valeur de contenu pour négocier et formater le corps de l'entité.</param>
      <typeparam name="T">Le type de contenu dans le corps d'entité.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Redirect(System.String)">
      <summary>Crée un résultat de redirection (302 Trouvé) avec la valeur spécifiée.</summary>
      <returns>Résultat de redirection (302 Trouvé) avec la valeur spécifiée.</returns>
      <param name="location">Emplacement de redirection.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.Redirect(System.Uri)">
      <summary>Crée un résultat de redirection (302 Trouvé) avec la valeur spécifiée.</summary>
      <returns>Résultat de redirection (302 Trouvé) avec la valeur spécifiée.</returns>
      <param name="location">Emplacement de redirection.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Crée un résultat de redirection (302 Trouvé) avec les valeurs spécifiées.</summary>
      <returns>Résultat de redirection vers l'itinéraire (302 Trouvé) avec les valeurs spécifiées.</returns>
      <param name="routeName">Nom de l'itinéraire à utiliser pour générer l'URL.</param>
      <param name="routeValues">Donnée d'itinéraire à utiliser pour générer l'URL.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Object)">
      <summary>Crée un résultat de redirection (302 Trouvé) avec les valeurs spécifiées.</summary>
      <returns>Résultat de redirection vers l'itinéraire (302 Trouvé) avec les valeurs spécifiées.</returns>
      <param name="routeName">Nom de l'itinéraire à utiliser pour générer l'URL.</param>
      <param name="routeValues">Donnée d'itinéraire à utiliser pour générer l'URL.</param>
    </member>
    <member name="P:System.Web.Http.ApiController.Request">
      <summary>Obtient ou définit le HttpRequestMessage du <see cref="T:System.Web.Http.ApiController" /> actuel.</summary>
      <returns>HttpRequestMessage du <see cref="T:System.Web.Http.ApiController" /> actuel.</returns>
    </member>
    <member name="P:System.Web.Http.ApiController.RequestContext">
      <summary>Obtient le contexte de la requête.</summary>
      <returns>Contexte de la requête.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.ResponseMessage(System.Net.Http.HttpResponseMessage)">
      <summary>Crée un <see cref="T:System.Web.Http.Results.ResponseMessageResult" /> avec la réponse spécifiée.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.ResponseMessageResult" /> pour la réponse spécifiée.</returns>
      <param name="response">Message de réponse HTTP.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.StatusCode(System.Net.HttpStatusCode)">
      <summary>Crée un <see cref="T:System.Web.Http.StatusCodeResult" /> avec le code d'état spécifié.</summary>
      <returns>
        <see cref="T:System.Web.Http.StatusCodeResult" /> avec le code d'état spécifié.</returns>
      <param name="status">Le code d'état HTTP pour le message de réponse</param>
    </member>
    <member name="M:System.Web.Http.ApiController.Unauthorized(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue})">
      <summary>Crée un <see cref="T:System.Web.Http.Results.UnauthorizedResult" /> (401 Non autorisé) avec les valeurs spécifiées.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.UnauthorizedResult" /> avec les valeurs spécifiées.</returns>
      <param name="challenges">Challenges WWW-Authenticate.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.Unauthorized(System.Net.Http.Headers.AuthenticationHeaderValue[])">
      <summary>Crée un <see cref="T:System.Web.Http.Results.UnauthorizedResult" /> (401 Non autorisé) avec les valeurs spécifiées.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.UnauthorizedResult" /> avec les valeurs spécifiées.</returns>
      <param name="challenges">Challenges WWW-Authenticate.</param>
    </member>
    <member name="P:System.Web.Http.ApiController.Url">
      <summary>Obtient une instance d'une <see cref="T:System.Web.Http.Routing.UrlHelper" />, servant à générer des URL vers d'autres API. </summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.UrlHelper" /> servant à générer des URL vers d'autres API.</returns>
    </member>
    <member name="P:System.Web.Http.ApiController.User">
      <summary>Retourne le principal actuel associé à cette demande.</summary>
      <returns>Principal actuel associé à cette demande.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.Validate``1(``0)">
      <summary>Valide l'entité donnée et ajoute les erreurs de validation à l'état du modèle sous le préfixe vide, le cas échéant.</summary>
      <param name="entity">L'entité en cours de validation.</param>
      <typeparam name="TEntity">Le type d'entité à valider.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Validate``1(``0,System.String)">
      <summary>Valide l'entité donnée et ajoute les erreurs de validation à l'état du modèle, le cas échéant.</summary>
      <param name="entity">L'entité en cours de validation.</param>
      <param name="keyPrefix">Le préfixe clé sous lequel les erreurs de l'état du modèle sont ajoutées dans l'état du modèle.</param>
      <typeparam name="TEntity">Le type d'entité à valider.</typeparam>
    </member>
    <member name="T:System.Web.Http.AuthorizeAttribute">
      <summary>Spécifie le filtre d'autorisation qui vérifie le <see cref="T:System.Security.Principal.IPrincipal" /> de la requête.</summary>
    </member>
    <member name="M:System.Web.Http.AuthorizeAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.AuthorizeAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.AuthorizeAttribute.HandleUnauthorizedRequest(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Traite les requêtes pour lesquelles l'autorisation échoue.</summary>
      <param name="actionContext">Contexte.</param>
    </member>
    <member name="M:System.Web.Http.AuthorizeAttribute.IsAuthorized(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Indique si le contrôle spécifié est autorisé.</summary>
      <returns>true si le contrôle est autorisé ; sinon, false.</returns>
      <param name="actionContext">Contexte.</param>
    </member>
    <member name="M:System.Web.Http.AuthorizeAttribute.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Appelle lorsqu'une action est en cours d'autorisation.</summary>
      <param name="actionContext">Contexte.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre de contexte a la valeur Null.</exception>
    </member>
    <member name="P:System.Web.Http.AuthorizeAttribute.Roles">
      <summary>Obtient ou définit les rôles autorisés. </summary>
      <returns>Chaîne de rôles. </returns>
    </member>
    <member name="P:System.Web.Http.AuthorizeAttribute.TypeId">
      <summary>Obtient un identificateur unique pour cet attribut.</summary>
      <returns>Identificateur unique pour cet attribut.</returns>
    </member>
    <member name="P:System.Web.Http.AuthorizeAttribute.Users">
      <summary>Obtient ou définit les utilisateurs autorisés. </summary>
      <returns>Chaîne d'utilisateurs. </returns>
    </member>
    <member name="T:System.Web.Http.FromBodyAttribute">
      <summary> Attribut spéficiant qu'un paramètre d'action provient uniquement du corps d'entité du <see cref="T:System.Net.Http.HttpRequestMessage" /> entrant. </summary>
    </member>
    <member name="M:System.Web.Http.FromBodyAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.FromBodyAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.FromBodyAttribute.GetBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Obtient une liaison de paramètre.</summary>
      <returns>Liaison de paramètre.</returns>
      <param name="parameter">Description du paramètre.</param>
    </member>
    <member name="T:System.Web.Http.FromUriAttribute">
      <summary>Attribut indiquant qu'un paramètre d'action provient de l'URI du <see cref="T:System.Net.Http.HttpRequestMessage" /> entrant.</summary>
    </member>
    <member name="M:System.Web.Http.FromUriAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.FromUriAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.FromUriAttribute.GetValueProviderFactories(System.Web.Http.HttpConfiguration)">
      <summary>Obtient les fabriques de fournisseur de valeur pour le classeur de modèles.</summary>
      <returns>Collection d'objets <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />.</returns>
      <param name="configuration">Configuration.</param>
    </member>
    <member name="T:System.Web.Http.HttpBindNeverAttribute">
      <summary>Représente des attributs qui spécifient que la liaison HTTP doit exclure une propriété.</summary>
    </member>
    <member name="M:System.Web.Http.HttpBindNeverAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.HttpBindNeverAttribute" />.</summary>
    </member>
    <member name="T:System.Web.Http.HttpBindRequiredAttribute">
      <summary>Représente l'attribut requis pour la liaison http.</summary>
    </member>
    <member name="M:System.Web.Http.HttpBindRequiredAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.HttpBindRequiredAttribute" />.</summary>
    </member>
    <member name="T:System.Web.Http.HttpConfiguration">
      <summary>Représente une configuration d'instances <see cref="T:System.Web.Http.HttpServer" />. </summary>
    </member>
    <member name="M:System.Web.Http.HttpConfiguration.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.HttpConfiguration" />.</summary>
    </member>
    <member name="M:System.Web.Http.HttpConfiguration.#ctor(System.Web.Http.HttpRouteCollection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.HttpConfiguration" /> avec une collection d'itinéraires HTTP.</summary>
      <param name="routes">Collection d'itinéraires HTTP à associer à cette instance.</param>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.DependencyResolver">
      <summary>Obtient ou définit le programme de résolution des dépendances associé à cette instance.</summary>
      <returns>Programme de résolution des dépendances.</returns>
    </member>
    <member name="M:System.Web.Http.HttpConfiguration.Dispose">
      <summary>Effectue des tâches définies par l'application associées à la libération, au lancement ou à la réinitialisation des ressources non managées.</summary>
    </member>
    <member name="M:System.Web.Http.HttpConfiguration.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par l'objet et libère éventuellement les ressources managées.</summary>
      <param name="disposing">true pour libérer à la fois les ressources managées et non managées ; false pour ne libérer que les ressources non managées.</param>
    </member>
    <member name="M:System.Web.Http.HttpConfiguration.EnsureInitialized">
      <summary>Invoque le hook initialiseur.Il est considéré comme immuable  partir de ce point.Il est plus sûr de l'appeler plusieurs fois.</summary>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Filters">
      <summary>Obtient la liste des filtres qui s'appliquent à toutes les demandes servies à l'aide de cette instance <see cref="T:System.Web.Http.HttpConfiguration" />.</summary>
      <returns>Liste des filtres.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Formatters">
      <summary>Obtient les formateurs de type de média pour cette instance.</summary>
      <returns>Collection d'objets <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.IncludeErrorDetailPolicy">
      <summary>Obtient ou définit la valeur indiquant si des détails doivent être inclus dans les messages d'erreur.</summary>
      <returns>Valeur <see cref="T:System.Web.Http.IncludeErrorDetailPolicy" /> indiquant cette politique de détails des erreurs.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Initializer">
      <summary> Obtient ou définit l'action qui doit effectuer l'initialisation finale de l'instance <see cref="T:System.Web.Http.HttpConfiguration" /> avant son utilisation pour le traitement des demandes. </summary>
      <returns>Action effectuant l'initialisation finale de l'instance <see cref="T:System.Web.Http.HttpConfiguration" />.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.MessageHandlers">
      <summary>Obtient une liste triée des instances <see cref="T:System.Net.Http.DelegatingHandler" /> à appeler tandis qu'un <see cref="T:System.Net.Http.HttpRequestMessage" /> remonte la pile et qu'un <see cref="T:System.Net.Http.HttpResponseMessage" /> descend dans la pile en retour. </summary>
      <returns>Collection de gestionnaires de messages.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.ParameterBindingRules">
      <summary>Obtient la collection de règles concernant le mode de liaison des paramètres.</summary>
      <returns>Collection de fonctions permettant de générer une liaison de paramètres pour un paramètre donné.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Properties">
      <summary>Obtient les propriétés associées à cette instance.</summary>
      <returns>
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> qui contient les propriétés.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Routes">
      <summary>Obtient la <see cref="T:System.Web.Http.HttpRouteCollection" /> associée à cette instance <see cref="T:System.Web.Http.HttpConfiguration" />.</summary>
      <returns>
        <see cref="T:System.Web.Http.HttpRouteCollection" />.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Services">
      <summary>Obtient le conteneur des services par défaut associés à cette instance.</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.ServicesContainer" /> contenant les services par défaut de cette instance.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.VirtualPathRoot">
      <summary>Obtient le chemin d'accès virtuel racine.</summary>
      <returns>Chemin d'accès virtuel racine.</returns>
    </member>
    <member name="T:System.Web.Http.HttpConfigurationExtensions">
      <summary>Contient les méthodes d'extension de la classe <see cref="T:System.Web.Http.HttpConfiguration" />.</summary>
    </member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.BindParameter(System.Web.Http.HttpConfiguration,System.Type,System.Web.Http.ModelBinding.IModelBinder)"></member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration)"></member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.IDirectRouteProvider)">
      <summary>Mappe les itinéraires définis par attribut pour l'application.</summary>
      <param name="configuration">Configuration du serveur.</param>
      <param name="directRouteProvider">
        <see cref="T:System.Web.Http.Routing.IDirectRouteProvider" /> à utiliser pour la découverte et la génération d'itinéraires.</param>
    </member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.IInlineConstraintResolver)">
      <summary>Mappe les itinéraires définis par attribut pour l'application.</summary>
      <param name="configuration">Configuration du serveur.</param>
      <param name="constraintResolver">Programme de résolution de contrainte.</param>
    </member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.IInlineConstraintResolver,System.Web.Http.Routing.IDirectRouteProvider)">
      <summary>Mappe les itinéraires définis par attribut pour l'application.</summary>
      <param name="configuration">Configuration du serveur.</param>
      <param name="constraintResolver">
        <see cref="T:System.Web.Http.Routing.IInlineConstraintResolver" /> à utiliser pour résoudre les contraintes en ligne.</param>
      <param name="directRouteProvider">
        <see cref="T:System.Web.Http.Routing.IDirectRouteProvider" /> à utiliser pour la découverte et la génération d'itinéraires.</param>
    </member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.SuppressHostPrincipal(System.Web.Http.HttpConfiguration)"></member>
    <member name="T:System.Web.Http.HttpDeleteAttribute">
      <summary>Spécifie qu'une action prend en charge la méthode DELETE HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.HttpDeleteAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.HttpDeleteAttribute" />.</summary>
    </member>
    <member name="P:System.Web.Http.HttpDeleteAttribute.HttpMethods">
      <summary>Obtient les méthodes http correspondant à cet attribut.</summary>
      <returns>Méthodes http correspondant à cet attribut.</returns>
    </member>
    <member name="T:System.Web.Http.HttpError">
      <summary>Définit un conteneur sérialisable pour les informations sur l'erreur.Ces informations sont stockées en paires clé/valeur.Les clés de dictionnaire pour rechercher des informations sur l'erreur standard sont disponibles sur le type <see cref="T:System.Web.Http.HttpErrorKeys" />.</summary>
    </member>
    <member name="M:System.Web.Http.HttpError.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.HttpError" />.</summary>
    </member>
    <member name="M:System.Web.Http.HttpError.#ctor(System.Exception,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.HttpError" /> pour <paramref name="exception" />.</summary>
      <param name="exception">Exception à utiliser pour les informations sur l'erreur.</param>
      <param name="includeErrorDetail">true pour inclure les informations sur l'exception dans l'erreur ; sinon, false</param>
    </member>
    <member name="M:System.Web.Http.HttpError.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.HttpError" /> contenant le message d'erreur <paramref name="message" />.</summary>
      <param name="message">Message d'erreur à associer à cette instance.</param>
    </member>
    <member name="M:System.Web.Http.HttpError.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.HttpError" /> pour <paramref name="modelState" />.</summary>
      <param name="modelState">État de modèle non valide à utiliser pour les informations sur l'erreur.</param>
      <param name="includeErrorDetail">true pour inclure les messages d'exception dans l'erreur ; sinon, false</param>
    </member>
    <member name="P:System.Web.Http.HttpError.ExceptionMessage">
      <summary>Obtient ou définit le message de l'<see cref="T:System.Exception" /> s'il est disponible.</summary>
      <returns>Le message de l'<see cref="T:System.Exception" />, le cas échéant.</returns>
    </member>
    <member name="P:System.Web.Http.HttpError.ExceptionType">
      <summary>Obtient ou définit le type de l'<see cref="T:System.Exception" /> s'il est disponible.</summary>
      <returns>Le type de l'<see cref="T:System.Exception" />, le cas échéant.</returns>
    </member>
    <member name="M:System.Web.Http.HttpError.GetPropertyValue``1(System.String)">
      <summary>Obtient une valeur de propriété particulière pour cette instance d'erreur.</summary>
      <returns>Valeur de propriété particulière de cette instance d'erreur.</returns>
      <param name="key">Nom de la propriété d'erreur.</param>
      <typeparam name="TValue">Type de la propriété.</typeparam>
    </member>
    <member name="P:System.Web.Http.HttpError.InnerException">
      <summary>Obtient l'<see cref="T:System.Exception" /> interne associée à cette instance si elle est disponible.</summary>
      <returns>L'<see cref="T:System.Exception" /> est associée à cette instance, le cas échéant.</returns>
    </member>
    <member name="P:System.Web.Http.HttpError.Message">
      <summary>Obtient ou définit le message visible par l'utilisateur au niveau supérieur expliquant la cause de l'erreur.Dans ce champ, les informations doivent être considérées comme publiques, car elles seront transmises sur le réseau indépendamment de <see cref="T:System.Web.Http.IncludeErrorDetailPolicy" />.De ce fait, il faut veiller à ne pas divulguer d'informations sensibles sur le serveur ou l'application.</summary>
      <returns>Message visible par l'utilisateur au niveau supérieur expliquant la cause de l'erreur.Dans ce champ, les informations doivent être considérées comme publiques, car elles seront transmises sur le réseau indépendamment de <see cref="T:System.Web.Http.IncludeErrorDetailPolicy" />.De ce fait, il faut veiller à ne pas divulguer d'informations sensibles sur le serveur ou l'application.</returns>
    </member>
    <member name="P:System.Web.Http.HttpError.MessageDetail">
      <summary>Obtient ou définit une description détaillée de l'erreur destinée à permettre au développeur de comprendre la raison exacte de l'échec.</summary>
      <returns>Une description détaillée de l'erreur destinée à permettre au développeur de comprendre la raison exacte de l'échec.</returns>
    </member>
    <member name="P:System.Web.Http.HttpError.ModelState">
      <summary>Obtient l'<see cref="P:System.Web.Http.HttpError.ModelState" /> contenant des informations sur les erreurs qui se sont produites lors de la liaison de modèle.</summary>
      <returns>L'<see cref="P:System.Web.Http.HttpError.ModelState" /> contenant des informations sur les erreurs qui se sont produites lors de la liaison de modèle.</returns>
    </member>
    <member name="P:System.Web.Http.HttpError.StackTrace">
      <summary>Obtient ou définit les informations de suivi de pile associées à cette instance, si elles sont disponibles.</summary>
      <returns>Les informations de suivi de pile associées à cette instance, le cas échéant.</returns>
    </member>
    <member name="M:System.Web.Http.HttpError.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Cette méthode est réservée et ne doit pas être utilisée.</summary>
      <returns>Retourne toujours la valeur null.</returns>
    </member>
    <member name="M:System.Web.Http.HttpError.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Génère une instance <see cref="T:System.Web.Http.HttpError" /> à partir de la représentation XML associée.</summary>
      <param name="reader">Flux XmlReader à partir duquel l'objet est désérialisé.</param>
    </member>
    <member name="M:System.Web.Http.HttpError.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Convertit une instance <see cref="T:System.Web.Http.HttpError" /> vers la représentation XML associée.</summary>
      <param name="writer">Flux XmlWriter vers lequel l'objet est sérialisé.</param>
    </member>
    <member name="T:System.Web.Http.HttpErrorKeys">
      <summary> Fournit des clés pour la recherche d'informations d'erreur stockées dans le dictionnaire <see cref="T:System.Web.Http.HttpError" />. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.ErrorCodeKey">
      <summary> Fournit une clé pour l'ErrorCode. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.ExceptionMessageKey">
      <summary> Fournit une clé pour l'ExceptionMessage. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.ExceptionTypeKey">
      <summary> Fournit une clé pour l'ExceptionType. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.InnerExceptionKey">
      <summary> Fournit une clé pour l'InnerException. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.MessageDetailKey">
      <summary> Fournit une clé pour le MessageDetail. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.MessageKey">
      <summary> Fournit une clé pour le Message. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.MessageLanguageKey">
      <summary> Fournit une clé pour le MessageLanguage. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.ModelStateKey">
      <summary> Fournit une clé pour le ModelState. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.StackTraceKey">
      <summary> Fournit une clé pour le StackTrace. </summary>
    </member>
    <member name="T:System.Web.Http.HttpGetAttribute">
      <summary>Spécifie qu'une action prend en charge la méthode GET HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.HttpGetAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.HttpGetAttribute" />.</summary>
    </member>
    <member name="P:System.Web.Http.HttpGetAttribute.HttpMethods">
      <summary>Obtient les méthodes http correspondant à cet attribut.</summary>
      <returns>Méthodes http correspondant à cet attribut.</returns>
    </member>
    <member name="T:System.Web.Http.HttpHeadAttribute">
      <summary> Spécifie qu'une action prend en charge la méthode HEAD HTTP. </summary>
    </member>
    <member name="M:System.Web.Http.HttpHeadAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.HttpHeadAttribute" />.</summary>
    </member>
    <member name="P:System.Web.Http.HttpHeadAttribute.HttpMethods">
      <summary>Obtient les méthodes http correspondant à cet attribut.</summary>
      <returns>Méthodes http correspondant à cet attribut.</returns>
    </member>
    <member name="T:System.Web.Http.HttpOptionsAttribute">
      <summary>Représente un attribut utilisé pour restreindre une méthode HTTP afin qu'elle traite uniquement les requêtes HTTP OPTIONS.</summary>
    </member>
    <member name="M:System.Web.Http.HttpOptionsAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.HttpOptionsAttribute" />.</summary>
    </member>
    <member name="P:System.Web.Http.HttpOptionsAttribute.HttpMethods">
      <summary>Obtient les méthodes http correspondant à cet attribut.</summary>
      <returns>Méthodes http correspondant à cet attribut.</returns>
    </member>
    <member name="T:System.Web.Http.HttpPatchAttribute">
      <summary> Spécifie qu'une action prend en charge la méthode PATCH HTTP. </summary>
    </member>
    <member name="M:System.Web.Http.HttpPatchAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.HttpPatchAttribute" />.</summary>
    </member>
    <member name="P:System.Web.Http.HttpPatchAttribute.HttpMethods">
      <summary>Obtient les méthodes http correspondant à cet attribut.</summary>
      <returns>Méthodes http correspondant à cet attribut.</returns>
    </member>
    <member name="T:System.Web.Http.HttpPostAttribute">
      <summary>Spécifie qu'une action prend en charge la méthode POST HTTP. </summary>
    </member>
    <member name="M:System.Web.Http.HttpPostAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.HttpPostAttribute" />.</summary>
    </member>
    <member name="P:System.Web.Http.HttpPostAttribute.HttpMethods">
      <summary>Obtient les méthodes http correspondant à cet attribut.</summary>
      <returns>Méthodes http correspondant à cet attribut.</returns>
    </member>
    <member name="T:System.Web.Http.HttpPutAttribute">
      <summary>Représente un attribut utilisé pour restreindre une méthode HTTP afin qu'elle traite uniquement les requêtes HTTP PUT.</summary>
    </member>
    <member name="M:System.Web.Http.HttpPutAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.HttpPutAttribute" />.</summary>
    </member>
    <member name="P:System.Web.Http.HttpPutAttribute.HttpMethods">
      <summary>Obtient les méthodes http correspondant à cet attribut.</summary>
      <returns>Méthodes http correspondant à cet attribut.</returns>
    </member>
    <member name="T:System.Web.Http.HttpResponseException">
      <summary> Exception qui permet de retourner un <see cref="T:System.Net.Http.HttpResponseMessage" /> au client. </summary>
    </member>
    <member name="M:System.Web.Http.HttpResponseException.#ctor(System.Net.Http.HttpResponseMessage)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.HttpResponseException" />.</summary>
      <param name="response">Réponse HTTP à retourner au client.</param>
    </member>
    <member name="M:System.Web.Http.HttpResponseException.#ctor(System.Net.HttpStatusCode)">
      <summary> Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.HttpResponseException" />. </summary>
      <param name="statusCode">Code d'état de la réponse.</param>
    </member>
    <member name="P:System.Web.Http.HttpResponseException.Response">
      <summary>Obtient la réponse HTTP à retourner au client.</summary>
      <returns>Le <see cref="T:System.Net.Http.HttpResponseMessage" /> qui représente la réponse HTTP.</returns>
    </member>
    <member name="T:System.Web.Http.HttpRouteCollection">
      <summary>Collection d'instances <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</summary>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.HttpRouteCollection" />.</summary>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.HttpRouteCollection" />.</summary>
      <param name="virtualPathRoot">Racine du chemin d'accès virtuel.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Add(System.String,System.Web.Http.Routing.IHttpRoute)">
      <summary>Ajoute une instance <see cref="T:System.Web.Http.Routing.IHttpRoute" /> à la collection.</summary>
      <param name="name">Nom de l'itinéraire.</param>
      <param name="route">Instance <see cref="T:System.Web.Http.Routing.IHttpRoute" /> à ajouter à la collection.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Clear">
      <summary>Supprime tous les éléments de la collection.</summary>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Contains(System.Web.Http.Routing.IHttpRoute)">
      <summary>Détermine si la collection contient un <see cref="T:System.Web.Http.Routing.IHttpRoute" /> spécifique.</summary>
      <returns>true si l'<see cref="T:System.Web.Http.Routing.IHttpRoute" /> existe dans la collection ; sinon, false.</returns>
      <param name="item">Objet à localiser dans la collection.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.ContainsKey(System.String)">
      <summary>Détermine si la collection contient un élément avec la clé spécifiée.</summary>
      <returns>true si la collection contient un élément incluant la clé spécifiée ; sinon, false.</returns>
      <param name="name">Clé à localiser dans la collection.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.Routing.IHttpRoute}[],System.Int32)">
      <summary>Copie les instances <see cref="T:System.Web.Http.Routing.IHttpRoute" /> de la collection dans un tableau, en commençant à un index de tableau particulier.</summary>
      <param name="array">Tableau qui constitue la destination des éléments copiés à partir de la collection.</param>
      <param name="arrayIndex">Index de base zéro dans <paramref name="array" /> au niveau duquel commence la copie.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.CopyTo(System.Web.Http.Routing.IHttpRoute[],System.Int32)">
      <summary>Copie les noms d'itinéraires et les instances <see cref="T:System.Web.Http.Routing.IHttpRoute" /> de la collection dans un tableau, en commençant à un index de tableau particulier.</summary>
      <param name="array">Tableau qui constitue la destination des éléments copiés à partir de la collection.</param>
      <param name="arrayIndex">Index de base zéro dans <paramref name="array" /> au niveau duquel commence la copie.</param>
    </member>
    <member name="P:System.Web.Http.HttpRouteCollection.Count">
      <summary>Obtient le nombre d'éléments de la collection.</summary>
      <returns>Nombre d'éléments de la collection.</returns>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.CreateRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Crée une instance <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</summary>
      <returns>Nouvelle instance <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</returns>
      <param name="routeTemplate">Modèle d'itinéraire.</param>
      <param name="defaults">Objet qui contient les paramètres d'itinéraire par défaut.</param>
      <param name="constraints">Objet qui contient les contraintes d'itinéraire.</param>
      <param name="dataTokens">Jetons de données d'itinéraire.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.CreateRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Net.Http.HttpMessageHandler)">
      <summary>Crée une instance <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</summary>
      <returns>Nouvelle instance <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</returns>
      <param name="routeTemplate">Modèle d'itinéraire.</param>
      <param name="defaults">Objet qui contient les paramètres d'itinéraire par défaut.</param>
      <param name="constraints">Objet qui contient les contraintes d'itinéraire.</param>
      <param name="dataTokens">Jetons de données d'itinéraire.</param>
      <param name="handler">Gestionnaire de messages pour l'itinéraire.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.CreateRoute(System.String,System.Object,System.Object)">
      <summary>Crée une instance <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</summary>
      <returns>Nouvelle instance <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</returns>
      <param name="routeTemplate">Modèle d'itinéraire.</param>
      <param name="defaults">Objet qui contient les paramètres d'itinéraire par défaut.</param>
      <param name="constraints">Objet qui contient les contraintes d'itinéraire.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Dispose">
      <summary>Effectue des tâches définies par l'application associées à la libération, au lancement ou à la réinitialisation des ressources non managées.</summary>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par l'objet et libère éventuellement les ressources managées.</summary>
      <param name="disposing">true pour libérer à la fois les ressources managées et non managées ; false pour ne libérer que les ressources non managées.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> permettant d'itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.GetRouteData(System.Net.Http.HttpRequestMessage)">
      <summary>Obtient les données d'itinéraire pour une requête HTTP spécifiée.</summary>
      <returns>Instance <see cref="T:System.Web.Http.Routing.IHttpRouteData" /> qui représente les données d'itinéraire.</returns>
      <param name="request">Requête HTTP.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.GetVirtualPath(System.Net.Http.HttpRequestMessage,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Obtient un chemin d'accès virtuel.</summary>
      <returns>Instance <see cref="T:System.Web.Http.Routing.IHttpVirtualPathData" /> représentant le chemin d'accès virtuel.</returns>
      <param name="request">Requête HTTP.</param>
      <param name="name">Nom de l'itinéraire.</param>
      <param name="values">Valeurs d'itinéraire.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Insert(System.Int32,System.String,System.Web.Http.Routing.IHttpRoute)">
      <summary>Insère une instance <see cref="T:System.Web.Http.Routing.IHttpRoute" /> dans la collection.</summary>
      <param name="index">Index de base zéro auquel <paramref name="value" /> doit être inséré.</param>
      <param name="name">Nom de l'itinéraire.</param>
      <param name="value">
        <see cref="T:System.Web.Http.Routing.IHttpRoute" /> à insérer.La valeur ne peut pas être null.</param>
    </member>
    <member name="P:System.Web.Http.HttpRouteCollection.IsReadOnly">
      <summary>Obtient une valeur indiquant si la collection est en lecture seule.</summary>
      <returns>true si la collection est en lecture seule ; sinon, false.</returns>
    </member>
    <member name="P:System.Web.Http.HttpRouteCollection.Item(System.Int32)">
      <summary>Obtient ou définit l'élément au niveau de l'index spécifié.</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.IHttpRoute" /> à l'index spécifié.</returns>
      <param name="index">Index.</param>
    </member>
    <member name="P:System.Web.Http.HttpRouteCollection.Item(System.String)">
      <summary>Obtient ou définit l'élément avec le nom d'itinéraire spécifié.</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.IHttpRoute" /> à l'index spécifié.</returns>
      <param name="name">Nom de l'itinéraire.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.OnGetEnumerator">
      <summary>Appelé en interne pour obtenir l'énumérateur pour la collection.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> permettant d'itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Remove(System.String)">
      <summary>Supprime une instance <see cref="T:System.Web.Http.Routing.IHttpRoute" /> de la collection.</summary>
      <returns>true si l'élément est correctement supprimé ; sinon, false.Cette méthode retourne également false si <paramref name="name" /> est introuvable dans la collection.</returns>
      <param name="name">Nom de l'itinéraire à supprimer.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.System#Collections#Generic#ICollection{T}#Add(System.Web.Http.Routing.IHttpRoute)">
      <summary>Ajoute un élément à la collection.</summary>
      <param name="route">Objet à ajouter à la collection.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.System#Collections#Generic#ICollection{T}#Remove(System.Web.Http.Routing.IHttpRoute)">
      <summary>Supprime la première occurrence d'un objet spécifique de la collection.</summary>
      <returns>true si <paramref name="route" /> a été correctement supprimé de la collection ; sinon, false.Cette méthode retourne également false si <paramref name="route" /> est introuvable dans la collection d'origine.</returns>
      <param name="route">Objet à supprimer de la collection.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns>Objet <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.TryGetValue(System.String,System.Web.Http.Routing.IHttpRoute@)">
      <summary>Obtient <see cref="T:System.Web.Http.Routing.IHttpRoute" /> avec le nom de l'itinéraire spécifié.</summary>
      <returns>true si la collection contient un élément incluant le nom spécifié ; sinon, false.</returns>
      <param name="name">Nom de l'itinéraire.</param>
      <param name="route">Lorsque cette méthode est retournée, contient l'instance <see cref="T:System.Web.Http.Routing.IHttpRoute" />, si le nom de l'itinéraire est trouvé ; sinon, null.Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.ValidateConstraint(System.String,System.String,System.Object)">
      <summary>Valide la validité d'une contrainte pour un <see cref="T:System.Web.Http.Routing.IHttpRoute" /> créé par un appel à la méthode <see cref="M:System.Web.Http.HttpRouteCollection.CreateRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Net.Http.HttpMessageHandler)" />.</summary>
      <param name="routeTemplate">Modèle d'itinéraire.</param>
      <param name="name">Nom de la contrainte.</param>
      <param name="constraint">Objet de la contrainte.</param>
    </member>
    <member name="P:System.Web.Http.HttpRouteCollection.VirtualPathRoot">
      <summary>Obtient la racine du chemin d'accès virtuel.</summary>
      <returns>Racine du chemin d'accès virtuel.</returns>
    </member>
    <member name="T:System.Web.Http.HttpRouteCollectionExtensions">
      <summary> Méthodes d'extension pour <see cref="T:System.Web.Http.HttpRouteCollection" /></summary>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.IgnoreRoute(System.Web.Http.HttpRouteCollection,System.String,System.String)">
      <summary>Ignore l'itinéraire spécifié.</summary>
      <returns>Retourne <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</returns>
      <param name="routes">Collection des itinéraires de l'application.</param>
      <param name="routeName">Nom de l'itinéraire à ignorer.</param>
      <param name="routeTemplate">Modèle de l'itinéraire.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.IgnoreRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object)">
      <summary>Ignore l'itinéraire spécifié.</summary>
      <returns>Retourne <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</returns>
      <param name="routes">Collection des itinéraires de l'application.</param>
      <param name="routeName">Nom de l'itinéraire à ignorer.</param>
      <param name="routeTemplate">Modèle de l'itinéraire.</param>
      <param name="constraints">Ensemble d'expressions qui spécifient des valeurs pour le modèle d'itinéraire.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpBatchRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Web.Http.Batch.HttpBatchHandler)">
      <summary> Mappe l'itinéraire spécifié pour la gestion des requêtes par lot HTTP. </summary>
      <param name="routes">Collection des itinéraires de l'application.</param>
      <param name="routeName">Nom de l'itinéraire à mapper.</param>
      <param name="routeTemplate">Modèle de l'itinéraire.</param>
      <param name="batchHandler">Le <see cref="T:System.Web.Http.Batch.HttpBatchHandler" /> de gestion des requêtes par lot.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String)">
      <summary>Mappe le modèle d'itinéraire spécifié.</summary>
      <returns>Référence à l'itinéraire mappé.</returns>
      <param name="routes">Collection des itinéraires de l'application.</param>
      <param name="name">Nom de l'itinéraire à mapper.</param>
      <param name="routeTemplate">Modèle de l'itinéraire.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object)">
      <summary>Mappe le modèle d'itinéraire spécifié et définit des valeurs d'itinéraire par défaut.</summary>
      <returns>Référence à l'itinéraire mappé.</returns>
      <param name="routes">Collection des itinéraires de l'application.</param>
      <param name="name">Nom de l'itinéraire à mapper.</param>
      <param name="routeTemplate">Modèle de l'itinéraire.</param>
      <param name="defaults">Objet qui contient les valeurs d'itinéraire par défaut.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object,System.Object)">
      <summary>Mappe le modèle d'itinéraire spécifié et définit des valeurs d'itinéraire par défaut et des contraintes.</summary>
      <returns>Référence à l'itinéraire mappé.</returns>
      <param name="routes">Collection des itinéraires de l'application.</param>
      <param name="name">Nom de l'itinéraire à mapper.</param>
      <param name="routeTemplate">Modèle de l'itinéraire.</param>
      <param name="defaults">Objet qui contient les valeurs d'itinéraire par défaut.</param>
      <param name="constraints">Ensemble d'expressions qui spécifient des valeurs pour <paramref name="routeTemplate" />.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object,System.Object,System.Net.Http.HttpMessageHandler)">
      <summary>Mappe le modèle d'itinéraire spécifié et définit des valeurs d'itinéraire par défaut, des contraintes et le gestionnaire de messages de point de terminaison.</summary>
      <returns>Référence à l'itinéraire mappé.</returns>
      <param name="routes">Collection des itinéraires de l'application.</param>
      <param name="name">Nom de l'itinéraire à mapper.</param>
      <param name="routeTemplate">Modèle de l'itinéraire.</param>
      <param name="defaults">Objet qui contient les valeurs d'itinéraire par défaut.</param>
      <param name="constraints">Ensemble d'expressions qui spécifient des valeurs pour <paramref name="routeTemplate" />.</param>
      <param name="handler">Gestionnaire dans lequel la demande est répartie.</param>
    </member>
    <member name="T:System.Web.Http.HttpServer">
      <summary> Définit une implémentation d'un <see cref="T:System.Net.Http.HttpMessageHandler" /> qui distribue un <see cref="T:System.Net.Http.HttpRequestMessage" /> entrant et crée le <see cref="T:System.Net.Http.HttpResponseMessage" /> associé. </summary>
    </member>
    <member name="M:System.Web.Http.HttpServer.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.HttpServer" /> à l'aide de la configuration et du répartiteur par défaut.</summary>
    </member>
    <member name="M:System.Web.Http.HttpServer.#ctor(System.Net.Http.HttpMessageHandler)">
      <summary> Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.HttpServer" /> avec le répartiteur spécifié. </summary>
      <param name="dispatcher">Répartiteur HTTP qui traitera les demandes entrantes.</param>
    </member>
    <member name="M:System.Web.Http.HttpServer.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.HttpServer" /> avec la configuration spécifiée.</summary>
      <param name="configuration">
        <see cref="T:System.Web.Http.HttpConfiguration" /> servant à configurer cette instance.</param>
    </member>
    <member name="M:System.Web.Http.HttpServer.#ctor(System.Web.Http.HttpConfiguration,System.Net.Http.HttpMessageHandler)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.HttpServer" /> avec la configuration et le répartiteur spécifiés.</summary>
      <param name="configuration">
        <see cref="T:System.Web.Http.HttpConfiguration" /> servant à configurer cette instance.</param>
      <param name="dispatcher">Répartiteur HTTP qui traitera les demandes entrantes.</param>
    </member>
    <member name="P:System.Web.Http.HttpServer.Configuration">
      <summary>Obtient la <see cref="T:System.Web.Http.HttpConfiguration" /> servant à configurer cette instance.</summary>
      <returns>
        <see cref="T:System.Web.Http.HttpConfiguration" /> servant à configurer cette instance.</returns>
    </member>
    <member name="P:System.Web.Http.HttpServer.Dispatcher">
      <summary>Obtient le répartiteur HTTP qui traite les demandes entrantes.</summary>
      <returns>Répartiteur HTTP qui traite les demandes entrantes.</returns>
    </member>
    <member name="M:System.Web.Http.HttpServer.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par l'objet et libère éventuellement les ressources managées.</summary>
      <param name="disposing">true pour libérer à la fois les ressources managées et non managées ; false pour ne libérer que les ressources non managées.</param>
    </member>
    <member name="M:System.Web.Http.HttpServer.Initialize">
      <summary>Prépare le serveur pour l'opération.</summary>
    </member>
    <member name="M:System.Web.Http.HttpServer.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Répartit un <see cref="T:System.Net.Http.HttpRequestMessage" /> entrant.</summary>
      <returns> Tâche représentant l'opération asynchrone.</returns>
      <param name="request">Demande à répartir.</param>
      <param name="cancellationToken">Jeton permettant de surveiller les demandes d'annulation.</param>
    </member>
    <member name="T:System.Web.Http.IHttpActionResult">
      <summary>Définit une commande qui crée de manière asynchrone un <see cref="T:System.Net.Http.HttpResponseMessage" />.</summary>
    </member>
    <member name="M:System.Web.Http.IHttpActionResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Crée un <see cref="T:System.Net.Http.HttpResponseMessage" /> de manière asynchrone.</summary>
      <returns>Tâche qui, une fois accomplie, contient le <see cref="T:System.Net.Http.HttpResponseMessage" />.</returns>
      <param name="cancellationToken">Jeton permettant de surveiller les demandes d'annulation.</param>
    </member>
    <member name="T:System.Web.Http.IncludeErrorDetailPolicy">
      <summary>Spécifie si les détails de l'erreur, tels que les messages d'exception et les suivis de pile, doivent être inclus dans les messages d'erreur.</summary>
    </member>
    <member name="F:System.Web.Http.IncludeErrorDetailPolicy.Always">
      <summary>Toujours inclure les détails de l'erreur.</summary>
    </member>
    <member name="F:System.Web.Http.IncludeErrorDetailPolicy.Default">
      <summary>Utilisez le comportement par défaut de l'environnement hôte.Pour l'hébergement ASP.NET, utilisez la valeur de l'élément customErrors dans le fichier Web.config.Pour l'hébergement autonome, utilisez la valeur <see cref="F:System.Web.Http.IncludeErrorDetailPolicy.LocalOnly" />.</summary>
    </member>
    <member name="F:System.Web.Http.IncludeErrorDetailPolicy.LocalOnly">
      <summary>Inclure uniquement les détails de l'erreur lors de la réponse à une demande locale. </summary>
    </member>
    <member name="F:System.Web.Http.IncludeErrorDetailPolicy.Never">
      <summary>Ne jamais inclure les détails de l'erreur. </summary>
    </member>
    <member name="T:System.Web.Http.NonActionAttribute">
      <summary>Représente un attribut utilisé pour indiquer qu'une méthode de contrôleur n'est pas une méthode d'action.</summary>
    </member>
    <member name="M:System.Web.Http.NonActionAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.NonActionAttribute" />.</summary>
    </member>
    <member name="T:System.Web.Http.OverrideActionFiltersAttribute">
      <summary>Représente une attribut de filtre qui remplace les filtres d'action définis à un niveau supérieur.</summary>
    </member>
    <member name="M:System.Web.Http.OverrideActionFiltersAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.OverrideActionFiltersAttribute" />.</summary>
    </member>
    <member name="P:System.Web.Http.OverrideActionFiltersAttribute.AllowMultiple">
      <summary>Obtient une valeur indiquant si le filtre d'action autorise un attribut multiple.</summary>
      <returns>true si le filtre d'action autorise un attribut multiple ; sinon, false.</returns>
    </member>
    <member name="P:System.Web.Http.OverrideActionFiltersAttribute.FiltersToOverride">
      <summary>Obtient le type des filtres à remplacer.</summary>
      <returns>Type des filtres à remplacer.</returns>
    </member>
    <member name="T:System.Web.Http.OverrideAuthenticationAttribute">
      <summary>Représente une attribut de filtre qui remplace les filtres d'authentification définis à un niveau supérieur.</summary>
    </member>
    <member name="M:System.Web.Http.OverrideAuthenticationAttribute.#ctor"></member>
    <member name="P:System.Web.Http.OverrideAuthenticationAttribute.AllowMultiple"></member>
    <member name="P:System.Web.Http.OverrideAuthenticationAttribute.FiltersToOverride"></member>
    <member name="T:System.Web.Http.OverrideAuthorizationAttribute">
      <summary>Représente une attribut de filtre qui remplace les filtres d'autorisation définis à un niveau supérieur.</summary>
    </member>
    <member name="M:System.Web.Http.OverrideAuthorizationAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.OverrideAuthorizationAttribute" />.</summary>
    </member>
    <member name="P:System.Web.Http.OverrideAuthorizationAttribute.AllowMultiple">
      <summary>Obtient ou définit une valeur booléenne qui indique s'il est possible de spécifier plusieurs instances de l'attribut indiqué pour un seul élément du programme.</summary>
      <returns>true s'il est possible de spécifier plusieurs instances ; sinon, false.</returns>
    </member>
    <member name="P:System.Web.Http.OverrideAuthorizationAttribute.FiltersToOverride">
      <summary>Obtient le type des attributs de remplacement de filtres.</summary>
      <returns>Type des attributs de remplacement de filtres.</returns>
    </member>
    <member name="T:System.Web.Http.OverrideExceptionFiltersAttribute">
      <summary>Représente une attribut de filtre qui remplace les filtres d'exception définis à un niveau supérieur.</summary>
    </member>
    <member name="M:System.Web.Http.OverrideExceptionFiltersAttribute.#ctor"></member>
    <member name="P:System.Web.Http.OverrideExceptionFiltersAttribute.AllowMultiple"></member>
    <member name="P:System.Web.Http.OverrideExceptionFiltersAttribute.FiltersToOverride"></member>
    <member name="T:System.Web.Http.ParameterBindingAttribute">
      <summary>Attribut sur un paramètre ou type qui produit une <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" />.Si l'attribut est situé dans une déclaration de type, c'est comme si cet attribut était présent dans tous les paramètres d'action de ce type.</summary>
    </member>
    <member name="M:System.Web.Http.ParameterBindingAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ParameterBindingAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.ParameterBindingAttribute.GetBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Obtient la liaison de paramètre.</summary>
      <returns>Liaison de paramètre.</returns>
      <param name="parameter">Description du paramètre.</param>
    </member>
    <member name="T:System.Web.Http.RouteAttribute">
      <summary>Emplacement sur une action pour l'exposer directement via un itinéraire.</summary>
    </member>
    <member name="M:System.Web.Http.RouteAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.RouteAttribute" />. </summary>
    </member>
    <member name="M:System.Web.Http.RouteAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.RouteAttribute" />. </summary>
      <param name="template">Modèle d'itinéraire décrivant le modèle d'URI à rechercher.</param>
    </member>
    <member name="P:System.Web.Http.RouteAttribute.Name">
      <returns>Retourne <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Web.Http.RouteAttribute.Order">
      <returns>Retourne <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Web.Http.RouteAttribute.System#Web#Http#Routing#IDirectRouteFactory#CreateRoute(System.Web.Http.Routing.DirectRouteFactoryContext)"></member>
    <member name="P:System.Web.Http.RouteAttribute.Template">
      <returns>Retourne <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.Web.Http.RouteParameter">
      <summary>La classe <see cref="T:System.Web.Http.RouteParameter" /> permet d'indiquer les propriétés d'un paramètre d'itinéraire (littéraux et espaces réservés situés au sein des segments d'un <see cref="M:IHttpRoute.RouteTemplate" />).Par exemple, elle permet d'indiquer qu'un paramètre d'itinéraire est facultatif.</summary>
    </member>
    <member name="F:System.Web.Http.RouteParameter.Optional">
      <summary>Paramètre facultatif.</summary>
    </member>
    <member name="M:System.Web.Http.RouteParameter.ToString">
      <summary>Retourne une <see cref="T:System.String" /> qui représente cette instance.</summary>
      <returns>
        <see cref="T:System.String" /> qui représente cette instance.</returns>
    </member>
    <member name="T:System.Web.Http.RoutePrefixAttribute">
      <summary> Annote un contrôleur avec un préfixe d'itinéraire qui s'applique à toutes les actions à l'intérieur du contrôleur. </summary>
    </member>
    <member name="M:System.Web.Http.RoutePrefixAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.RoutePrefixAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.RoutePrefixAttribute.#ctor(System.String)">
      <summary> Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.RoutePrefixAttribute" />. </summary>
      <param name="prefix">Préfixe d'itinéraire pour le contrôleur.</param>
    </member>
    <member name="P:System.Web.Http.RoutePrefixAttribute.Prefix">
      <summary> Obtient le préfixe d'itinéraire. </summary>
    </member>
    <member name="T:System.Web.Http.ServicesExtensions">
      <summary>Fournit des accesseurs de type sécurisé pour des services obtenus à partir d'un objet <see cref="T:System.Web.Http.Controllers.ServicesContainer" />.</summary>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetActionInvoker(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Obtient le service <see cref="T:System.Web.Http.Controllers.IHttpActionInvoker" />.</summary>
      <returns>Retourne une instance <see cref="T:System.Web.Http.Controllers.IHttpActionInvoker" />.</returns>
      <param name="services">Conteneur des services.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetActionSelector(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Obtient le service <see cref="T:System.Web.Http.Controllers.IHttpActionSelector" />.</summary>
      <returns>Retourne une instance <see cref="T:System.Web.Http.Controllers.IHttpActionSelector" />.</returns>
      <param name="services">Conteneur des services.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetActionValueBinder(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Obtient le service <see cref="T:System.Web.Http.Controllers.IActionValueBinder" />.</summary>
      <returns>Retourne une instance <see cref="T:System.Web.Http.Controllers.IActionValueBinder" />.</returns>
      <param name="services">Conteneur des services.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetApiExplorer(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Obtient le service <see cref="T:System.Web.Http.Description.IApiExplorer" />.</summary>
      <returns>Retourne une instance <see cref="T:System.Web.Http.Description.IApiExplorer" />.</returns>
      <param name="services">Conteneur des services.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetAssembliesResolver(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Obtient le service <see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver" />.</summary>
      <returns>Retourne une instance <see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver" />.</returns>
      <param name="services">Conteneur des services.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetBodyModelValidator(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Obtient le service <see cref="T:System.Web.Http.Validation.IBodyModelValidator" />.</summary>
      <returns>Retourne une instance <see cref="T:System.Web.Http.Validation.IBodyModelValidator" />.</returns>
      <param name="services">Conteneur des services.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetContentNegotiator(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Obtient le service <see cref="T:System.Net.Http.Formatting.IContentNegotiator" />.</summary>
      <returns>Retourne une instance <see cref="T:System.Net.Http.Formatting.IContentNegotiator" />.</returns>
      <param name="services">Conteneur des services.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetDocumentationProvider(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Obtient le service <see cref="T:System.Web.Http.Description.IDocumentationProvider" />.</summary>
      <returns>Retourne une instance <see cref="T:System.Web.Http.Description.IDocumentationProvider" />.</returns>
      <param name="services">Conteneur des services.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetExceptionHandler(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Retourne, le cas échéant, le gestionnaire inscrit des exceptions non gérées.</summary>
      <returns>Le gestionnaire inscrit des exceptions non gérées, le cas échéant ; sinon, null.</returns>
      <param name="services">Conteneur des services.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetExceptionLoggers(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Retourne la collection des enregistreurs inscrits des exceptions non gérées.</summary>
      <returns>Collection des enregistreurs inscrits des exceptions non gérées.</returns>
      <param name="services">Conteneur des services.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetFilterProviders(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Obtient la collection <see cref="T:System.Web.Http.Filters.IFilterProvider" />.</summary>
      <returns>Retourne une collection d'objets <see cref="T:System.Web.Http.Filters.IFilterProvider" />.</returns>
      <param name="services">Conteneur des services.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetHostBufferPolicySelector(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Obtient le service <see cref="T:System.Web.Http.Hosting.IHostBufferPolicySelector" />.</summary>
      <returns>Retourne une instance <see cref="T:System.Web.Http.Hosting.IHostBufferPolicySelector" />.</returns>
      <param name="services">Conteneur des services.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetHttpControllerActivator(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Obtient le service <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" />.</summary>
      <returns>Retourne une instance <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" /> ou null si aucune instance n'a été inscrite.</returns>
      <param name="services">Conteneur des services.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetHttpControllerSelector(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Obtient le service <see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector" />.</summary>
      <returns>Retourne une instance <see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector" />.</returns>
      <param name="services">Conteneur des services.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetHttpControllerTypeResolver(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Obtient le service <see cref="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver" />.</summary>
      <returns>Retourne une instance <see cref="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver" />.</returns>
      <param name="services">Conteneur des services.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetModelBinderProviders(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Obtient la collection <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" />.</summary>
      <returns>Retourne une collection d'objets <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" />.</returns>
      <param name="services">Conteneur des services.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetModelMetadataProvider(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Obtient le service <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" />.</summary>
      <returns>Retourne une instance <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" />.</returns>
      <param name="services">Conteneur des services.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetModelValidatorProviders(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Obtient la collection <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" />.</summary>
      <returns>Retourne une collection d'objets <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" />.</returns>
      <param name="services">Conteneur des services.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetTraceManager(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Obtient le service <see cref="T:System.Web.Http.Tracing.ITraceManager" />.</summary>
      <returns>Retourne une instance <see cref="T:System.Web.Http.Tracing.ITraceManager" />.</returns>
      <param name="services">Conteneur des services.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetTraceWriter(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Obtient le service <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</summary>
      <returns>Retourne une instance <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</returns>
      <param name="services">Conteneur des services.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetValueProviderFactories(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Obtient la collection <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />.</summary>
      <returns>Retourne une collection d'objets <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />.</returns>
      <param name="services">Conteneur des services.</param>
    </member>
    <member name="T:System.Web.Http.SingleResult">
      <summary>Représente un <see cref="T:System.Linq.IQueryable" /> contenant des entités zéro ou un.À utiliser avec [EnableQuery] à partir de l'espace de noms System.Web.Http.OData ou System.Web.OData.</summary>
    </member>
    <member name="M:System.Web.Http.SingleResult.#ctor(System.Linq.IQueryable)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.SingleResult" />.</summary>
      <param name="queryable">
        <see cref="T:System.Linq.IQueryable" /> entités zéro ou un.</param>
    </member>
    <member name="M:System.Web.Http.SingleResult.Create``1(System.Linq.IQueryable{``0})">
      <summary>Crée un <see cref="T:System.Web.Http.SingleResult`1" /> à partir de <see cref="T:System.Linq.IQueryable`1" />.Méthode d'assistance pour instancier un objet <see cref="T:System.Web.Http.SingleResult`1" /> sans spécifier explicitement le type <paramref name="T" />.</summary>
      <returns>La <see cref="T:System.Web.Http.SingleResult`1" /> créée.</returns>
      <param name="queryable">
        <see cref="T:System.Linq.IQueryable`1" /> entités zéro ou un.</param>
      <typeparam name="T">Type de données de la source.</typeparam>
    </member>
    <member name="P:System.Web.Http.SingleResult.Queryable">
      <summary>
        <see cref="T:System.Linq.IQueryable" /> entités zéro ou un.</summary>
    </member>
    <member name="T:System.Web.Http.SingleResult`1">
      <summary>Représente un <see cref="T:System.Linq.IQueryable`1" /> contenant des entités zéro ou un.À utiliser avec [EnableQuery] à partir de l'espace de noms System.Web.Http.OData ou System.Web.OData.</summary>
      <typeparam name="T">Type de données de la source.</typeparam>
    </member>
    <member name="M:System.Web.Http.SingleResult`1.#ctor(System.Linq.IQueryable{`0})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.SingleResult`1" />.</summary>
      <param name="queryable">
        <see cref="T:System.Linq.IQueryable`1" /> entités zéro ou un.</param>
    </member>
    <member name="P:System.Web.Http.SingleResult`1.Queryable">
      <summary>
        <see cref="T:System.Linq.IQueryable`1" /> entités zéro ou un.</summary>
    </member>
    <member name="T:System.Web.Http.Batch.BatchExecutionOrder">
      <summary> Définit l'ordre d'exécution des requêtes de lots. </summary>
    </member>
    <member name="F:System.Web.Http.Batch.BatchExecutionOrder.NonSequential">
      <summary> Exécute les requêtes de lots de manière non séquentielle. </summary>
    </member>
    <member name="F:System.Web.Http.Batch.BatchExecutionOrder.Sequential">
      <summary> Exécute les requêtes de lots de manière séquentielle. </summary>
    </member>
    <member name="T:System.Web.Http.Batch.BatchHttpRequestMessageExtensions">
      <summary> Fournit des méthodes d'extension pour la classe <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
    </member>
    <member name="M:System.Web.Http.Batch.BatchHttpRequestMessageExtensions.CopyBatchRequestProperties(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpRequestMessage)">
      <summary> Copie les propriétés d'un autre <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
      <param name="subRequest">Sous-requête.</param>
      <param name="batchRequest">Requête de lots qui contient les propriété à copier.</param>
    </member>
    <member name="T:System.Web.Http.Batch.DefaultHttpBatchHandler">
      <summary>Représente l'implémentation par défaut de <see cref="T:System.Web.Http.Batch.HttpBatchHandler" /> qui code les messages de requête/réponse HTTP comme MIME en plusieurs parties.</summary>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.#ctor(System.Web.Http.HttpServer)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Batch.DefaultHttpBatchHandler" />.</summary>
      <param name="httpServer">Le <see cref="T:System.Web.Http.HttpServer" /> de gestion des requêtes de lots individuelles.</param>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.CreateResponseMessageAsync(System.Collections.Generic.IList{System.Net.Http.HttpResponseMessage},System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Crée le message de traitement de réponse par lots.</summary>
      <returns>Message de traitement de réponse par lots.</returns>
      <param name="responses">Réponses aux requêtes de lots.</param>
      <param name="request">Demande initiale contenant toutes les requêtes de lots.</param>
      <param name="cancellationToken">Jeton d'annulation.</param>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.ExecuteRequestMessagesAsync(System.Collections.Generic.IEnumerable{System.Net.Http.HttpRequestMessage},System.Threading.CancellationToken)">
      <summary>Exécute les messages de requête du lot.</summary>
      <returns>Une collection de requêtes de lots <see cref="T:System.Net.Http.HttpResponseMessage" />.</returns>
      <param name="requests">Collection de messages de requête du lot.</param>
      <param name="cancellationToken">Jeton d'annulation.</param>
    </member>
    <member name="P:System.Web.Http.Batch.DefaultHttpBatchHandler.ExecutionOrder">
      <summary>Obtient ou définit l'ordre d'exécution des requêtes de lots.L'ordre d'exécution par défaut est séquentiel.</summary>
      <returns>Ordre d'exécution des requêtes de lots.L'ordre d'exécution par défaut est séquentiel.</returns>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.ParseBatchRequestsAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Convertit une requête de lots entrante en collection de messages de requête.</summary>
      <returns>Collection de <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
      <param name="request">Requête contenant les messages de requête de lots.</param>
      <param name="cancellationToken">Jeton d'annulation.</param>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.ProcessBatchAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Traite la requête de lots.</summary>
      <returns>Résultat de l'opération.</returns>
      <param name="request">Requête de lots.</param>
      <param name="cancellationToken">Jeton d'annulation.</param>
    </member>
    <member name="P:System.Web.Http.Batch.DefaultHttpBatchHandler.SupportedContentTypes">
      <summary>Obtient les types de contenus pris en charge pour la requête de lots.</summary>
      <returns>Types de contenus pris en charge pour la requête de lots.</returns>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.ValidateRequest(System.Net.Http.HttpRequestMessage)">
      <summary>Valide la demande entrante qui contient les messages de requête de lots.</summary>
      <param name="request">Requête contenant les messages de requête de lots.</param>
    </member>
    <member name="T:System.Web.Http.Batch.HttpBatchHandler">
      <summary>Définit l'abstraction pour gérer des requêtes de lots HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Batch.HttpBatchHandler.#ctor(System.Web.Http.HttpServer)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Batch.HttpBatchHandler" />.</summary>
      <param name="httpServer">Le <see cref="T:System.Web.Http.HttpServer" /> de gestion des requêtes de lots individuelles.</param>
    </member>
    <member name="P:System.Web.Http.Batch.HttpBatchHandler.Invoker">
      <summary>Amène le demandeur à envoyer les requêtes de lots à <see cref="T:System.Web.Http.HttpServer" />.</summary>
      <returns>Demandeur qui envoie les requêtes de lots à <see cref="T:System.Web.Http.HttpServer" />.</returns>
    </member>
    <member name="M:System.Web.Http.Batch.HttpBatchHandler.ProcessBatchAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Traite la requête de lots entrante comme un simple <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Réponse par lots.</returns>
      <param name="request">Requête de lots.</param>
      <param name="cancellationToken">Jeton d'annulation.</param>
    </member>
    <member name="M:System.Web.Http.Batch.HttpBatchHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Envoie le gestionnaire de lots de manière asynchrone.</summary>
      <returns>Résultat de l'opération.</returns>
      <param name="request">Demande d'envoi.</param>
      <param name="cancellationToken">Jeton d'annulation.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ApiControllerActionInvoker">
      <summary>Appelle les méthodes d'action d'un contrôleur.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ApiControllerActionInvoker.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.ApiControllerActionInvoker" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ApiControllerActionInvoker.InvokeActionAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Appelle de façon asynchrone l'action spécifiée à l'aide du contexte du contrôleur spécifié.</summary>
      <returns>Action appelée.</returns>
      <param name="actionContext">Contexte du contrôleur.</param>
      <param name="cancellationToken">Jeton d'annulation.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ApiControllerActionSelector">
      <summary>Représente un sélecteur d'action basé sur une réflexion.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ApiControllerActionSelector.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.ApiControllerActionSelector" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ApiControllerActionSelector.GetActionMapping(System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>Obtient les mappages d'action pour le <see cref="T:System.Web.Http.Controllers.ApiControllerActionSelector" />.</summary>
      <returns>Mappages d'action.</returns>
      <param name="controllerDescriptor">Informations décrivant un contrôleur.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ApiControllerActionSelector.SelectAction(System.Web.Http.Controllers.HttpControllerContext)">
      <summary>Sélectionne une action pour le <see cref="T:System.Web.Http.Controllers.ApiControllerActionSelector" />.</summary>
      <returns>Action sélectionnée.</returns>
      <param name="controllerContext">Contexte du contrôleur.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ControllerServices">
      <summary> Représente un conteneur pour les services qui peuvent être spécifiques à un contrôleur.  Cela cache les services du <see cref="T:System.Web.Http.Controllers.ServicesContainer" /> parent associé. Un contrôleur peut définir un service ici ou passer à l'ensemble de services plus global.  </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.#ctor(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.ControllerServices" />.</summary>
      <param name="parent">Conteneur de services parent.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.ClearSingle(System.Type)">
      <summary>Supprime un service à instance unique des services par défaut.</summary>
      <param name="serviceType">Type du service.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.GetService(System.Type)">
      <summary>Obtient un service du type spécifié.</summary>
      <returns>Première instance du service ou valeur null si le service est introuvable.</returns>
      <param name="serviceType">Type du service.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.GetServiceInstances(System.Type)">
      <summary>Obtient la liste des objets de service pour un type de service donné et valide le type de service.</summary>
      <returns>Liste des objets de service du type spécifié.</returns>
      <param name="serviceType">Type de service.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.GetServices(System.Type)">
      <summary>Obtient la liste des objets de service pour un type de service donné.</summary>
      <returns>Liste des objets de service du type spécifié ou liste vide si le service est introuvable.</returns>
      <param name="serviceType">Type du service.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.IsSingleService(System.Type)">
      <summary>Demande si un type de service inclut une seule instance.</summary>
      <returns>true si le type de service a au plus une instance ou false si le type de service prend en charge plusieurs instances.</returns>
      <param name="serviceType">Type de service.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.ReplaceSingle(System.Type,System.Object)">
      <summary>Remplace un objet de service à instance unique.</summary>
      <param name="serviceType">Type de service.</param>
      <param name="service">Objet de service qui remplace l'instance précédente.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpActionBinding">
      <summary>Cette rubrique décrit le déroulement de la liaison et comment elle ne survient pas réellement.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionBinding.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.HttpActionBinding" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionBinding.#ctor(System.Web.Http.Controllers.HttpActionDescriptor,System.Web.Http.Controllers.HttpParameterBinding[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.HttpActionBinding" />.</summary>
      <param name="actionDescriptor">Pointeur de retour vers l'action pour laquelle cette liaison est créée.  </param>
      <param name="bindings">Liaisons synchrones pour chaque paramètre.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionBinding.ActionDescriptor">
      <summary>Obtient ou définit le pointeur de retour vers l'action pour laquelle cette liaison est créée.  </summary>
      <returns>Pointeur de retour vers l'action pour laquelle cette liaison est créée.  </returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionBinding.ExecuteBindingAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Exécute de façon asynchrone la liaison pour le contexte de demande spécifié.</summary>
      <returns>Tâche signalée lorsque la liaison est terminée. </returns>
      <param name="actionContext">Contexte d'action pour la liaison. Celui-ci contient le dictionnaire de paramètres qui sera alimenté.</param>
      <param name="cancellationToken">Jeton d'annulation pour annuler l'opération de liaison. Un classeur peut également lier un paramètre.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionBinding.ParameterBindings">
      <summary>Obtient ou définit les liaisons synchrones pour chaque paramètre. </summary>
      <returns>Liaisons synchrones pour chaque paramètre.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpActionContext">
      <summary>Contient des informations pour l'action en cours d'exécution.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionContext.#ctor">
      <summary> Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.HttpActionContext" />. </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionContext.#ctor(System.Web.Http.Controllers.HttpControllerContext,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.HttpActionContext" />.</summary>
      <param name="controllerContext">Contexte du contrôleur.</param>
      <param name="actionDescriptor">Descripteur de l'action.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.ActionArguments">
      <summary>Obtient une liste d'arguments d'action.</summary>
      <returns>Liste d'arguments d'action.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.ActionDescriptor">
      <summary>Obtient ou définit le descripteur d'action du contexte de l'action.</summary>
      <returns>Descripteur de l'action.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.ControllerContext">
      <summary>Obtient ou définit le contexte du contrôleur.</summary>
      <returns>Contexte du contrôleur.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.ModelState">
      <summary>Obtient le dictionnaire d'états de modèles pour le contexte.</summary>
      <returns>Dictionnaire d'états du modèle.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.Request">
      <summary>Obtient le message de la demande pour le contexte de l'action.</summary>
      <returns>Message de la demande pour le contexte de l'action.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.RequestContext">
      <summary>Obtient le contexte de la requête actuelle.</summary>
      <returns>Contexte de la requête actuelle.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.Response">
      <summary>Obtient ou définit le message de réponse pour le contexte de l'action.</summary>
      <returns>Message de réponse pour le contexte de l'action.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpActionContextExtensions">
      <summary>Contient les méthodes d'extension pour <see cref="T:System.Web.Http.Controllers.HttpActionContext" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.Bind(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.Bind(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Collections.Generic.IEnumerable{System.Web.Http.ModelBinding.IModelBinder})"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetMetadataProvider(System.Web.Http.Controllers.HttpActionContext)"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetValidatorProviders(System.Web.Http.Controllers.HttpActionContext)"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetValidators(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.Metadata.ModelMetadata)"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.TryBindStrongModel``1(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.String,System.Web.Http.Metadata.ModelMetadataProvider,``0@)">
      <typeparam name="TModel"></typeparam>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpActionDescriptor">
      <summary>Fournit des informations sur les méthodes d'action.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.#ctor(System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" /> avec des informations spécifiées décrivant le contrôleur de l'action.</summary>
      <param name="controllerDescriptor">Informations décrivant le contrôleur de l'action.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ActionBinding">
      <summary>Obtient ou définit la liaison qui décrit l'action.</summary>
      <returns>Liaison décrivant l'action.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ActionName">
      <summary>Obtient le nom de l'action.</summary>
      <returns>Nom de l'action.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.Configuration">
      <summary>Obtient ou définit la configuration d'action.</summary>
      <returns>Configuration d'action.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ControllerDescriptor">
      <summary>Obtient les informations décrivant le contrôleur de l'action.</summary>
      <returns>Informations décrivant le contrôleur de l'action.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
      <summary>Exécute l'action décrite et retourne une <see cref="T:System.Threading.Tasks.Task`1" /> qui, une fois terminée, contiendra la valeur de retour de l'action.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" /> qui, une fois terminée, contiendra la valeur de retour de l'action.</returns>
      <param name="controllerContext">Contexte du contrôleur.</param>
      <param name="arguments">Liste d'arguments.</param>
      <param name="cancellationToken">Jeton d'annulation.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetCustomAttributes``1">
      <summary>Retourne les attributs personnalisés associés au descripteur de l'action.</summary>
      <returns>Attributs personnalisés associés au descripteur de l'action.</returns>
      <typeparam name="T">Descripteur de l'action.</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetCustomAttributes``1(System.Boolean)">
      <summary>Obtient les attributs personnalisés pour l'action.</summary>
      <returns>La collection d'attributs personnalisés à appliquer à cette action.</returns>
      <param name="inherit">true pour rechercher la chaîne d'héritage de cette action afin de trouver les attributs ; sinon, false.</param>
      <typeparam name="T">Le type d'attribut à rechercher.</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetFilterPipeline">
      <summary>Récupère les filtres pour la configuration et l'action données.</summary>
      <returns>Filtres pour la configuration et l'action données.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetFilters">
      <summary>Récupère les filtres pour le descripteur d'action.</summary>
      <returns>Filtres pour le descripteur d'action.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetParameters">
      <summary>Récupère les paramètres pour le descripteur d'action.</summary>
      <returns>Paramètres pour le descripteur d'action.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.Properties">
      <summary>Obtient les propriétés associées à cette instance.</summary>
      <returns>Propriétés associées à cette instance.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ResultConverter">
      <summary>Obtient le convertisseur pour la transformation correcte du résultat de l'appel ExecuteAsync(HttpControllerContext, IDictionaryString, Object)" en une instance de <see cref="T:System.Net.Http.HttpResponseMessage" />.</summary>
      <returns>Convertisseur de résultat de l'action.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ReturnType">
      <summary>Obtient le type de retour du descripteur.</summary>
      <returns>Type de retour du descripteur.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.SupportedHttpMethods">
      <summary>Obtient la collection des méthodes HTTP prises en charge pour le descripteur.</summary>
      <returns>Collection des méthodes HTTP prises en charge pour le descripteur.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpControllerContext">
      <summary>Contient des informations pour une seule opération HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerContext.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.HttpControllerContext" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerContext.#ctor(System.Web.Http.Controllers.HttpRequestContext,System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpControllerDescriptor,System.Web.Http.Controllers.IHttpController)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.HttpControllerContext" />.</summary>
      <param name="requestContext">Contexte de la requête.</param>
      <param name="request">Requête HTTP.</param>
      <param name="controllerDescriptor">Descripteur du contrôleur.</param>
      <param name="controller">Contrôleur.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerContext.#ctor(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.IHttpRouteData,System.Net.Http.HttpRequestMessage)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.HttpControllerContext" />.</summary>
      <param name="configuration">Configuration.</param>
      <param name="routeData">Données d'itinéraire.</param>
      <param name="request">Demande.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.Configuration">
      <summary>Obtient ou définit la configuration.</summary>
      <returns>Configuration.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.Controller">
      <summary>Obtient ou définit le contrôleur HTTP.</summary>
      <returns>Contrôleur HTTP.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.ControllerDescriptor">
      <summary>Obtient ou définit le descripteur du contrôleur.</summary>
      <returns>Descripteur du contrôleur.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.Request">
      <summary>Obtient ou définit la demande.</summary>
      <returns>Demande.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.RequestContext">
      <summary>Obtient ou définit le contexte de requête.</summary>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.RouteData">
      <summary>Obtient ou définit les données d'itinéraire.</summary>
      <returns>Données d'itinéraire.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpControllerDescriptor">
      <summary>Représente des informations décrivant le contrôleur HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.#ctor(System.Web.Http.HttpConfiguration,System.String,System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />.</summary>
      <param name="configuration">Configuration.</param>
      <param name="controllerName">Nom du contrôleur.</param>
      <param name="controllerType">Type du contrôleur.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerDescriptor.Configuration">
      <summary>Obtient ou définit les configurations associées au contrôleur.</summary>
      <returns>Configurations associées au contrôleur.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerDescriptor.ControllerName">
      <summary>Obtient ou définit le nom du contrôleur.</summary>
      <returns>Nom du contrôleur.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerDescriptor.ControllerType">
      <summary>Obtient ou définit le type du contrôleur.</summary>
      <returns>Type du contrôleur.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.CreateController(System.Net.Http.HttpRequestMessage)">
      <summary>Crée une instance de contrôleur pour le <see cref="T:System.Net.Http.HttpRequestMessage" /> donné.</summary>
      <returns>Instance de contrôleur créée.</returns>
      <param name="request">Message de requête.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.GetCustomAttributes``1">
      <summary>Récupère une collection d'attributs personnalisés du contrôleur.</summary>
      <returns>Collection d'attributs personnalisés.</returns>
      <typeparam name="T">Type de l'objet.</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.GetCustomAttributes``1(System.Boolean)">
      <summary> Retourne une collection d'attributs pouvant être affectés à &lt;typeparamref name="T" /&gt; pour le contrôleur de ce descripteur. </summary>
      <returns>Collection d'attributs associés à ce contrôleur.</returns>
      <param name="inherit">true pour rechercher la chaîne d'héritage de ce contrôleur afin de trouver les attributs ; sinon, false.</param>
      <typeparam name="T">Permet de filtrer la collection des attributs.Utilisez une valeur d'<see cref="T:System.Object" /> pour extraire tous les attributs.</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.GetFilters">
      <summary>Retourne une collection de filtres associés au contrôleur.</summary>
      <returns>Collection de filtres associés au contrôleur.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerDescriptor.Properties">
      <summary>Obtient les propriétés associées à cette instance.</summary>
      <returns>Propriétés associées à cette instance.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpControllerSettings">
      <summary>Contient les paramètres d'un contrôleur HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerSettings.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.HttpControllerSettings" />.</summary>
      <param name="configuration">Objet de configuration qui permet d'initialiser l'instance.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerSettings.Formatters">
      <summary>Obtient la collection d'instances <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> pour le contrôleur.</summary>
      <returns>Collection d'instances <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerSettings.ParameterBindingRules">
      <summary>Obtient la collection de fonctions de liaison de paramètre pour le contrôleur.</summary>
      <returns>Collection de fonctions de liaison de paramètre.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerSettings.Services">
      <summary>Obtient la collection d'instances de service pour le contrôleur.</summary>
      <returns>Collection d'instances de service.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpParameterBinding">
      <summary> Décrit la manière dont un paramètre est lié. La liaison doit être statique (basée sur le descripteur uniquement) et peut être partagée entre les demandes.  </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" />.</summary>
      <param name="descriptor">
        <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" /> décrivant les paramètres.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterBinding.Descriptor">
      <summary>Obtient la <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" /> servant à initialiser cette instance.</summary>
      <returns>Instance <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterBinding.ErrorMessage">
      <summary>Si la liaison n'est pas valable, un message décrivant l'erreur de liaison est généré.</summary>
      <returns>Message d'erreur. Si la liaison est réussie, la valeur est null.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Exécute de façon asynchrone la liaison de la demande donnée.</summary>
      <returns>Objet de tâche représentant l'opération asynchrone.</returns>
      <param name="metadataProvider">Fournisseur de métadonnées à utiliser pour la validation.</param>
      <param name="actionContext">Contexte d'action pour la liaison. Le contexte de l'action contient le dictionnaire de paramètres qui sera alimenté par le paramètre.</param>
      <param name="cancellationToken">Jeton d'annulation pour annuler l'opération de liaison.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterBinding.GetValue(System.Web.Http.Controllers.HttpActionContext)">
      <summary> Obtient la valeur de paramètre du dictionnaire d'arguments du contexte de l'action.</summary>
      <returns>Valeur de ce paramètre dans le contexte de l'action donnée ou valeur null si le paramètre n'a pas encore été défini.</returns>
      <param name="actionContext">Contexte de l'action.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterBinding.IsValid">
      <summary>Obtient une valeur qui indique si la liaison a réussi.</summary>
      <returns>true si la liaison a réussi ; sinon, false.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterBinding.SetValue(System.Web.Http.Controllers.HttpActionContext,System.Object)">
      <summary>Définit le résultat de cette liaison de paramètres dans le dictionnaire d'arguments du contexte de l'action.  </summary>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="value">Valeur du paramètre.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterBinding.WillReadBody">
      <summary>Renvoie une valeur indiquant si cette instance <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" /> va lire le corps de l'entité du message HTTP.</summary>
      <returns>true si cette <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" /> doit lire le corps de l'entité ; sinon, false.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpParameterDescriptor">
      <summary>Représente le descripteur de paramètre HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterDescriptor.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterDescriptor.#ctor(System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />.</summary>
      <param name="actionDescriptor">Descripteur de l'action.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.ActionDescriptor">
      <summary>Obtient ou définit le descripteur de l'action.</summary>
      <returns>Descripteur de l'action.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.Configuration">
      <summary>Obtient ou définit le <see cref="T:System.Web.Http.HttpConfiguration" /> pour le <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />.</summary>
      <returns>
        <see cref="T:System.Web.Http.HttpConfiguration" /> pour le <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.DefaultValue">
      <summary>Obtient la valeur par défaut du paramètre.</summary>
      <returns>La valeur par défaut du paramètre.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterDescriptor.GetCustomAttributes``1">
      <summary>Récupère une collection des attributs personnalisés à partir du paramètre.</summary>
      <returns>Collection des attributs personnalisés à partir du paramètre.</returns>
      <typeparam name="T">Type des attributs personnalisés.</typeparam>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.IsOptional">
      <summary>Obtient une valeur qui indique si le paramètre est facultatif.</summary>
      <returns>true si le paramètre est facultatif ; sinon, false.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.ParameterBinderAttribute">
      <summary>Obtient ou définit l'attribut de liaison de paramètre.</summary>
      <returns>Attribut de liaison de paramètre.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.ParameterName">
      <summary>Obtient le nom du paramètre.</summary>
      <returns>Nom du paramètre.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.ParameterType">
      <summary>Obtient le type du paramètre.</summary>
      <returns>Type du paramètre.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.Prefix">
      <summary>Obtient le préfixe de ce paramètre.</summary>
      <returns>Préfixe de ce paramètre.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.Properties">
      <summary>Obtient les propriétés de ce paramètre.</summary>
      <returns>Propriétés de ce paramètre.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpRequestContext">
      <summary>Représente le contexte associé à une requête.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpRequestContext.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.HttpRequestContext" />.</summary>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.ClientCertificate">
      <summary>Obtient ou définit le certificat client.</summary>
      <returns>Retourne <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.Configuration">
      <summary>Obtient ou définit la configuration.</summary>
      <returns>Retourne <see cref="T:System.Web.Http.HttpConfiguration" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.IncludeErrorDetail">
      <summary>Obtient ou définit une valeur indiquant si des détails d'erreur, tels que des messages d'exception et des suivis de pile, doivent être inclus dans la réponse à cette requête.</summary>
      <returns>Retourne <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.IsLocal">
      <summary>Obtient ou définit une valeur indiquant si la requête provient d'une adresse locale.</summary>
      <returns>Retourne <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.Principal">
      <summary>Obtient ou définit le principal.</summary>
      <returns>Retourne <see cref="T:System.Security.Principal.IPrincipal" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.RouteData">
      <summary>Obtient ou définit les données d'itinéraire.</summary>
      <returns>Retourne <see cref="T:System.Web.Http.Routing.IHttpRouteData" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.Url">
      <summary>Obtient ou définit la fabrique utilisée pour générer des URL pour d'autres API.</summary>
      <returns>Retourne <see cref="T:System.Web.Http.Routing.UrlHelper" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.VirtualPathRoot">
      <summary>Obtient ou définit racine du chemin d'accès virtuel.</summary>
      <returns>Retourne <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.IActionHttpMethodProvider"></member>
    <member name="P:System.Web.Http.Controllers.IActionHttpMethodProvider.HttpMethods"></member>
    <member name="T:System.Web.Http.Controllers.IActionResultConverter">
      <summary> Contrat pour une routine de conversion pouvant prendre le résultat d'une action retournée à partir de &lt;see cref="M:System.Web.Http.Controllers.HttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})" /&gt; et de la convertir en instance de <see cref="T:System.Net.Http.HttpResponseMessage" />. </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IActionResultConverter.Convert(System.Web.Http.Controllers.HttpControllerContext,System.Object)">
      <summary>Convertit l'objet <see cref="T:System.Web.Http.Controllers.IActionResultConverter" /> spécifié en un autre objet.</summary>
      <returns>Objet converti.</returns>
      <param name="controllerContext">Contexte du contrôleur.</param>
      <param name="actionResult">Résultat de l'action.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.IActionValueBinder">
      <summary>Définit la méthode pour récupérer la liaison d'une action associée à la valeur du paramètre.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IActionValueBinder.GetBinding(System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>Obtient la <see cref="T:System.Web.Http.Controllers.HttpActionBinding" />.</summary>
      <returns>Objet <see cref="T:System.Web.Http.Controllers.HttpActionBinding" />.</returns>
      <param name="actionDescriptor">Descripteur de l'action.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.IControllerConfiguration">
      <summary> Si un contrôleur est décoré avec un attribut avec cette interface, il est appelé pour initialiser les paramètres du contrôleur.  </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IControllerConfiguration.Initialize(System.Web.Http.Controllers.HttpControllerSettings,System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary> Rappel appelé pour définir les substitutions par contrôleur pour ce controllerDescriptor. </summary>
      <param name="controllerSettings">Paramètres de contrôleur à initialiser.</param>
      <param name="controllerDescriptor">Descripteur du contrôleur. Remarque : le <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> peut être associé au type de contrôleur dérivé étant donné que <see cref="T:System.Web.Http.Controllers.IControllerConfiguration" /> est hérité.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.IHttpActionInvoker">
      <summary>Contient une méthode utilisée pour appeler l'opération HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IHttpActionInvoker.InvokeActionAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Exécute de façon asynchrone l'opération HTTP.</summary>
      <returns>Tâche lancée récemment.</returns>
      <param name="actionContext">Contexte d'exécution.</param>
      <param name="cancellationToken">Jeton d'annulation attribué pour l'opération HTTP.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.IHttpActionSelector">
      <summary>Contient la logique de sélection d'une méthode d'action.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IHttpActionSelector.GetActionMapping(System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>Retourne un mappage, indexé par chaîne d'action, de tous les <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" /> que le sélecteur peut sélectionner.Cette option est principalement appelée par <see cref="T:System.Web.Http.Description.IApiExplorer" /> pour découvrir toutes les actions possibles dans le contrôleur.</summary>
      <returns>Mappage de <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" /> que le sélecteur peut sélectionner, ou valeur null si celui-ci ne dispose pas d'un mappage bien défini de <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" />.</returns>
      <param name="controllerDescriptor">Descripteur du contrôleur.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.IHttpActionSelector.SelectAction(System.Web.Http.Controllers.HttpControllerContext)">
      <summary>Sélectionne l'action du contrôleur.</summary>
      <returns>Action du contrôleur.</returns>
      <param name="controllerContext">Contexte du contrôleur.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.IHttpController">
      <summary>Représente un contrôleur HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IHttpController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
      <summary>Exécute le contrôleur pour la synchronisation.</summary>
      <returns>Contrôleur.</returns>
      <param name="controllerContext">Contexte actuel d'un contrôleur de test.</param>
      <param name="cancellationToken">Notification annulant l'opération.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ParameterBindingExtensions">
      <summary>Définit des méthodes d'extension pour <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindAsError(System.Web.Http.Controllers.HttpParameterDescriptor,System.String)">
      <summary>Lie le paramètre qui apparaît comme une erreur. </summary>
      <returns>Objet de liaison du paramètre HTTP.</returns>
      <param name="parameter">Descripteur de paramètre décrivant le paramètre à lier.</param>
      <param name="message">Message d'erreur qui décrit la raison de l'échec de liaison.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithAttribute(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ParameterBindingAttribute)">
      <summary>Lie le paramètre comme s'il avait l'attribut donné sur la déclaration.</summary>
      <returns>Objet de liaison du paramètre HTTP.</returns>
      <param name="parameter">Paramètre pour lequel fournir une liaison.</param>
      <param name="attribute">Attribut qui décrit la liaison.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Lie le paramètre en analysant le contenu de corps HTTP.</summary>
      <returns>Objet de liaison du paramètre HTTP.</returns>
      <param name="parameter">Descripteur de paramètre décrivant le paramètre à lier.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Lie le paramètre en analysant le contenu de corps HTTP.</summary>
      <returns>Objet de liaison du paramètre HTTP.</returns>
      <param name="parameter">Descripteur de paramètre décrivant le paramètre à lier.</param>
      <param name="formatters">Liste des formateurs qui fournit la sélection d'un formateur approprié pour sérialiser le paramètre en objet.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Web.Http.Validation.IBodyModelValidator)">
      <summary>Lie le paramètre en analysant le contenu de corps HTTP.</summary>
      <returns>Objet de liaison du paramètre HTTP.</returns>
      <param name="parameter">Descripteur de paramètre décrivant le paramètre à lier.</param>
      <param name="formatters">Liste des formateurs qui fournit la sélection d'un formateur approprié pour sérialiser le paramètre en objet.</param>
      <param name="bodyModelValidator">Validateur de modèle de corps utilisé pour valider le paramètre.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor,System.Net.Http.Formatting.MediaTypeFormatter[])">
      <summary>Lie le paramètre en analysant le contenu de corps HTTP.</summary>
      <returns>Objet de liaison du paramètre HTTP.</returns>
      <param name="parameter">Descripteur de paramètre décrivant le paramètre à lier.</param>
      <param name="formatters">Liste des formateurs qui fournit la sélection d'un formateur approprié pour sérialiser le paramètre en objet.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Lie le paramètre en analysant la chaîne de requête.</summary>
      <returns>Objet de liaison du paramètre HTTP.</returns>
      <param name="parameter">Descripteur de paramètre décrivant le paramètre à lier.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})">
      <summary>Lie le paramètre en analysant la chaîne de requête.</summary>
      <returns>Objet de liaison du paramètre HTTP.</returns>
      <param name="parameter">Descripteur de paramètre décrivant le paramètre à lier.</param>
      <param name="valueProviderFactories">Fabriques de fournisseur de valeur qui fournissent des données de paramètres de chaîne de requête.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ModelBinding.IModelBinder)">
      <summary>Lie le paramètre en analysant la chaîne de requête.</summary>
      <returns>Objet de liaison du paramètre HTTP.</returns>
      <param name="parameter">Descripteur de paramètre décrivant le paramètre à lier.</param>
      <param name="binder">Classeur de modèles utilisé pour assembler le paramètre dans un objet.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ModelBinding.IModelBinder,System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})">
      <summary>Lie le paramètre en analysant la chaîne de requête.</summary>
      <returns>Objet de liaison du paramètre HTTP.</returns>
      <param name="parameter">Descripteur de paramètre décrivant le paramètre à lier.</param>
      <param name="binder">Classeur de modèles utilisé pour assembler le paramètre dans un objet.</param>
      <param name="valueProviderFactories">Fabriques de fournisseur de valeur qui fournissent des données de paramètres de chaîne de requête.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ValueProviders.ValueProviderFactory[])">
      <summary>Lie le paramètre en analysant la chaîne de requête.</summary>
      <returns>Objet de liaison du paramètre HTTP.</returns>
      <param name="parameter">Descripteur de paramètre décrivant le paramètre à lier.</param>
      <param name="valueProviderFactories">Fabriques de fournisseur de valeur qui fournissent des données de paramètres de chaîne de requête.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ReflectedHttpActionDescriptor">
      <summary>Représente une méthode d'action synchrone ou asynchrone reflétée.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.ReflectedHttpActionDescriptor" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.#ctor(System.Web.Http.Controllers.HttpControllerDescriptor,System.Reflection.MethodInfo)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.ReflectedHttpActionDescriptor" /> avec les détails relatifs à la méthode et au descripteur spécifiés.</summary>
      <param name="controllerDescriptor">Descripteur du contrôleur.</param>
      <param name="methodInfo">Informations relatives à la méthode d'action.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.ActionName">
      <summary>Obtient le nom de l'action.</summary>
      <returns>Nom de l'action.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.Equals(System.Object)"></member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
      <summary>Exécute l'action décrite et retourne une <see cref="T:System.Threading.Tasks.Task`1" /> qui, une fois terminée, contiendra la valeur de retour de l'action.</summary>
      <returns>Tâches [T:System.Threading.Tasks.Task`1"] qui, une fois terminée, contiendra la valeur de retour de l'action.</returns>
      <param name="controllerContext">Contexte.</param>
      <param name="arguments">Arguments.</param>
      <param name="cancellationToken">Jeton d'annulation pour annuler la demande.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.GetCustomAttributes``1(System.Boolean)">
      <summary>Retourne un tableau des attributs personnalisés définis pour ce membre, identifiés par type.</summary>
      <returns>Tableau d'attributs personnalisés ou tableau vide s'il n'existe aucun attribut personnalisé.</returns>
      <param name="inherit">true pour rechercher la chaîne d'héritage de cette action afin de trouver les attributs ; sinon, false.</param>
      <typeparam name="T">Type des attributs personnalisés.</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.GetFilters">
      <summary>Récupère les informations relatives aux filtres d'action.</summary>
      <returns>Informations relatives aux filtres.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.GetHashCode"></member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.GetParameters">
      <summary>Récupère les paramètres de la méthode d'action.</summary>
      <returns>Paramètres de la méthode d'action.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.MethodInfo">
      <summary>Obtient ou définit les informations relatives à la méthode d'action.</summary>
      <returns>Informations relatives à la méthode d'action.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.ReturnType">
      <summary>Obtient le type de retour de cette méthode.</summary>
      <returns>Type de retour de cette méthode.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.SupportedHttpMethods">
      <summary>Obtient ou définit les méthodes HTTP prises en charge.</summary>
      <returns>Méthodes HTTP prises en charge.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor">
      <summary>Représente le descripteur de paramètre HTTP reflété.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.#ctor(System.Web.Http.Controllers.HttpActionDescriptor,System.Reflection.ParameterInfo)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor" />.</summary>
      <param name="actionDescriptor">Descripteur de l'action.</param>
      <param name="parameterInfo">Informations du paramètre.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.DefaultValue">
      <summary>Obtient la valeur par défaut pour le paramètre.</summary>
      <returns>Valeur par défaut pour le paramètre.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.GetCustomAttributes``1">
      <summary>Récupère une collection des attributs personnalisés à partir du paramètre.</summary>
      <returns>Collection des attributs personnalisés à partir du paramètre.</returns>
      <typeparam name="TAttribute">Type des attributs personnalisés.</typeparam>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.IsOptional">
      <summary>Obtient une valeur qui indique si le paramètre est facultatif.</summary>
      <returns>true si le paramètre est facultatif ; sinon, false.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.ParameterInfo">
      <summary>Obtient ou définit les informations du paramètre.</summary>
      <returns>Informations du paramètre.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.ParameterName">
      <summary>Obtient le nom du paramètre.</summary>
      <returns>Nom du paramètre.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.ParameterType">
      <summary>Obtient le type du paramètre.</summary>
      <returns>Type du paramètre.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.ResponseMessageResultConverter">
      <summary>Représente un convertisseur pour les actions avec un type de retour de <see cref="T:System.Net.Http.HttpResponseMessage" />. </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ResponseMessageResultConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.ResponseMessageResultConverter" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ResponseMessageResultConverter.Convert(System.Web.Http.Controllers.HttpControllerContext,System.Object)">
      <summary>Convertit un objet <see cref="T:System.Web.Http.Controllers.ResponseMessageResultConverter" /> en un autre objet.</summary>
      <returns>Objet converti.</returns>
      <param name="controllerContext">Contexte du contrôleur.</param>
      <param name="actionResult">Résultat de l'action.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ServicesContainer">
      <summary>Classe abstraite qui fournit un conteneur pour les services utilisés par l'API Web ASP.NET.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.ServicesContainer" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Add(System.Type,System.Object)">
      <summary> Ajoute un service à la fin de la liste des services pour le type de service donné.  </summary>
      <param name="serviceType">Type de service.</param>
      <param name="service">Instance de service.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.AddRange(System.Type,System.Collections.Generic.IEnumerable{System.Object})">
      <summary> Ajoute les services de la collection spécifiée à la fin de la liste des services pour le type de service donné. </summary>
      <param name="serviceType">Type de service.</param>
      <param name="services">Services à ajouter.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Clear(System.Type)">
      <summary> Supprime toutes les instances de service du type de service donné.  </summary>
      <param name="serviceType">Type de service à effacer de la liste des services.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ClearMultiple(System.Type)">
      <summary>Supprime toutes les instances d'un type de service à plusieurs instances.</summary>
      <param name="serviceType">Type de service à supprimer.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ClearSingle(System.Type)">
      <summary>Supprime un type de service à instance unique.</summary>
      <param name="serviceType">Type de service à supprimer.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Dispose">
      <summary>Effectue des tâches définies par l'application associées à la libération, au lancement ou à la réinitialisation des ressources non managées.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.FindIndex(System.Type,System.Predicate{System.Object})">
      <summary> Recherche un service qui correspond aux conditions définies par le prédicat spécifié et retourne l'index de base zéro de la première occurrence. </summary>
      <returns>Index de base zéro de la première occurrence, si celle-ci est trouvée ; sinon, -1.</returns>
      <param name="serviceType">Type de service.</param>
      <param name="match">Délégué qui définit les conditions de l'élément à rechercher. </param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.GetService(System.Type)">
      <summary>Obtient une instance de service d'un type spécifié.</summary>
      <param name="serviceType">Type de service.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.GetServiceInstances(System.Type)">
      <summary>Obtient une liste mutable d'instances de service d'un type spécifié.</summary>
      <returns>Liste mutable d'instances de service.</returns>
      <param name="serviceType">Type de service.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.GetServices(System.Type)">
      <summary>Obtient une collection d'instances de service d'un type spécifié.</summary>
      <returns>Collection d'instances de service.</returns>
      <param name="serviceType">Type de service.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Insert(System.Type,System.Int32,System.Object)">
      <summary> Insère un service dans la collection à l'index spécifié. </summary>
      <param name="serviceType">Type de service.</param>
      <param name="index">Index de base zéro auquel le service doit être inséré.Si <see cref="F:System.Int32.MaxValue" /> est passé, garantit que l'élément est ajouté à la fin.</param>
      <param name="service">Service à insérer.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.InsertRange(System.Type,System.Int32,System.Collections.Generic.IEnumerable{System.Object})">
      <summary> Insère les éléments de la collection dans la liste des services à l'index spécifié. </summary>
      <param name="serviceType">Type de service.</param>
      <param name="index">Index de base zéro auquel les nouveaux éléments doivent être insérés.Si <see cref="F:System.Int32.MaxValue" /> est passé, garantit que les éléments sont ajoutés à la fin.</param>
      <param name="services">Collection de services à insérer.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.IsSingleService(System.Type)">
      <summary> Détermine si le type de service doit être récupéré avec GetService ou GetServices.  </summary>
      <returns>true si le service est unique. </returns>
      <param name="serviceType">type de service à interroger.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Remove(System.Type,System.Object)">
      <summary> Supprime la première occurrence du service donné de la liste des services pour le type de service donné. </summary>
      <returns>true si l'élément est correctement supprimé ; sinon, false.</returns>
      <param name="serviceType">Type de service.</param>
      <param name="service">Instance de service à supprimer.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.RemoveAll(System.Type,System.Predicate{System.Object})">
      <summary> Supprime tous les éléments qui correspondent aux conditions définies par le prédicat spécifié. </summary>
      <returns>Nombre d'éléments supprimés de la liste.</returns>
      <param name="serviceType">Type de service.</param>
      <param name="match">Délégué qui définit les conditions des éléments à supprimer.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.RemoveAt(System.Type,System.Int32)">
      <summary> Supprime le service à l'index spécifié. </summary>
      <param name="serviceType">Type de service.</param>
      <param name="index">Index de base zéro du service à supprimer.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Replace(System.Type,System.Object)">
      <summary>Remplace tous les services existants pour le type de service donné par l'instance de service spécifiée.Ceci fonctionne avec les services uniques et multiples.</summary>
      <param name="serviceType">Type de service.</param>
      <param name="service">Instance de service.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ReplaceMultiple(System.Type,System.Object)">
      <summary>Remplace toutes les instances d'un service à plusieurs instances par une nouvelle instance.</summary>
      <param name="serviceType">Type de service.</param>
      <param name="service">Instance de service qui remplace les services actuels de ce type.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ReplaceRange(System.Type,System.Collections.Generic.IEnumerable{System.Object})">
      <summary> Remplace tous les services existants pour le type de service donné par les instances de service spécifiées. </summary>
      <param name="serviceType">Type de service.</param>
      <param name="services">Instances de service.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ReplaceSingle(System.Type,System.Object)">
      <summary>Remplace un service à instance unique d'un type spécifié.</summary>
      <param name="serviceType">Type de service. </param>
      <param name="service">Instance de service.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ResetCache(System.Type)">
      <summary>Supprime les valeurs mises en cache pour un seul type de service.</summary>
      <param name="serviceType">Type de service.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ValueResultConverter`1">
      <summary> Convertisseur pour la création de réponses à partir d'actions retournant une valeur <paramref name="T" /> arbitraire. </summary>
      <typeparam name="T">Type de retour déclaré d'une action.</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.ValueResultConverter`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.ValueResultConverter`1" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ValueResultConverter`1.Convert(System.Web.Http.Controllers.HttpControllerContext,System.Object)">
      <summary>Convertit le résultat d'une action avec un type de retour arbitraire <paramref name="T" /> en une instance de <see cref="T:System.Net.Http.HttpResponseMessage" />.</summary>
      <returns>Objet <see cref="T:System.Net.Http.HttpResponseMessage" /> nouvellement créé.</returns>
      <param name="controllerContext">Contexte du contrôleur d'action.</param>
      <param name="actionResult">Résultat de l'exécution.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.VoidResultConverter">
      <summary>Représente un convertisseur pour la création d'une réponse à partir d'actions qui ne retournent pas de valeur.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.VoidResultConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Controllers.VoidResultConverter" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.VoidResultConverter.Convert(System.Web.Http.Controllers.HttpControllerContext,System.Object)">
      <summary>Convertit la réponse créée à partir d'actions qui ne retournent pas de valeur.</summary>
      <returns>Réponse convertie.</returns>
      <param name="controllerContext">Contexte du contrôleur.</param>
      <param name="actionResult">Résultat de l'action.</param>
    </member>
    <member name="T:System.Web.Http.Dependencies.IDependencyResolver">
      <summary>Représente un conteneur d'injection de dépendances.</summary>
    </member>
    <member name="M:System.Web.Http.Dependencies.IDependencyResolver.BeginScope">
      <summary> Démarre une portée de résolution. </summary>
      <returns>Portée de dépendance.</returns>
    </member>
    <member name="T:System.Web.Http.Dependencies.IDependencyScope">
      <summary>Représente une interface pour la plage de dépendances.</summary>
    </member>
    <member name="M:System.Web.Http.Dependencies.IDependencyScope.GetService(System.Type)">
      <summary>Récupère un service à partir de la portée.</summary>
      <returns>Service récupéré.</returns>
      <param name="serviceType">Le service à récupérer.</param>
    </member>
    <member name="M:System.Web.Http.Dependencies.IDependencyScope.GetServices(System.Type)">
      <summary>Récupère une collection de services à partir de la portée.</summary>
      <returns>Collection de services récupérés.</returns>
      <param name="serviceType">Collection de services à récupérer.</param>
    </member>
    <member name="T:System.Web.Http.Description.ApiDescription">
      <summary> Décrit une API définie par le chemin d'accès d'URI relatif et la méthode HTTP. </summary>
    </member>
    <member name="M:System.Web.Http.Description.ApiDescription.#ctor">
      <summary> Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Description.ApiDescription" />. </summary>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.ActionDescriptor">
      <summary> Obtient ou définit le descripteur d'action qui gèrera l'API. </summary>
      <returns> Descripteur de l'action. </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.Documentation">
      <summary> Obtient ou définit la documentation de l'API. </summary>
      <returns> Documentation. </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.HttpMethod">
      <summary> Obtient ou définit la méthode HTTP. </summary>
      <returns> Méthode HTTP. </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.ID">
      <summary>Obtient l'ID.L'ID est unique dans <see cref="T:System.Web.Http.HttpServer" />.</summary>
      <returns>ID.</returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.ParameterDescriptions">
      <summary> Obtient les descriptions de paramètre. </summary>
      <returns>Descriptions de paramètres.</returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.RelativePath">
      <summary> Obtient ou définit le chemin d'accès relatif. </summary>
      <returns> Chemin d'accès relatif. </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.ResponseDescription">
      <summary>Obtient ou définit la description de réponse.</summary>
      <returns>Description de réponse.</returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.Route">
      <summary> Obtient ou définit l'itinéraire enregistré pour l'API. </summary>
      <returns> Itinéraire. </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.SupportedRequestBodyFormatters">
      <summary> Obtient les formateurs de corps de demande pris en charge. </summary>
      <returns>Formateurs de corps de demande pris en charge.</returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.SupportedResponseFormatters">
      <summary> Obtient les formateurs de réponse pris en charge. </summary>
      <returns>Formateurs de réponse pris en charge.</returns>
    </member>
    <member name="T:System.Web.Http.Description.ApiExplorer">
      <summary> Explore l'espace d'URI du service en fonction des itinéraires, des contrôleurs et des actions disponibles dans le système. </summary>
    </member>
    <member name="M:System.Web.Http.Description.ApiExplorer.#ctor(System.Web.Http.HttpConfiguration)">
      <summary> Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Description.ApiExplorer" />. </summary>
      <param name="configuration">Configuration.</param>
    </member>
    <member name="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions">
      <summary> Obtient les descriptions d'API. Les descriptions sont initialisées lors du premier accès. </summary>
    </member>
    <member name="P:System.Web.Http.Description.ApiExplorer.DocumentationProvider">
      <summary> Obtient ou définit le fournisseur de la documentation. Le fournisseur sera responsable de la documentation de l'API. </summary>
      <returns> Fournisseur de la documentation. </returns>
    </member>
    <member name="M:System.Web.Http.Description.ApiExplorer.GetHttpMethodsSupportedByAction(System.Web.Http.Routing.IHttpRoute,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary> Obtient une collection de HttpMethods prises en charge par l'action. Appelé lors de l'initialisation des <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />. </summary>
      <returns>Collection des HttpMethods prises en charge par l'action.</returns>
      <param name="route">Itinéraire.</param>
      <param name="actionDescriptor">Descripteur de l'action.</param>
    </member>
    <member name="M:System.Web.Http.Description.ApiExplorer.ShouldExploreAction(System.String,System.Web.Http.Controllers.HttpActionDescriptor,System.Web.Http.Routing.IHttpRoute)">
      <summary> Détermine si l'action doit être prise en compte pour la génération des <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />. Appelé lors de l'initialisation des <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />. </summary>
      <returns>true si l'action doit être prise en compte pour la génération des <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" /> ; sinon, false.</returns>
      <param name="actionVariableValue">Valeur de variable d'action de l'itinéraire.</param>
      <param name="actionDescriptor">Descripteur de l'action.</param>
      <param name="route">Itinéraire.</param>
    </member>
    <member name="M:System.Web.Http.Description.ApiExplorer.ShouldExploreController(System.String,System.Web.Http.Controllers.HttpControllerDescriptor,System.Web.Http.Routing.IHttpRoute)">
      <summary> Détermine si le contrôleur doit être pris en compte pour la génération des <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />. Appelé lors de l'initialisation des <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />. </summary>
      <returns>true si le contrôleur doit être pris en compte pour la génération des <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" /> ; sinon, false.</returns>
      <param name="controllerVariableValue">Valeur de variable de contrôleur de l'itinéraire.</param>
      <param name="controllerDescriptor">Descripteur du contrôleur.</param>
      <param name="route">Itinéraire.</param>
    </member>
    <member name="T:System.Web.Http.Description.ApiExplorerSettingsAttribute">
      <summary> Cet attribut peut être utilisé sur les contrôleurs et les actions pour influencer le comportement du <see cref="T:System.Web.Http.Description.ApiExplorer" />. </summary>
    </member>
    <member name="M:System.Web.Http.Description.ApiExplorerSettingsAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Description.ApiExplorerSettingsAttribute" />.</summary>
    </member>
    <member name="P:System.Web.Http.Description.ApiExplorerSettingsAttribute.IgnoreApi">
      <summary> Obtient ou définit une valeur indiquant si l'action ou le contrôleur doit être exclu des instances <see cref="T:System.Web.Http.Description.ApiDescription" /> générées par <see cref="T:System.Web.Http.Description.ApiExplorer" />. </summary>
      <returns>true si l'action ou le contrôleur doit être ignoré ; sinon, false.</returns>
    </member>
    <member name="T:System.Web.Http.Description.ApiParameterDescription">
      <summary> Décrit un paramètre sur l'API définie par le chemin d'accès d'URI relatif et la méthode HTTP. </summary>
    </member>
    <member name="M:System.Web.Http.Description.ApiParameterDescription.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Description.ApiParameterDescription" />.</summary>
    </member>
    <member name="P:System.Web.Http.Description.ApiParameterDescription.Documentation">
      <summary> Obtient ou définit la documentation. </summary>
      <returns> Documentation. </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiParameterDescription.Name">
      <summary> Obtient ou définit le nom. </summary>
      <returns> Nom. </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiParameterDescription.ParameterDescriptor">
      <summary> Obtient ou définit le descripteur du paramètre. </summary>
      <returns> Descripteur du paramètre. </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiParameterDescription.Source">
      <summary> Obtient ou définit la source du paramètre. Il peut provenir de l'URI de la demande, du corps de la demande ou de d'autres emplacements. </summary>
      <returns> Source. </returns>
    </member>
    <member name="T:System.Web.Http.Description.ApiParameterSource">
      <summary> Décrit l'origine du paramètre. </summary>
    </member>
    <member name="F:System.Web.Http.Description.ApiParameterSource.FromBody">
      <summary>Le paramètre provient du corps.</summary>
    </member>
    <member name="F:System.Web.Http.Description.ApiParameterSource.FromUri">
      <summary>Le paramètre provient de l'URI.</summary>
    </member>
    <member name="F:System.Web.Http.Description.ApiParameterSource.Unknown">
      <summary>Emplacement inconnu.</summary>
    </member>
    <member name="T:System.Web.Http.Description.IApiExplorer">
      <summary> Définit l'interface pour l'obtention d'une collection de <see cref="T:System.Web.Http.Description.ApiDescription" />. </summary>
    </member>
    <member name="P:System.Web.Http.Description.IApiExplorer.ApiDescriptions">
      <summary> Obtient les descriptions d'API. </summary>
    </member>
    <member name="T:System.Web.Http.Description.IDocumentationProvider">
      <summary> Définit le fournisseur responsable de la documentation du service. </summary>
    </member>
    <member name="M:System.Web.Http.Description.IDocumentationProvider.GetDocumentation(System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary> Obtient la documentation en fonction du <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" />. </summary>
      <returns>Documentation du contrôleur.</returns>
      <param name="actionDescriptor">Descripteur de l'action.</param>
    </member>
    <member name="M:System.Web.Http.Description.IDocumentationProvider.GetDocumentation(System.Web.Http.Controllers.HttpControllerDescriptor)"></member>
    <member name="M:System.Web.Http.Description.IDocumentationProvider.GetDocumentation(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary> Obtient la documentation en fonction du <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />. </summary>
      <returns>Documentation du contrôleur.</returns>
      <param name="parameterDescriptor">Descripteur du paramètre.</param>
    </member>
    <member name="M:System.Web.Http.Description.IDocumentationProvider.GetResponseDocumentation(System.Web.Http.Controllers.HttpActionDescriptor)"></member>
    <member name="T:System.Web.Http.Description.ResponseDescription">
      <summary>Décrit la réponse de l'API.</summary>
    </member>
    <member name="M:System.Web.Http.Description.ResponseDescription.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Description.ResponseDescription" />.</summary>
    </member>
    <member name="P:System.Web.Http.Description.ResponseDescription.DeclaredType">
      <summary>Obtient ou définit le type de réponse déclarée.</summary>
      <returns>Type de réponse déclarée.</returns>
    </member>
    <member name="P:System.Web.Http.Description.ResponseDescription.Documentation">
      <summary>Obtient ou définit la documentation de la réponse.</summary>
      <returns>Documentation de la réponse.</returns>
    </member>
    <member name="P:System.Web.Http.Description.ResponseDescription.ResponseType">
      <summary>Obtient ou définit le type de réponse réelle.</summary>
      <returns>Type de réponse réelle.</returns>
    </member>
    <member name="T:System.Web.Http.Description.ResponseTypeAttribute">
      <summary>Permet de spécifier le type d'entité retournée par une action quand le type de retour déclaré est <see cref="T:System.Net.Http.HttpResponseMessage" /> ou <see cref="T:System.Web.Http.IHttpActionResult" />.Le <see cref="P:System.Web.Http.Description.ResponseTypeAttribute.ResponseType" /> est lu par l'<see cref="T:System.Web.Http.Description.ApiExplorer" /> lors de la génération de <see cref="T:System.Web.Http.Description.ApiDescription" />.</summary>
    </member>
    <member name="M:System.Web.Http.Description.ResponseTypeAttribute.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Description.ResponseTypeAttribute" />.</summary>
      <param name="responseType">Type de réponse.</param>
    </member>
    <member name="P:System.Web.Http.Description.ResponseTypeAttribute.ResponseType">
      <summary>Obtient le type de réponse.</summary>
    </member>
    <member name="T:System.Web.Http.Dispatcher.DefaultAssembliesResolver">
      <summary> Fournit une implémentation de <see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver" /> sans dépendance externe. </summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultAssembliesResolver.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Dispatcher.DefaultAssembliesResolver" />.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultAssembliesResolver.GetAssemblies">
      <summary> Retourne la liste des assemblys disponibles pour l'application. </summary>
      <returns>&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt; d'assemblys.</returns>
    </member>
    <member name="T:System.Web.Http.Dispatcher.DefaultHttpControllerActivator">
      <summary>Représente l'implémentation par défaut d'un <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" />. Une implémentation différente peut être enregistrée par le biais du <see cref="T:System.Web.Http.Services.DependencyResolver" />. Optimisation pour les situations où il existe une instance <see cref="T:System.Web.Http.Controllers.ApiControllerActionInvoker" /> par <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />, mais les situations où il existe de nombreuses instances <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> pour un seul <see cref="T:System.Web.Http.Controllers.ApiControllerActionInvoker" /> sont également prises en charge. Dans le dernier cas, la recherche est légèrement ralentie car elle transite via le dictionnaire <see cref="P:HttpControllerDescriptor.Properties" />. </summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerActivator.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Dispatcher.DefaultHttpControllerActivator" />.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerActivator.Create(System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpControllerDescriptor,System.Type)">
      <summary> Crée le <see cref="T:System.Web.Http.Controllers.IHttpController" /> spécifié par <paramref name="controllerType" /> à l'aide du <paramref name="request" /> donné.</summary>
      <returns>Instance de <paramref name="controllerType" /> du type.</returns>
      <param name="request">Message de la demande.</param>
      <param name="controllerDescriptor">Descripteur du contrôleur.</param>
      <param name="controllerType">Type du contrôleur.</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.DefaultHttpControllerSelector">
      <summary>Représente une instance <see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector" /> par défaut pour le choix d'un <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> par rapport à un <see cref="T:System.Net.Http.HttpRequestMessage" /> donné. Une implémentation différente peut être enregistrée par le biais du <see cref="P:System.Web.Http.HttpConfiguration.Services" />. </summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.#ctor(System.Web.Http.HttpConfiguration)">
      <summary> Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Dispatcher.DefaultHttpControllerSelector" />.</summary>
      <param name="configuration">Configuration.</param>
    </member>
    <member name="F:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.ControllerSuffix">
      <summary>Spécifie la chaîne de suffixe dans le nom du contrôleur.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.GetControllerMapping">
      <summary>Retourne un mappage, indexé par chaîne de contrôleur, de tous les <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> que le sélecteur peut sélectionner. </summary>
      <returns>Mappage de l'ensemble des <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> que le sélecteur peut sélectionner, ou valeur null si celui-ci ne dispose pas d'un mappage bien défini de <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />.</returns>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.GetControllerName(System.Net.Http.HttpRequestMessage)">
      <summary>Obtient le nom du contrôleur pour le <see cref="T:System.Net.Http.HttpRequestMessage" /> spécifié.</summary>
      <returns>Nom du contrôleur pour le <see cref="T:System.Net.Http.HttpRequestMessage" /> spécifié.</returns>
      <param name="request">Message de la requête HTTP.</param>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.SelectController(System.Net.Http.HttpRequestMessage)">
      <summary>Sélectionne un <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> pour le <see cref="T:System.Net.Http.HttpRequestMessage" /> donné.</summary>
      <returns>Instance <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> du <see cref="T:System.Net.Http.HttpRequestMessage" /> spécifié.</returns>
      <param name="request">Message de la requête HTTP.</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver">
      <summary> Fournit une implémentation de <see cref="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver" /> sans dépendance externe. </summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver" />.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.#ctor(System.Predicate{System.Type})">
      <summary>Lance une instance <see cref="T:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver" /> à l'aide d'un prédicat pour filtrer les types de contrôleurs. </summary>
      <param name="predicate">Prédicat.</param>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.GetControllerTypes(System.Web.Http.Dispatcher.IAssembliesResolver)">
      <summary> Retourne la liste des contrôleurs disponibles pour l'application. </summary>
      <returns>Une &lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt; de contrôleurs.</returns>
      <param name="assembliesResolver">Programme de résolution des assemblys.</param>
    </member>
    <member name="P:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.IsControllerTypePredicate">
      <summary>Obtient une valeur si le type de programme de résolution est un prédicat de type du contrôleur.</summary>
      <returns>true si le type de programme de résolution est un prédicat de type du contrôleur ; sinon, false.</returns>
    </member>
    <member name="T:System.Web.Http.Dispatcher.HttpControllerDispatcher">
      <summary>Répartit un <see cref="T:System.Net.Http.HttpRequestMessage" /> entrant vers une implémentation <see cref="T:System.Web.Http.Controllers.IHttpController" /> à des fins de traitement.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.HttpControllerDispatcher.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Dispatcher.HttpControllerDispatcher" /> avec la configuration spécifiée.</summary>
      <param name="configuration">Configuration HTTP.</param>
    </member>
    <member name="P:System.Web.Http.Dispatcher.HttpControllerDispatcher.Configuration">
      <summary>Obtient la configuration HTTP.</summary>
      <returns>Configuration HTTP.</returns>
    </member>
    <member name="M:System.Web.Http.Dispatcher.HttpControllerDispatcher.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Répartit un <see cref="T:System.Net.Http.HttpRequestMessage" /> entrant vers un <see cref="T:System.Web.Http.Controllers.IHttpController" />.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" /> représentant l'opération en cours.</returns>
      <param name="request">Demande à répartir</param>
      <param name="cancellationToken">Jeton d'annulation.</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.HttpRoutingDispatcher">
      <summary> Cette classe correspond au gestionnaire de messages de point de terminaison par défaut qui examine l'<see cref="T:System.Web.Http.Routing.IHttpRoute" /> de l'itinéraire correspondant et choisit le gestionnaire de messages à appeler. Si <see cref="P:System.Web.Http.Routing.IHttpRoute.Handler" /> a la valeur null, il délègue à <see cref="T:System.Web.Http.Dispatcher.HttpControllerDispatcher" />. </summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.HttpRoutingDispatcher.#ctor(System.Web.Http.HttpConfiguration)">
      <summary> Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Dispatcher.HttpRoutingDispatcher" /> à l'aide des <see cref="T:System.Web.Http.HttpConfiguration" /> et <see cref="T:System.Web.Http.Dispatcher.HttpControllerDispatcher" /> fournis en tant que gestionnaire par défaut. </summary>
      <param name="configuration">Configuration du serveur.</param>
    </member>
    <member name="M:System.Web.Http.Dispatcher.HttpRoutingDispatcher.#ctor(System.Web.Http.HttpConfiguration,System.Net.Http.HttpMessageHandler)">
      <summary> Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Dispatcher.HttpRoutingDispatcher" /> à l'aide des <see cref="T:System.Web.Http.HttpConfiguration" /> et <see cref="T:System.Net.Http.HttpMessageHandler" /> fournis. </summary>
      <param name="configuration">Configuration du serveur.</param>
      <param name="defaultHandler">Gestionnaire par défaut à utiliser lorsque <see cref="T:System.Web.Http.Routing.IHttpRoute" /> n'a aucun <see cref="P:System.Web.Http.Routing.IHttpRoute.Handler" />.</param>
    </member>
    <member name="M:System.Web.Http.Dispatcher.HttpRoutingDispatcher.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Envoie une requête HTTP en tant qu'opération asynchrone.</summary>
      <returns>Objet de tâche représentant l'opération asynchrone.</returns>
      <param name="request">Message de requête HTTP à envoyer.</param>
      <param name="cancellationToken">Jeton d'annulation pour annuler l'opération.</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.IAssembliesResolver">
      <summary>Fournit une abstraction pour la gestion des assemblys d'une application.Une implémentation différente peut être enregistrée par le biais du <see cref="T:System.Web.Http.Services.DependencyResolver" />.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.IAssembliesResolver.GetAssemblies">
      <summary> Retourne la liste des assemblys disponibles pour l'application. </summary>
      <returns>Une &lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt; d'assemblys.</returns>
    </member>
    <member name="T:System.Web.Http.Dispatcher.IHttpControllerActivator">
      <summary>Définit les méthodes requises pour un <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" />.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.IHttpControllerActivator.Create(System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpControllerDescriptor,System.Type)">
      <summary>Crée un objet <see cref="T:System.Web.Http.Controllers.IHttpController" />.</summary>
      <returns>Objet <see cref="T:System.Web.Http.Controllers.IHttpController" />.</returns>
      <param name="request">Message de la demande.</param>
      <param name="controllerDescriptor">Descripteur du contrôleur HTTP.</param>
      <param name="controllerType">Type du contrôleur.</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.IHttpControllerSelector">
      <summary> Définit les méthodes requises pour une fabrique <see cref="T:System.Web.Http.Controllers.IHttpController" />. </summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.IHttpControllerSelector.GetControllerMapping">
      <summary>Retourne un mappage, indexé par chaîne de contrôleur, de tous les <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> que le sélecteur peut sélectionner.Cette option est principalement appelée par <see cref="T:System.Web.Http.Description.IApiExplorer" /> pour découvrir tous les contrôleurs possibles dans le système.</summary>
      <returns>Mappage de l'ensemble des <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> que le sélecteur peut sélectionner, ou valeur null si celui-ci ne dispose pas d'un mappage bien défini de <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />.</returns>
    </member>
    <member name="M:System.Web.Http.Dispatcher.IHttpControllerSelector.SelectController(System.Net.Http.HttpRequestMessage)">
      <summary> Sélectionne un <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> pour le <see cref="T:System.Net.Http.HttpRequestMessage" /> donné. </summary>
      <returns>Instance <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />.</returns>
      <param name="request">Message de requête.</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver">
      <summary> Fournit une abstraction pour la gestion des types de contrôleurs d'une application. Une implémentation différente peut être enregistrée par le biais du programme DependencyResolver.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.IHttpControllerTypeResolver.GetControllerTypes(System.Web.Http.Dispatcher.IAssembliesResolver)">
      <summary> Retourne la liste des contrôleurs disponibles pour l'application. </summary>
      <returns>Une &lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt; de contrôleurs.</returns>
      <param name="assembliesResolver">Programme de résolution des assemblys ayant échoué.</param>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks">
      <summary>Fournit les blocs catch utilisés dans cet assembly.</summary>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpBatchHandler">
      <summary>Obtient le bloc catch dans System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpBatchHandler.SendAsync.</summary>
      <returns>Bloc catch dans System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpBatchHandler.SendAsync.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpControllerDispatcher">
      <summary>Obtient le bloc catch dans System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpControllerDispatcher.SendAsync.</summary>
      <returns>Bloc catch dans System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpControllerDispatcher.SendAsync.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpServer">
      <summary>Obtient le bloc catch dans System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpServer.SendAsync.</summary>
      <returns>Bloc catch dans System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpServer.SendAsync.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.IExceptionFilter">
      <summary>Obtient le bloc catch dans System.Web.Http.ApiController.ExecuteAsync lors de l'utilisation de <see cref="P:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.IExceptionFilter" />.</summary>
      <returns>Bloc catch dans System.Web.Http.ApiController.ExecuteAsync lors de l'utilisation de <see cref="P:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.IExceptionFilter" />.</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionContext">
      <summary>Représente une exception et les données contextuelles qui lui étaient associées lors de son interception.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionContext.#ctor(System.Exception,System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ExceptionHandling.ExceptionContext" />.</summary>
      <param name="exception">Exception interceptée.</param>
      <param name="catchBlock">Bloc catch où l'exception a été interceptée.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionContext.#ctor(System.Exception,System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock,System.Net.Http.HttpRequestMessage)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ExceptionHandling.ExceptionContext" />.</summary>
      <param name="exception">Exception interceptée.</param>
      <param name="catchBlock">Bloc catch où l'exception a été interceptée.</param>
      <param name="request">La requête qui était en cours de traitement lorsque l'exception a été interceptée.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionContext.#ctor(System.Exception,System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ExceptionHandling.ExceptionContext" />.</summary>
      <param name="exception">Exception interceptée.</param>
      <param name="catchBlock">Bloc catch où l'exception a été interceptée.</param>
      <param name="request">La requête qui était en cours de traitement lorsque l'exception a été interceptée.</param>
      <param name="response">La requête retournée lorsque l'exception a été interceptée.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionContext.#ctor(System.Exception,System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock,System.Web.Http.Controllers.HttpActionContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ExceptionHandling.ExceptionContext" />.</summary>
      <param name="exception">Exception interceptée.</param>
      <param name="catchBlock">Bloc catch où l'exception a été interceptée.</param>
      <param name="actionContext">Le contexte de l'action dans lequel l'exception s'est produite.</param>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.ActionContext">
      <summary>Obtient le contexte de l'action dans lequel l'exception s'est produite, le cas échéant.</summary>
      <returns>Contexte de l'action dans lequel l'exception s'est produite, le cas échéant.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.CatchBlock">
      <summary>Obtient le bloc catch dans lequel l'exception a été interceptée.</summary>
      <returns>Le bloc catch dans lequel l'exception a été interceptée.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.ControllerContext">
      <summary>Obtient le contexte du contrôleur dans lequel l'exception s'est produite, le cas échéant.</summary>
      <returns>Contexte du contrôleur dans lequel l'exception s'est produite, le cas échéant.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.Exception">
      <summary>Obtient l'exception interceptée.</summary>
      <returns>Exception interceptée.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.Request">
      <summary>Obtient la requête qui était en cours de traitement lorsque l'exception a été interceptée.</summary>
      <returns>La requête qui était en cours de traitement lorsque l'exception a été interceptée.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.RequestContext">
      <summary>Obtient le contexte de la requête dans lequel l'exception s'est produite.</summary>
      <returns>Le contexte de la requête dans lequel l'exception s'est produite.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.Response">
      <summary>Obtient la réponse envoyée lorsque l'exception a été interceptée.</summary>
      <returns>Réponse envoyée lorsque l'exception a été interceptée.</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock">
      <summary>Représente l'emplacement du bloc catch pour un contexte de l'exception.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock.#ctor(System.String,System.Boolean,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock" />.</summary>
      <param name="name">L'étiquette du bloc catch où l'exception a été interceptée.</param>
      <param name="isTopLevel">Valeur indiquant si le bloc catch où l'exception a été interceptée est le dernier avant l'hôte.</param>
      <param name="callsHandler">Valeur indiquant si les exceptions du bloc catch peuvent être gérées une fois qu'elles ont été consignées.</param>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock.CallsHandler">
      <summary>Obtient une valeur indiquant si les exceptions du bloc catch peuvent être gérées une fois qu'elles ont été consignées.</summary>
      <returns>Valeur indiquant si les exceptions du bloc catch peuvent être gérées une fois qu'elles ont été consignées.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock.IsTopLevel">
      <summary>Obtient une valeur indiquant si le bloc catch où l'exception a été interceptée est le dernier avant l'hôte.</summary>
      <returns>Valeur indiquant si le bloc catch où l'exception a été interceptée est le dernier avant l'hôte.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock.Name">
      <summary>Obtient une étiquette pour le bloc catch dans lequel l'exception a été interceptée.</summary>
      <returns>Étiquette pour le bloc catch dans lequel l'exception a été interceptée.</returns>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock.ToString">
      <returns>Retourne <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionHandler">
      <summary>Représente un gestionnaire d'exceptions non gérées.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandler.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ExceptionHandling.ExceptionHandler" />.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandler.Handle(System.Web.Http.ExceptionHandling.ExceptionHandlerContext)">
      <summary>En cas de substitution dans une classe dérivée, gère l'exception en mode synchrone.</summary>
      <param name="context">Contexte du gestionnaire des exceptions.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandler.HandleAsync(System.Web.Http.ExceptionHandling.ExceptionHandlerContext,System.Threading.CancellationToken)">
      <summary>En cas de substitution dans une classe dérivée, gère l'exception en mode asynchrone.</summary>
      <returns>Tâche représentant l'opération asynchrone de gestion de l'exception.</returns>
      <param name="context">Contexte du gestionnaire des exceptions.</param>
      <param name="cancellationToken">Jeton permettant de surveiller les demandes d'annulation.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandler.ShouldHandle(System.Web.Http.ExceptionHandling.ExceptionHandlerContext)">
      <summary>Détermine si l'exception doit être gérée.</summary>
      <returns>true si l'exception doit être gérée ; sinon, false.</returns>
      <param name="context">Contexte du gestionnaire des exceptions.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandler.System#Web#Http#ExceptionHandling#IExceptionHandler#HandleAsync(System.Web.Http.ExceptionHandling.ExceptionHandlerContext,System.Threading.CancellationToken)">
      <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionHandlerContext">
      <summary>Représente le contexte dans lequel se déroule la gestion des exceptions non gérées.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.#ctor(System.Web.Http.ExceptionHandling.ExceptionContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ExceptionHandling.ExceptionHandlerContext" />.</summary>
      <param name="exceptionContext">Contexte des exceptions.</param>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.CatchBlock">
      <summary>Obtient le bloc catch dans lequel l'exception a été interceptée.</summary>
      <returns>Le bloc catch dans lequel l'exception a été interceptée.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.Exception">
      <summary>Obtient l'exception interceptée.</summary>
      <returns>Exception interceptée.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.ExceptionContext">
      <summary>Obtient le contexte de l'exception fournissant l'exception et les données qui lui sont associées.</summary>
      <returns>Le contexte de l'exception fournissant l'exception et les données qui lui sont associées.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.Request">
      <summary>Obtient la requête qui était en cours de traitement lorsque l'exception a été interceptée.</summary>
      <returns>La requête qui était en cours de traitement lorsque l'exception a été interceptée.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.RequestContext">
      <summary>Obtient le contexte de la requête dans lequel l'exception s'est produite.</summary>
      <returns>Le contexte de la requête dans lequel l'exception s'est produite.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.Result">
      <summary>Obtient ou définit le résultat fournissant le message de la réponse quand l'exception est gérée.</summary>
      <returns>Le résultat fournissant le message de la réponse quand l'exception est gérée.</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionHandlerExtensions">
      <summary>Fournit les méthodes d'extension de <see cref="T:System.Web.Http.ExceptionHandling.IExceptionHandler" />.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandlerExtensions.HandleAsync(System.Web.Http.ExceptionHandling.IExceptionHandler,System.Web.Http.ExceptionHandling.ExceptionContext,System.Threading.CancellationToken)">
      <summary>Appelle un gestionnaire d'exceptions et détermine la réponse qui la gère, le cas échéant.</summary>
      <returns>Tâche qui, une fois terminée, contient le message de réponse à retourner quand l'exception est gérée, ou valeur null quand l'exception reste non gérée.</returns>
      <param name="handler">Gestionnaire des exceptions non gérées.</param>
      <param name="context">Contexte des exceptions.</param>
      <param name="cancellationToken">Jeton permettant de surveiller les demandes d'annulation.</param>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionLogger">
      <summary>Représente un enregistreur d'exceptions non gérées.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLogger.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ExceptionHandling.ExceptionLogger" />.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLogger.Log(System.Web.Http.ExceptionHandling.ExceptionLoggerContext)">
      <summary>En cas de substitution dans une classe dérivée, enregistre l'exception en mode synchrone.</summary>
      <param name="context">Contexte de l'enregistreur des exceptions.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLogger.LogAsync(System.Web.Http.ExceptionHandling.ExceptionLoggerContext,System.Threading.CancellationToken)">
      <summary>En cas de substitution dans une classe dérivée, enregistre l'exception en mode asynchrone.</summary>
      <returns>Tâche représentant l'opération asynchrone d'enregistrement de l'exception.</returns>
      <param name="context">Contexte de l'enregistreur des exceptions.</param>
      <param name="cancellationToken">Jeton permettant de surveiller les demandes d'annulation.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLogger.ShouldLog(System.Web.Http.ExceptionHandling.ExceptionLoggerContext)">
      <summary>Détermine si l'exception doit être enregistrée.</summary>
      <returns>true si l'exception doit être enregistrée ; sinon, false.</returns>
      <param name="context">Contexte de l'enregistreur des exceptions.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLogger.System#Web#Http#ExceptionHandling#IExceptionLogger#LogAsync(System.Web.Http.ExceptionHandling.ExceptionLoggerContext,System.Threading.CancellationToken)">
      <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionLoggerContext">
      <summary>Représente le contexte dans lequel se déroule l'enregistrement des exceptions non gérées.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.#ctor(System.Web.Http.ExceptionHandling.ExceptionContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ExceptionHandling.ExceptionLoggerContext" />.</summary>
      <param name="exceptionContext">Contexte des exceptions.</param>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.CallsHandler">
      <summary>Obtient ou définit une valeur indiquant si l'exception peut par la suite être gérée par un <see cref="T:System.Web.Http.ExceptionHandling.IExceptionHandler" /> pour produire un nouveau message de réponse.</summary>
      <returns>Valeur indiquant si l'exception peut par la suite être gérée par un <see cref="T:System.Web.Http.ExceptionHandling.IExceptionHandler" /> pour produire un nouveau message de réponse.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.CatchBlock">
      <summary>Obtient le bloc catch dans lequel l'exception a été interceptée.</summary>
      <returns>Le bloc catch dans lequel l'exception a été interceptée.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.Exception">
      <summary>Obtient l'exception interceptée.</summary>
      <returns>Exception interceptée.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.ExceptionContext">
      <summary>Obtient le contexte de l'exception fournissant l'exception et les données qui lui sont associées.</summary>
      <returns>Le contexte de l'exception fournissant l'exception et les données qui lui sont associées.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.Request">
      <summary>Obtient la requête qui était en cours de traitement lorsque l'exception a été interceptée.</summary>
      <returns>La requête qui était en cours de traitement lorsque l'exception a été interceptée.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.RequestContext">
      <summary>Obtient le contexte de la requête dans lequel l'exception s'est produite.</summary>
      <returns>Le contexte de la requête dans lequel l'exception s'est produite.</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionLoggerExtensions">
      <summary>Fournit les méthodes d'extension de <see cref="T:System.Web.Http.ExceptionHandling.IExceptionLogger" />.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLoggerExtensions.LogAsync(System.Web.Http.ExceptionHandling.IExceptionLogger,System.Web.Http.ExceptionHandling.ExceptionContext,System.Threading.CancellationToken)">
      <summary>Appelle un enregistreur d'exceptions.</summary>
      <returns>Tâche représentant l'opération asynchrone d'enregistrement de l'exception.</returns>
      <param name="logger">Enregistreur des exceptions non gérées.</param>
      <param name="context">Contexte des exceptions.</param>
      <param name="cancellationToken">Jeton permettant de surveiller les demandes d'annulation.</param>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionServices">
      <summary>Crée des services d'exceptions pour appeler l'enregistrement et la gestion à partir des blocs catch.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionServices.GetHandler(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Obtient un gestionnaire d'exceptions qui appelle le service de gestionnaire inscrit, le cas échéant, et fait en sorte que les exceptions ne se propagent pas par accident vers l'hôte.</summary>
      <returns>Gestionnaire d'exceptions qui appelle un éventuel gestionnaire inscrit et fait en sorte que les exceptions ne se propagent pas par accident vers l'hôte.</returns>
      <param name="services">Conteneur des services.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionServices.GetHandler(System.Web.Http.HttpConfiguration)">
      <summary>Obtient un gestionnaire d'exceptions qui appelle le service de gestionnaire inscrit, le cas échéant, et fait en sorte que les exceptions ne se propagent pas par accident vers l'hôte.</summary>
      <returns>Gestionnaire d'exceptions qui appelle un éventuel gestionnaire inscrit et fait en sorte que les exceptions ne se propagent pas par accident vers l'hôte.</returns>
      <param name="configuration">Configuration.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionServices.GetLogger(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Obtient un enregistreur d'exceptions qui appelle tous les services d'enregistreur inscrit.</summary>
      <returns>Un enregistreur composite.</returns>
      <param name="services">Conteneur des services.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionServices.GetLogger(System.Web.Http.HttpConfiguration)">
      <summary>Obtient un enregistreur d'exceptions qui appelle tous les services d'enregistreur inscrit.</summary>
      <returns>Un enregistreur composite.</returns>
      <param name="configuration">Configuration.</param>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.IExceptionHandler">
      <summary>Définit un gestionnaire des exceptions non gérées.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.IExceptionHandler.HandleAsync(System.Web.Http.ExceptionHandling.ExceptionHandlerContext,System.Threading.CancellationToken)">
      <summary>Traiter une exception non gérée en l'autorisant à se propager ou la gérer en fournissant un message de réponse à retourner.</summary>
      <returns>Tâche représentant l'opération asynchrone de gestion de l'exception.</returns>
      <param name="context">Contexte du gestionnaire des exceptions.</param>
      <param name="cancellationToken">Jeton permettant de surveiller les demandes d'annulation.</param>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.IExceptionLogger">
      <summary>Définit un enregistreur d'exceptions non gérées.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.IExceptionLogger.LogAsync(System.Web.Http.ExceptionHandling.ExceptionLoggerContext,System.Threading.CancellationToken)">
      <summary>Enregistre une exception non gérée.</summary>
      <returns>Tâche représentant l'opération asynchrone d'enregistrement de l'exception.</returns>
      <param name="context">Contexte de l'enregistreur des exceptions.</param>
      <param name="cancellationToken">Jeton permettant de surveiller les demandes d'annulation.</param>
    </member>
    <member name="T:System.Web.Http.Filters.ActionDescriptorFilterProvider">
      <summary>Fournit des informations sur une méthode d'action, par exemple son nom, son contrôleur, ses paramètres, ses attributs et ses filtres.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ActionDescriptorFilterProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Filters.ActionDescriptorFilterProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ActionDescriptorFilterProvider.GetFilters(System.Web.Http.HttpConfiguration,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>Retourne les filtres associés à cette méthode d'action.</summary>
      <returns>Filtres associés à cette méthode d'action.</returns>
      <param name="configuration">Configuration.</param>
      <param name="actionDescriptor">Descripteur de l'action.</param>
    </member>
    <member name="T:System.Web.Http.Filters.ActionFilterAttribute">
      <summary>Représente la classe de base pour tous les attributs de filtre d'action.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Filters.ActionFilterAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.OnActionExecuted(System.Web.Http.Filters.HttpActionExecutedContext)">
      <summary>Se produit après l'appel de la méthode d'action.</summary>
      <param name="actionExecutedContext">Contexte de l'action exécutée.</param>
    </member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.OnActionExecutedAsync(System.Web.Http.Filters.HttpActionExecutedContext,System.Threading.CancellationToken)"></member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.OnActionExecuting(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Se produit avant l'appel de la méthode d'action.</summary>
      <param name="actionContext">Contexte de l'action.</param>
    </member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.OnActionExecutingAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)"></member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.System#Web#Http#Filters#IActionFilter#ExecuteActionFilterAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken,System.Func{System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})">
      <summary>Exécute l'action du filtre de façon asynchrone.</summary>
      <returns>Tâche récemment créée pour cette opération.</returns>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="cancellationToken">Jeton d'annulation attribué pour cette tâche.</param>
      <param name="continuation">Fonction déléguée à poursuivre après l'appel de la méthode d'action.</param>
    </member>
    <member name="T:System.Web.Http.Filters.AuthorizationFilterAttribute">
      <summary>Fournit des détails sur le filtre d'autorisation.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.AuthorizationFilterAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Filters.AuthorizationFilterAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.AuthorizationFilterAttribute.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Appelle lorsqu'un processus demande une autorisation.</summary>
      <param name="actionContext">Contexte de l'action, qui encapsule les informations relatives à l'utilisation de <see cref="T:System.Web.Http.Filters.AuthorizationFilterAttribute" />.</param>
    </member>
    <member name="M:System.Web.Http.Filters.AuthorizationFilterAttribute.OnAuthorizationAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)"></member>
    <member name="M:System.Web.Http.Filters.AuthorizationFilterAttribute.System#Web#Http#Filters#IAuthorizationFilter#ExecuteAuthorizationFilterAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken,System.Func{System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})">
      <summary>Exécute le filtre d'autorisation lors de la synchronisation.</summary>
      <returns>Filtre d'autorisation pendant la synchronisation.</returns>
      <param name="actionContext">Contexte de l'action, qui encapsule les informations relatives à l'utilisation de <see cref="T:System.Web.Http.Filters.AuthorizationFilterAttribute" />.</param>
      <param name="cancellationToken">Jeton d'annulation qui annule l'opération.</param>
      <param name="continuation">Suite de l'opération.</param>
    </member>
    <member name="T:System.Web.Http.Filters.ConfigurationFilterProvider">
      <summary>Représente le fournisseur de filtre de configuration.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ConfigurationFilterProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Filters.ConfigurationFilterProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ConfigurationFilterProvider.GetFilters(System.Web.Http.HttpConfiguration,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>Retourne les filtres associés à cette méthode de configuration.</summary>
      <returns>Filtres associés à cette méthode de configuration.</returns>
      <param name="configuration">Configuration.</param>
      <param name="actionDescriptor">Descripteur de l'action.</param>
    </member>
    <member name="T:System.Web.Http.Filters.ExceptionFilterAttribute">
      <summary>Représente les attributs du filtre d'exception.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ExceptionFilterAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Filters.ExceptionFilterAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ExceptionFilterAttribute.OnException(System.Web.Http.Filters.HttpActionExecutedContext)">
      <summary>Lève l'événement d'exception.</summary>
      <param name="actionExecutedContext">Contexte de l'action.</param>
    </member>
    <member name="M:System.Web.Http.Filters.ExceptionFilterAttribute.OnExceptionAsync(System.Web.Http.Filters.HttpActionExecutedContext,System.Threading.CancellationToken)"></member>
    <member name="M:System.Web.Http.Filters.ExceptionFilterAttribute.System#Web#Http#Filters#IExceptionFilter#ExecuteExceptionFilterAsync(System.Web.Http.Filters.HttpActionExecutedContext,System.Threading.CancellationToken)">
      <summary>Exécute le filtre d'exception de façon asynchrone.</summary>
      <returns>Résultat de l'exécution.</returns>
      <param name="actionExecutedContext">Contexte de l'action.</param>
      <param name="cancellationToken">Contexte d'annulation.</param>
    </member>
    <member name="T:System.Web.Http.Filters.FilterAttribute">
      <summary>Représente la classe de base pour les attributs de filtre d'action.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.FilterAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Filters.FilterAttribute" />.</summary>
    </member>
    <member name="P:System.Web.Http.Filters.FilterAttribute.AllowMultiple">
      <summary>Obtient une valeur qui indique si plusieurs filtres sont autorisés.</summary>
      <returns>true si plusieurs filtres sont autorisés ; sinon, false.</returns>
    </member>
    <member name="T:System.Web.Http.Filters.FilterInfo">
      <summary>Fournit des informations sur les filtres d'action disponibles.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.FilterInfo.#ctor(System.Web.Http.Filters.IFilter,System.Web.Http.Filters.FilterScope)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Filters.FilterInfo" />.</summary>
      <param name="instance">Instance de cette classe.</param>
      <param name="scope">Portée de cette classe.</param>
    </member>
    <member name="P:System.Web.Http.Filters.FilterInfo.Instance">
      <summary>Obtient ou définit une instance du <see cref="T:System.Web.Http.Filters.FilterInfo" />.</summary>
      <returns>
        <see cref="T:System.Web.Http.Filters.FilterInfo" />.</returns>
    </member>
    <member name="P:System.Web.Http.Filters.FilterInfo.Scope">
      <summary>Obtient ou définit <see cref="T:System.Web.Http.Filters.FilterInfo" /> de la portée.</summary>
      <returns>Portée du FilterInfo.</returns>
    </member>
    <member name="T:System.Web.Http.Filters.FilterScope">
      <summary>Définit des valeurs qui spécifient l'ordre dans lequel les filtres sont exécutés dans le même type de filtre et ordre de filtre.</summary>
    </member>
    <member name="F:System.Web.Http.Filters.FilterScope.Action">
      <summary>Spécifie un ordre après Controller. </summary>
    </member>
    <member name="F:System.Web.Http.Filters.FilterScope.Controller">
      <summary>Spécifie un ordre avant Action et après Global.</summary>
    </member>
    <member name="F:System.Web.Http.Filters.FilterScope.Global">
      <summary>Spécifie une action avant Controller.</summary>
    </member>
    <member name="T:System.Web.Http.Filters.HttpActionExecutedContext">
      <summary>Représente l'action du contexte exécuté HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpActionExecutedContext.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Filters.HttpActionExecutedContext" />.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpActionExecutedContext.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Filters.HttpActionExecutedContext" />.</summary>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="exception">Exception.</param>
    </member>
    <member name="P:System.Web.Http.Filters.HttpActionExecutedContext.ActionContext">
      <summary>Obtient ou définit le contexte de l'action HTTP.</summary>
      <returns>Contexte de l'action HTTP.</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpActionExecutedContext.Exception">
      <summary>Obtient ou définit l'exception levée au cours de l'exécution.</summary>
      <returns>Exception levée au cours de l'exécution.</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpActionExecutedContext.Request">
      <summary>Obtient l'objet <see cref="T:System.Net.Http.HttpRequestMessage" /> pour le contexte.</summary>
      <returns>Objet <see cref="T:System.Net.Http.HttpRequestMessage" /> pour le contexte.</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpActionExecutedContext.Response">
      <summary>Obtient ou définit le <see cref="T:System.Net.Http.HttpResponseMessage" /> pour le contexte.</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpResponseMessage" /> pour le contexte.</returns>
    </member>
    <member name="T:System.Web.Http.Filters.HttpAuthenticationChallengeContext">
      <summary>Représente un contexte de challenge d'authentification contenant des informations pour l'exécution du challenge d'authentification.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpAuthenticationChallengeContext.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.IHttpActionResult)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Filters.HttpAuthenticationChallengeContext" />.</summary>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="result">Résultat de l'action actuelle.</param>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationChallengeContext.ActionContext">
      <summary>Obtient le contexte de l'action.</summary>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationChallengeContext.Request">
      <summary>Obtient le message de la requête.</summary>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationChallengeContext.Result">
      <summary>Obtient ou définit le résultat de l'action à exécuter.</summary>
    </member>
    <member name="T:System.Web.Http.Filters.HttpAuthenticationContext">
      <summary>Représente un contexte d'authentification contenant des informations pour l'exécution de l'authentification.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpAuthenticationContext.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Security.Principal.IPrincipal)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Filters.HttpAuthenticationContext" />.</summary>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="principal">Principal actuel.</param>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationContext.ActionContext">
      <summary>Obtient le contexte de l'action.</summary>
      <returns>Contexte de l'action.</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationContext.ErrorResult">
      <summary>Obtient ou définit un résultat d'action qui produira une réponse d'erreur (si l'authentification a échoué ; sinon, null).</summary>
      <returns>Résultat d'action qui produira une réponse d'erreur.</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationContext.Principal">
      <summary>Obtient ou définit le principal authentifié.</summary>
      <returns>Principal authentifié.</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationContext.Request">
      <summary>Obtient le message de la requête.</summary>
      <returns>Message de requête.</returns>
    </member>
    <member name="T:System.Web.Http.Filters.HttpFilterCollection">
      <summary>Représente une collection de filtres HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Filters.HttpFilterCollection" />.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.Add(System.Web.Http.Filters.IFilter)">
      <summary>Ajoute un élément à la fin de la collection.</summary>
      <param name="filter">Élément à ajouter à la collection.</param>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.AddRange(System.Collections.Generic.IEnumerable{System.Web.Http.Filters.IFilter})"></member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.Clear">
      <summary>Supprime tous les éléments de la collection.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.Contains(System.Web.Http.Filters.IFilter)">
      <summary>Détermine si la collection contient l'élément spécifié.</summary>
      <returns>true si la collection contient l'élément spécifié ; sinon, false.</returns>
      <param name="filter">Élément à vérifier.</param>
    </member>
    <member name="P:System.Web.Http.Filters.HttpFilterCollection.Count">
      <summary>Obtient le nombre d'éléments de la collection.</summary>
      <returns>Nombre d'éléments de la collection.</returns>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.GetEnumerator">
      <summary>Obtient un énumérateur qui itère au sein de la collection.</summary>
      <returns>Objet d'énumération qui peut être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.Remove(System.Web.Http.Filters.IFilter)">
      <summary>Supprime l'élément spécifié de la collection.</summary>
      <param name="filter">Élément à supprimer de la collection.</param>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Obtient un énumérateur qui itère au sein de la collection.</summary>
      <returns>Objet d'énumération qui peut être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="T:System.Web.Http.Filters.IActionFilter">
      <summary>Définit les méthodes utilisées dans un filtre d'action.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.IActionFilter.ExecuteActionFilterAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken,System.Func{System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})">
      <summary>Exécute l'action du filtre de façon asynchrone.</summary>
      <returns>Tâche récemment créée pour cette opération.</returns>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="cancellationToken">Jeton d'annulation attribué pour cette tâche.</param>
      <param name="continuation">Fonction déléguée à poursuivre après l'appel de la méthode d'action.</param>
    </member>
    <member name="T:System.Web.Http.Filters.IAuthenticationFilter">
      <summary>Définit un filtre qui effectue l'authentification.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.IAuthenticationFilter.AuthenticateAsync(System.Web.Http.Filters.HttpAuthenticationContext,System.Threading.CancellationToken)">
      <summary>Authentifie la requête.</summary>
      <returns>Tâche qui exécute l'authentification.</returns>
      <param name="context">Contexte d'authentification.</param>
      <param name="cancellationToken">Jeton permettant de surveiller les demandes d'annulation.</param>
    </member>
    <member name="M:System.Web.Http.Filters.IAuthenticationFilter.ChallengeAsync(System.Web.Http.Filters.HttpAuthenticationChallengeContext,System.Threading.CancellationToken)"></member>
    <member name="T:System.Web.Http.Filters.IAuthorizationFilter">
      <summary>Définit les méthodes requises pour un filtre d'autorisation.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.IAuthorizationFilter.ExecuteAuthorizationFilterAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken,System.Func{System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})">
      <summary>Exécute le filtre d'autorisation à synchroniser.</summary>
      <returns>Filtre d'autorisation à synchroniser.</returns>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="cancellationToken">Jeton d'annulation associé au filtre.</param>
      <param name="continuation">Suite.</param>
    </member>
    <member name="T:System.Web.Http.Filters.IExceptionFilter">
      <summary>Définit les méthodes requises pour un filtre d'exception.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.IExceptionFilter.ExecuteExceptionFilterAsync(System.Web.Http.Filters.HttpActionExecutedContext,System.Threading.CancellationToken)">
      <summary>Exécute un filtre d'action asynchrone.</summary>
      <returns>Filtre d'exception asynchrone.</returns>
      <param name="actionExecutedContext">Contexte de l'action exécutée.</param>
      <param name="cancellationToken">Jeton d'annulation.</param>
    </member>
    <member name="T:System.Web.Http.Filters.IFilter">
      <summary>Définit les méthodes utilisées dans un filtre.</summary>
    </member>
    <member name="P:System.Web.Http.Filters.IFilter.AllowMultiple">
      <summary>Obtient ou définit une valeur qui indique s'il est possible de spécifier plusieurs instances de l'attribut indiqué pour un seul élément du programme.</summary>
      <returns>true s'il est possible de spécifier plusieurs instances ; sinon, false.La valeur par défaut est false.</returns>
    </member>
    <member name="T:System.Web.Http.Filters.IFilterProvider">
      <summary>Fournit des informations relatives aux filtres.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.IFilterProvider.GetFilters(System.Web.Http.HttpConfiguration,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>Retourne une énumération de filtres.</summary>
      <returns>Énumération de filtres.</returns>
      <param name="configuration">Configuration HTTP.</param>
      <param name="actionDescriptor">Descripteur de l'action.</param>
    </member>
    <member name="T:System.Web.Http.Filters.IOverrideFilter"></member>
    <member name="P:System.Web.Http.Filters.IOverrideFilter.FiltersToOverride"></member>
    <member name="T:System.Web.Http.Hosting.HttpPropertyKeys">
      <summary> Fournit des clés communes pour les propriétés stockées dans les <see cref="P:System.Net.Http.HttpRequestMessage.Properties" />.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.ClientCertificateKey">
      <summary>Fournit une clé pour le certificat client de cette requête.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.DependencyScope">
      <summary>Fournit une clé pour les <see cref="T:System.Web.Http.Dependencies.IDependencyScope" /> associées à cette demande.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.DisposableRequestResourcesKey">
      <summary>Fournit une clé pour la collection de ressources qui doit être supprimée lorsqu'une demande est supprimée.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.HttpActionDescriptorKey">
      <summary> Fournit une clé pour les <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" /> associées à cette demande. </summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.HttpConfigurationKey">
      <summary>Fournit une clé pour les <see cref="T:System.Web.Http.HttpConfiguration" /> associées à cette demande.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.HttpRouteDataKey">
      <summary>Fournit une clé pour les <see cref="T:System.Web.Http.Routing.IHttpRouteData" /> associées à cette demande.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.IncludeErrorDetailKey">
      <summary>Fournit une clé qui indique si les détails de l'erreur doivent être inclus dans la réponse à cette requête HTTP.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.IsBatchRequest">
      <summary> Fournit une clé qui indique si la requête est une requête de lots. </summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.IsLocalKey">
      <summary>Fournit une clé qui indique si la requête provient d'une adresse locale.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.NoRouteMatched">
      <summary> Fournit une clé qui indique si la requête ne correspondait pas à un itinéraire. </summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.RequestContextKey">
      <summary>Fournit une clé pour le <see cref="T:System.Web.Http.Controllers.HttpRequestContext" /> de cette requête.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.RequestCorrelationKey">
      <summary>Fournit une clé pour le <see cref="T:System.Guid" /> stocké dans <see cref="T:System.Net.Http.Properties" />.Il s'agit de l'ID de corrélation pour cette demande.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.RequestQueryNameValuePairsKey">
      <summary>Fournit une clé pour la chaîne de requête analysée stockée dans <see cref="T:System.Net.Http.Properties" />.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.RetrieveClientCertificateDelegateKey">
      <summary>Fournit une clé pour un délégué qui peut récupérer le certificat client de cette requête.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.SynchronizationContextKey">
      <summary>Fournit une clé pour le <see cref="T:System.Threading.SynchronizationContext" /> actuel stocké dans Properties().Si Current() a la valeur null, aucun contexte n'est stocké.</summary>
    </member>
    <member name="T:System.Web.Http.Hosting.IHostBufferPolicySelector">
      <summary> Interface de contrôle de l'utilisation des demandes et des réponses mises en mémoire tampon sur l'hôte. Si un hôte fournit un support aux demandes et/ou réponses mise en mémoire tampon, il peut alors utiliser cette interface pour définir la politique d'utilisation de la mise en mémoire tampon.</summary>
    </member>
    <member name="M:System.Web.Http.Hosting.IHostBufferPolicySelector.UseBufferedInputStream(System.Object)">
      <summary>Détermine si l'hôte doit mettre en mémoire tampon le corps de l'entité <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>true si la mise en mémoire tampon doit être utilisée ; sinon la demande doit être diffusée en continu.</returns>
      <param name="hostContext">Contexte de l'hôte.</param>
    </member>
    <member name="M:System.Web.Http.Hosting.IHostBufferPolicySelector.UseBufferedOutputStream(System.Net.Http.HttpResponseMessage)">
      <summary>Détermine si l'hôte doit mettre en mémoire tampon le corps de l'entité <see cref="T.System.Net.Http.HttpResponseMessage" />.</summary>
      <returns>true si la mise en mémoire tampon doit être utilisée ; sinon la réponse doit être diffusée en continu.</returns>
      <param name="response">Message de réponse HTTP.</param>
    </member>
    <member name="T:System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler">
      <summary>Représente un gestionnaire de messages qui supprime les résultats d'authentification de l'hôte.</summary>
    </member>
    <member name="M:System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler" />.</summary>
    </member>
    <member name="M:System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Envoie de manière asynchrone un message de requête.</summary>
      <returns>Tâche qui exécute l'opération asynchrone.</returns>
      <param name="request">Message de requête à envoyer.</param>
      <param name="cancellationToken">Jeton d'annulation.</param>
    </member>
    <member name="T:System.Web.Http.Metadata.ModelMetadata">
      <summary>Représente la classe de métadonnées du ModelMetadata.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadata.#ctor(System.Web.Http.Metadata.ModelMetadataProvider,System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Metadata.ModelMetadata" />.</summary>
      <param name="provider">Fournisseur.</param>
      <param name="containerType">Type du conteneur.</param>
      <param name="modelAccessor">Accesseur modèle.</param>
      <param name="modelType">Type du modèle.</param>
      <param name="propertyName">Nom de la propriété.</param>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.AdditionalValues">
      <summary>Obtient un dictionnaire qui contient des métadonnées supplémentaires relatives au modèle.</summary>
      <returns>Dictionnaire qui contient des métadonnées supplémentaires relatives au modèle.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.ContainerType">
      <summary>Obtient ou définit le type du conteneur du modèle.</summary>
      <returns>Type du conteneur du modèle.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.ConvertEmptyStringToNull">
      <summary>Obtient ou définit une valeur qui indique si les chaînes vides publiées dans les formulaires doivent être converties en valeur null.</summary>
      <returns>true si les chaînes vides publiées dans les formulaires doivent être converties en valeurs null ; sinon, false.La valeur par défaut est true.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.Description">
      <summary>Obtient ou définit la description du modèle.</summary>
      <returns>Description du modèle.La valeur par défaut est null.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadata.GetDisplayName">
      <summary>Obtient le nom complet du modèle.</summary>
      <returns>Nom complet du modèle.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadata.GetValidators(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Obtient une liste de validateurs pour le modèle.</summary>
      <returns>Liste de validateurs du modèle.</returns>
      <param name="validatorProviders">Fournisseurs de validateurs du modèle.</param>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.IsComplexType">
      <summary>Obtient ou définit une valeur qui indique si le modèle est un type complexe.</summary>
      <returns>Valeur qui indique si le modèle est considéré comme un type complexe.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.IsNullableValueType">
      <summary>Obtient une valeur qui indique si le type est Nullable.</summary>
      <returns>true si le type est Nullable ; sinon, false.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.IsReadOnly">
      <summary>Obtient ou définit une valeur qui indique si le modèle est en lecture seule.</summary>
      <returns>true si le modèle est en lecture seule ; sinon, false.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.Model">
      <summary>Obtient la valeur du modèle.</summary>
      <returns>Cette valeur de modèle peut être null.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.ModelType">
      <summary>Obtient le type du modèle.</summary>
      <returns>Type du modèle.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.Properties">
      <summary>Obtient une collection d'objets de métadonnées de modèle qui décrivent les propriétés du modèle.</summary>
      <returns>Collection d'objets de métadonnées de modèle qui décrivent les propriétés du modèle.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.PropertyName">
      <summary>Obtient le nom de la propriété.</summary>
      <returns>Nom de propriété.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.Provider">
      <summary>Obtient ou définit le fournisseur.</summary>
      <returns>Fournisseur.</returns>
    </member>
    <member name="T:System.Web.Http.Metadata.ModelMetadataProvider">
      <summary>Fournit une classe de base abstraite pour un fournisseur de métadonnées personnalisé.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadataProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadataProvider.GetMetadataForProperties(System.Object,System.Type)">
      <summary>Obtient un objet ModelMetadata pour chaque propriété d'un modèle.</summary>
      <returns>Objet ModelMetadata correspondant à chaque propriété d'un modèle.</returns>
      <param name="container">Conteneur.</param>
      <param name="containerType">Type du conteneur.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadataProvider.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
      <summary>Obtient une métadonnée de la propriété spécifiée.</summary>
      <returns>Modèle de métadonnées de la propriété spécifiée.</returns>
      <param name="modelAccessor">Accesseur modèle.</param>
      <param name="containerType">Type du conteneur.</param>
      <param name="propertyName">Propriété pour laquelle obtenir le modèle de métadonnées.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadataProvider.GetMetadataForType(System.Func{System.Object},System.Type)">
      <summary>Obtient les métadonnées pour l'accesseur modèle et le type de modèle spécifiés.</summary>
      <returns>Métadonnées.</returns>
      <param name="modelAccessor">Accesseur modèle.</param>
      <param name="modelType">Type du mode.</param>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1">
      <summary>Fournit une classe abstraite pour implémenter un fournisseur de métadonnées.</summary>
      <typeparam name="TModelMetadata">Type de métadonnées de modèle.</typeparam>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1" />.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.CreateMetadataFromPrototype(`0,System.Func{System.Object})">
      <summary>En cas de substitution dans une classe dérivée, crée les métadonnées de modèle pour la propriété à l'aide du prototype spécifié.</summary>
      <returns>Métadonnées de modèle de la propriété.</returns>
      <param name="prototype">Prototype à partir duquel créer les métadonnées de modèle.</param>
      <param name="modelAccessor">Accesseur modèle.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.CreateMetadataPrototype(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Type,System.String)">
      <summary>En cas de substitution dans une classe dérivée, crée les métadonnées de modèle pour la propriété.</summary>
      <returns>Métadonnées de modèle de la propriété.</returns>
      <param name="attributes">Ensemble d'attributs.</param>
      <param name="containerType">Type du conteneur.</param>
      <param name="modelType">Type du modèle.</param>
      <param name="propertyName">Nom de la propriété.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.GetMetadataForProperties(System.Object,System.Type)">
      <summary>Récupère une liste de propriétés pour le modèle.</summary>
      <returns>Liste de propriétés du modèle.</returns>
      <param name="container">Conteneur de modèle.</param>
      <param name="containerType">Type du conteneur.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
      <summary>Récupère les métadonnées de la propriété spécifiée à l'aide du type de conteneur et du nom de propriété.</summary>
      <returns>Métadonnées de la propriété spécifiée.</returns>
      <param name="modelAccessor">Accesseur modèle.</param>
      <param name="containerType">Type du conteneur.</param>
      <param name="propertyName">Nom de la propriété.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.GetMetadataForType(System.Func{System.Object},System.Type)">
      <summary>Retourne les métadonnées pour la propriété spécifiée à l'aide du type du modèle.</summary>
      <returns>Métadonnées de la propriété spécifiée.</returns>
      <param name="modelAccessor">Accesseur modèle.</param>
      <param name="modelType">Type du conteneur.</param>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes">
      <summary>Fournit les données du cache du prototype pour <see cref="T:System.Web.Http.Metadata.Providers.CachedModelMetadata`1" />.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.#ctor(System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes" />.</summary>
      <param name="attributes">Attributs fournissant les données de l'initialisation.</param>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.Display">
      <summary>Obtient ou définit l'attribut d'affichage des métadonnées.</summary>
      <returns>Attribut d'affichage des métadonnées.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.DisplayFormat">
      <summary>Obtient ou définit l'attribut de format d'affichage des métadonnées.</summary>
      <returns>Attribut de format d'affichage des métadonnées.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.DisplayName"></member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.Editable">
      <summary>Obtient ou définit l'attribut modifiable des métadonnées.</summary>
      <returns>Attribut modifiable des métadonnées.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.ReadOnly">
      <summary>Obtient ou définit l'attribut de lecture seule des métadonnées.</summary>
      <returns>Attribut de lecture seule des métadonnées.</returns>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata">
      <summary>Fournit un conteneur pour les métadonnées communes, la classe <see cref="T:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider" /> et un modèle de données.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.#ctor(System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata,System.Func{System.Object})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata" />.</summary>
      <param name="prototype">Prototype utilisé pour initialiser les métadonnées de modèle.</param>
      <param name="modelAccessor">Accesseur modèle.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.#ctor(System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider,System.Type,System.Type,System.String,System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata" />.</summary>
      <param name="provider">Fournisseur de métadonnées.</param>
      <param name="containerType">Type du conteneur.</param>
      <param name="modelType">Type du modèle.</param>
      <param name="propertyName">Nom de la propriété.</param>
      <param name="attributes">Attributs fournissant les données de l'initialisation.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.ComputeConvertEmptyStringToNull">
      <summary>Récupère une valeur qui indique si les chaînes vides publiées dans les formulaires doivent être converties en valeurs null.</summary>
      <returns>true si les chaînes vides publiées dans les formulaires doivent être converties en valeurs null ; sinon, false.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.ComputeDescription">
      <summary>Récupère la description du modèle.</summary>
      <returns>Description du modèle.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.ComputeIsReadOnly">
      <summary>Récupère une valeur qui indique si le modèle est en lecture seule.</summary>
      <returns>true si le modèle est en lecture seule ; sinon, false.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.GetDisplayName"></member>
    <member name="T:System.Web.Http.Metadata.Providers.CachedModelMetadata`1">
      <summary>Fournit les données du cache du prototype pour <see cref="T:System.Web.Http.Metadata.Providers.CachedModelMetadata`1" />.</summary>
      <typeparam name="TPrototypeCache">Type de cache du prototype.</typeparam>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.#ctor(System.Web.Http.Metadata.Providers.CachedModelMetadata{`0},System.Func{System.Object})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Metadata.Providers.CachedModelMetadata`1" />.</summary>
      <param name="prototype">Prototype.</param>
      <param name="modelAccessor">Accesseur modèle.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.#ctor(System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider,System.Type,System.Type,System.String,`0)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Metadata.Providers.CachedModelMetadata`1" />.</summary>
      <param name="provider">Fournisseur.</param>
      <param name="containerType">Type de conteneur.</param>
      <param name="modelType">Type du modèle.</param>
      <param name="propertyName">Nom de la propriété.</param>
      <param name="prototypeCache">Cache du prototype.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.ComputeConvertEmptyStringToNull">
      <summary>Indique si les chaînes vides publiées dans les formulaires doivent être calculées et converties en valeurs null.</summary>
      <returns>true si les chaînes vides publiées dans les formulaires doivent être calculées et converties en valeurs null ; sinon, false.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.ComputeDescription">
      <summary>Indique la valeur de calcul.</summary>
      <returns>Valeur de calcul.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.ComputeIsComplexType">
      <summary>Obtient une valeur qui indique si le modèle est un type complexe.</summary>
      <returns>Valeur qui indique si le modèle est considéré comme un type complexe par l'infrastructure de l'API Web.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.ComputeIsReadOnly">
      <summary>Obtient une valeur qui indique si le modèle à calculer est en lecture seule.</summary>
      <returns>true si le modèle à calculer est en lecture seule ; sinon, false.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.ConvertEmptyStringToNull">
      <summary>Obtient ou définit une valeur qui indique si les chaînes vides publiées dans les formulaires doivent être converties en valeur null.</summary>
      <returns>true si les chaînes vides publiées dans les formulaires doivent être converties en valeurs null ; sinon, false.La valeur par défaut est true.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.Description">
      <summary>Obtient ou définit la description du modèle.</summary>
      <returns>Description du modèle.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.IsComplexType">
      <summary>Obtient une valeur qui indique si le modèle est un type complexe.</summary>
      <returns>Valeur qui indique si le modèle est considéré comme un type complexe par l'infrastructure de l'API Web.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.IsReadOnly">
      <summary>Obtient ou définit une valeur qui indique si le modèle est en lecture seule.</summary>
      <returns>true si le modèle est en lecture seule ; sinon, false.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.PrototypeCache">
      <summary>Obtient ou définit une valeur indiquant si le cache du prototype est en cours de mise à jour.</summary>
      <returns>true si le cache du prototype est en cours de mise à jour ; sinon, false.</returns>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider">
      <summary>Implémente le fournisseur de métadonnées de modèle par défaut.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider.CreateMetadataFromPrototype(System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata,System.Func{System.Object})">
      <summary>Crée les métadonnées à partir du prototype pour la propriété spécifiée.</summary>
      <returns>Métadonnées de la propriété.</returns>
      <param name="prototype">Prototype.</param>
      <param name="modelAccessor">Accesseur modèle.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider.CreateMetadataPrototype(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Type,System.String)">
      <summary>Crée les métadonnées pour la propriété spécifiée.</summary>
      <returns>Métadonnées de la propriété.</returns>
      <param name="attributes">Attributs.</param>
      <param name="containerType">Type du conteneur.</param>
      <param name="modelType">Type du modèle.</param>
      <param name="propertyName">Nom de la propriété.</param>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider">
      <summary>Représente un fournisseur de métadonnées d'un modèle vide.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider.CreateMetadataFromPrototype(System.Web.Http.Metadata.ModelMetadata,System.Func{System.Object})">
      <summary>Crée des métadonnées à partir du prototype.</summary>
      <returns>Métadonnées.</returns>
      <param name="prototype">Prototype de métadonnées du modèle.</param>
      <param name="modelAccessor">Accesseur modèle.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider.CreateMetadataPrototype(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Type,System.String)">
      <summary>Crée un prototype du fournisseur de métadonnées du <see cref="T:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider" />.</summary>
      <returns>Prototype du fournisseur de métadonnées.</returns>
      <param name="attributes">Attributs.</param>
      <param name="containerType">Type de conteneur.</param>
      <param name="modelType">Type de modèle.</param>
      <param name="propertyName">Nom de la propriété.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.CancellationTokenParameterBinding">
      <summary>Représente la liaison directe au jeton d'annulation</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.CancellationTokenParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.CancellationTokenParameterBinding" />.</summary>
      <param name="descriptor">Descripteur de la liaison.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.CancellationTokenParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Exécute la liaison au cours de la synchronisation.</summary>
      <returns>Liaison au cours de la synchronisation.</returns>
      <param name="metadataProvider">Fournisseur de métadonnées.</param>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="cancellationToken">Notification après annulation des opérations.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.CustomModelBinderAttribute">
      <summary>Représente un attribut qui appelle un classeur de modèles personnalisé.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.CustomModelBinderAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.CustomModelBinderAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.CustomModelBinderAttribute.GetBinder">
      <summary>Récupère le classeur de modèles associé.</summary>
      <returns>Référence à un objet qui implémente l'interface <see cref="T:System.Web.Http.ModelBinding.IModelBinder" />.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.DefaultActionValueBinder">
      <summary>Représente la valeur de l'action par défaut du classeur.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.DefaultActionValueBinder.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.DefaultActionValueBinder" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.DefaultActionValueBinder.GetBinding(System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>Implémentation par défaut de l'interface <see cref="T:System.Web.Http.Controllers.IActionValueBinder" />.Cette interface est le point d'entrée principal pour la liaison des paramètres d'action.</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.HttpActionBinding" /> associé au <see cref="T:System.Web.Http.ModelBinding.DefaultActionValueBinder" />.</returns>
      <param name="actionDescriptor">Descripteur de l'action.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.DefaultActionValueBinder.GetParameterBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Obtient la <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" /> associée à la <see cref="T:System.Web.Http.ModelBinding.DefaultActionValueBinder" />.</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" /> associé au <see cref="T:System.Web.Http.ModelBinding.DefaultActionValueBinder" />.</returns>
      <param name="parameter">Descripteur du paramètre.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ErrorParameterBinding">
      <summary>Définit une erreur de liaison.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ErrorParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.ErrorParameterBinding" />.</summary>
      <param name="descriptor">Descripteur d'erreur.</param>
      <param name="message">Message.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ErrorParameterBinding.ErrorMessage">
      <summary>Obtient le message d'erreur.</summary>
      <returns>Message d'erreur.</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ErrorParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Exécute la méthode de liaison lors de la synchronisation.</summary>
      <param name="metadataProvider">Fournisseur de métadonnées.</param>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="cancellationToken">Valeur du jeton d'annulation.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.FormatterParameterBinding">
      <summary>Représente la liaison de paramètre qui lira à partir du corps et appellera les formateurs.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormatterParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Web.Http.Validation.IBodyModelValidator)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding" />.</summary>
      <param name="descriptor">Descripteur.</param>
      <param name="formatters">Formateur.</param>
      <param name="bodyModelValidator">Validateur de modèle de corps.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.FormatterParameterBinding.BodyModelValidator">
      <summary>Obtient ou définit une interface pour le validateur de modèle de corps.</summary>
      <returns>Interface pour le validateur de modèles du corps.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.FormatterParameterBinding.ErrorMessage">
      <summary>Obtient le message d'erreur.</summary>
      <returns>Message d'erreur.</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormatterParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Exécute de façon asynchrone la liaison de <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding" />.</summary>
      <returns>Résultat de l'action.</returns>
      <param name="metadataProvider">Fournisseur de métadonnées.</param>
      <param name="actionContext">Contexte associé à l'action.</param>
      <param name="cancellationToken">Jeton d'annulation.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.FormatterParameterBinding.Formatters">
      <summary>Obtient ou définit un objet énumérable représentant le formateur de la liaison du paramètre.</summary>
      <returns>Objet énumérable représentant le formateur de la liaison du paramètre.</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormatterParameterBinding.ReadContentAsync(System.Net.Http.HttpRequestMessage,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Lit de façon asynchrone le contenu de <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding" />.</summary>
      <returns>Résultat de l'action.</returns>
      <param name="request">Demande.</param>
      <param name="type">Type.</param>
      <param name="formatters">Formateur.</param>
      <param name="formatterLogger">Enregistreur de formats.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormatterParameterBinding.ReadContentAsync(System.Net.Http.HttpRequestMessage,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger,System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.ModelBinding.FormatterParameterBinding.WillReadBody">
      <summary>Obtient si la <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding" /> lira le corps.</summary>
      <returns>True si la <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding" /> lira le corps ; sinon, false.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.FormDataCollectionExtensions">
      <summary>Représente les extensions de la collection des données de formulaire.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection)">
      <summary>Lit les extensions de collection avec le type spécifié.</summary>
      <returns>Extensions de collection lues.</returns>
      <param name="formData">Données de formulaire.</param>
      <typeparam name="T">Type générique.</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection,System.String,System.Net.Http.Formatting.IRequiredMemberSelector,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Lit les extensions de collection avec le type spécifié.</summary>
      <returns>Extensions de collection.</returns>
      <param name="formData">Données de formulaire.</param>
      <param name="modelName">Nom du modèle.</param>
      <param name="requiredMemberSelector">Sélecteur de membre requis.</param>
      <param name="formatterLogger">Enregistreur de formateurs.</param>
      <typeparam name="T">Type générique.</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection,System.String,System.Web.Http.Controllers.HttpActionContext)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type)">
      <summary>Lit les extensions de collection avec le type spécifié.</summary>
      <returns>Extensions de collection avec le type spécifié.</returns>
      <param name="formData">Données de formulaire.</param>
      <param name="type">Type de l'objet.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.String,System.Net.Http.Formatting.IRequiredMemberSelector,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Lit les extensions de collection avec le type et le nom de modèle spécifiés</summary>
      <returns>Extensions de collection.</returns>
      <param name="formData">Données de formulaire.</param>
      <param name="type">Type de l'objet.</param>
      <param name="modelName">Nom du modèle.</param>
      <param name="requiredMemberSelector">Sélecteur de membre requis.</param>
      <param name="formatterLogger">Enregistreur de formateurs.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.String,System.Net.Http.Formatting.IRequiredMemberSelector,System.Net.Http.Formatting.IFormatterLogger,System.Web.Http.HttpConfiguration)">
      <summary>Désérialise les données de formulaire vers le type donné, à l'aide de la liaison de modèle.</summary>
      <returns>meilleure tentative pour lier l'objet.La meilleure tentative peut avoir la valeur null.</returns>
      <param name="formData">collection avec les données d'URL de formulaire analysées</param>
      <param name="type">type cible à lire en tant que</param>
      <param name="modelName">null ou vide pour lire le formulaire entier en tant qu'objet unique.Il s'agit d'une utilisation courante pour les données du corps.Ou le nom d'un modèle pour réaliser une liaison partielle par rapport aux données de formulaire.Il s'agit d'une utilisation courante pour l'extraction de champs individuels.</param>
      <param name="requiredMemberSelector">Le <see cref="T:System.Net.Http.Formatting.IRequiredMemberSelector" /> utilisé pour déterminer les membres obligatoires.</param>
      <param name="formatterLogger">
        <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> dans lequel journaliser les événements.</param>
      <param name="config">La configuration <see cref="T:System.Web.Http.HttpConfiguration" /> à partir de laquelle sélectionner le classeur.Peut être null si la configuration n'a pas déjà été créée.Dans ce cas, une nouvelle configuration est créée.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.String,System.Web.Http.Controllers.HttpActionContext)"></member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.Web.Http.Controllers.HttpActionContext)"></member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection,System.Web.Http.Controllers.HttpActionContext)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:System.Web.Http.ModelBinding.HttpBindingBehavior">
      <summary>Énumère le comportement de la liaison HTTP.</summary>
    </member>
    <member name="F:System.Web.Http.ModelBinding.HttpBindingBehavior.Never">
      <summary>Ne jamais utiliser de liaison HTTP.</summary>
    </member>
    <member name="F:System.Web.Http.ModelBinding.HttpBindingBehavior.Optional">
      <summary>Comportement de la liaison facultative</summary>
    </member>
    <member name="F:System.Web.Http.ModelBinding.HttpBindingBehavior.Required">
      <summary>Une liaison HTTP est requise.</summary>
    </member>
    <member name="T:System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute">
      <summary>Fournit une classe de base pour les attributs de comportement de liaison de modèle.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute.#ctor(System.Web.Http.ModelBinding.HttpBindingBehavior)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute" />.</summary>
      <param name="behavior">Comportement.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute.Behavior">
      <summary>Obtient ou définit la catégorie de comportement.</summary>
      <returns>Catégorie de comportement.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute.TypeId">
      <summary>Obtient l'identificateur unique pour cet attribut.</summary>
      <returns>ID de cet attribut.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.HttpRequestParameterBinding">
      <summary>Le paramètre est lié à la demande.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.HttpRequestParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.HttpRequestParameterBinding" />.</summary>
      <param name="descriptor">Descripteur du paramètre.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.HttpRequestParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Exécute de manière asynchrone la liaison du paramètre.</summary>
      <returns>Paramètre lié.</returns>
      <param name="metadataProvider">Fournisseur de métadonnées.</param>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="cancellationToken">Jeton d'annulation.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.IModelBinder">
      <summary>Définit les méthodes requises pour un classeur de modèles.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.IModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Lie le modèle à une valeur à l’aide du contexte de contrôleur et du contexte de liaison spécifiés.</summary>
      <returns>true si la liaison de modèle réussit ; sinon, false.</returns>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="bindingContext">Contexte de liaison.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.IValueProviderParameterBinding">
      <summary>Représente un fournisseur de valeur pour la liaison du paramètre.</summary>
    </member>
    <member name="P:System.Web.Http.ModelBinding.IValueProviderParameterBinding.ValueProviderFactories">
      <summary>Obtient les instances <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" /> utilisées par cette liaison de paramètre.</summary>
      <returns>Instances <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" /> utilisées par cette liaison de paramètre.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter">
      <summary>Représente la classe <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> pour la gestion des données de formulaire HTML codées URL (ou application/x-www-form-urlencoded).  </summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter.#ctor(System.Web.Http.HttpConfiguration)"></member>
    <member name="M:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter.CanReadType(System.Type)">
      <summary> Détermine si ce <see cref="T:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter" /> peut lire des objets du <paramref name="type" /> spécifié. </summary>
      <returns>true si les objets de ce type peuvent être lus ; sinon, false.</returns>
      <param name="type">Type d'objet qui sera lu.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Lit un objet du <paramref name="type" /> spécifié à partir du flux spécifié. Cette méthode est appelée lors de la désérialisation.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> dont le résultat sera l'instance d'objet qui a été lue.</returns>
      <param name="type">Type d'objet à lire.</param>
      <param name="readStream">
        <see cref="T:System.IO.Stream" /> à partir duquel lire.</param>
      <param name="content">Contenu en cours de lecture.</param>
      <param name="formatterLogger">
        <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> dans lequel journaliser les événements.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBinderAttribute">
      <summary>Spécifie que ce paramètre utilise un classeur de modèles.Cette option peut spécifier le classeur de modèles et les fournisseurs de valeurs associés.Les attributs dérivés peuvent fournir des paramètres pratiques pour le classeur de modèles ou le fournisseur de valeurs.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.ModelBinderAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.ModelBinderAttribute" />.</summary>
      <param name="binderType">Type de classeur de modèles.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderAttribute.BinderType">
      <summary>Obtient ou définit le type de classeur de modèles.</summary>
      <returns>Type de classeur de modèles. </returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.GetBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Obtient la liaison pour un paramètre.</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" /> qui contient la liaison.</returns>
      <param name="parameter">Paramètre à lier.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.GetModelBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary> Obtenir le classeur de modèles pour ce type. </summary>
      <returns> un classeur de modèles ayant une valeur non null.</returns>
      <param name="configuration">Configuration.</param>
      <param name="modelType">type de modèle que le classeur est censé lier.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.GetModelBinderProvider(System.Web.Http.HttpConfiguration)">
      <summary>Obtient le fournisseur de classeurs de modèles.</summary>
      <returns>Instance <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" />.</returns>
      <param name="configuration">Objet de configuration <see cref="T:System.Web.Http.HttpConfiguration" />.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.GetValueProviderFactories(System.Web.Http.HttpConfiguration)">
      <summary> Obtient les fournisseurs de valeur qui seront alimentés vers le classeur de modèles. </summary>
      <returns>Collection d'instances <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />.</returns>
      <param name="configuration">Objet de configuration <see cref="T:System.Web.Http.HttpConfiguration" />.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderAttribute.Name">
      <summary>Obtient ou définit le nom qui doit être pris en compte comme nom de paramètre lors de la liaison de modèles.</summary>
      <returns>Nom de paramètre à prendre en compte.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderAttribute.SuppressPrefixCheck">
      <summary>Obtient ou définit une valeur qui spécifie si la vérification du préfixe doit être supprimée.</summary>
      <returns>true si la vérification du préfixe doit être supprimée ; sinon, false.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBinderConfig">
      <summary>Fournit un conteneur à la configuration de classeurs de modèles.</summary>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderConfig.ResourceClassKey">
      <summary>Obtient ou définit le nom du fichier de ressources (clé de classe) qui contient des valeurs de chaînes localisées.</summary>
      <returns>Nom du fichier de ressources (clé de classe).</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderConfig.TypeConversionErrorMessageProvider">
      <summary>Obtient ou définit le fournisseur actuel de messages d'erreur sur la conversion de type.</summary>
      <returns>Fournisseur actuel de messages d'erreur sur la conversion de type.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderConfig.ValueRequiredErrorMessageProvider">
      <summary>Obtient ou définit le fournisseur actuel de messages d'erreur de valeur obligatoire.</summary>
      <returns>Fournisseur de messages d'erreur.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBinderErrorMessageProvider">
      <summary>Fournit un conteneur pour le fournisseur de messages d'erreurs de classeur de modèles.</summary>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBinderParameterBinding">
      <summary> Décrit un paramètre lié via ModelBinding.   </summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ModelBinding.IModelBinder,System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.ModelBinderParameterBinding" />.</summary>
      <param name="descriptor">Descripteur du paramètre.</param>
      <param name="modelBinder">Classeur de modèles.</param>
      <param name="valueProviderFactories">Collection de fabriques de fournisseur de valeur.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderParameterBinding.Binder">
      <summary>Obtient le classeur de modèles.</summary>
      <returns>Classeur de modèles.</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Exécute de manière asynchrone la liaison de paramètres via le classeur de modèles.</summary>
      <returns>Tâche signalée lorsque la liaison est terminée.</returns>
      <param name="metadataProvider">Fournisseur de métadonnées à utiliser pour la validation.</param>
      <param name="actionContext">Contexte d'action pour la liaison.</param>
      <param name="cancellationToken">Jeton d'annulation attribué à cette tâche pour l'annulation de l'opération de liaison.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderParameterBinding.ValueProviderFactories">
      <summary>Obtient la collection de la fabrique de fournisseur de valeur.</summary>
      <returns>Collection de fabriques de fournisseur de valeur.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBinderProvider">
      <summary>Fournit une classe de base abstraite pour les fournisseurs de classeurs de modèles.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Trouve un classeur pour le type donné.</summary>
      <returns>Classeur, susceptible de tenter de lier ce type. Ou valeur null si le classeur sait statiquement qu'il ne sera jamais en mesure de lier le type.</returns>
      <param name="configuration">Objet de configuration.</param>
      <param name="modelType">Type du modèle par rapport auquel lier.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBindingContext">
      <summary>Fournit le contexte de fonctionnement d'un classeur de modèles.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBindingContext.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBindingContext.#ctor(System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext" />.</summary>
      <param name="bindingContext">Contexte de liaison.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.FallbackToEmptyPrefix">
      <summary>Obtient ou définit une valeur qui indique si le classeur doit utiliser un préfixe vide.</summary>
      <returns>true si le classeur doit utiliser un préfixe vide ; sinon, false.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.Model">
      <summary>Obtient ou définit le modèle.</summary>
      <returns>Modèle.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ModelMetadata">
      <summary>Obtient ou définit les métadonnées du modèle.</summary>
      <returns>Métadonnées du modèle.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ModelName">
      <summary>Obtient ou définit le nom du modèle.</summary>
      <returns>Nom du modèle.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ModelState">
      <summary>Obtient ou définit l'état du modèle.</summary>
      <returns>État du modèle.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ModelType">
      <summary>Obtient ou définit le type du modèle.</summary>
      <returns>Type du modèle.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.PropertyMetadata">
      <summary>Obtient les métadonnées de la propriété.</summary>
      <returns>Métadonnées de propriété.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ValidationNode">
      <summary>Obtient ou définit le nœud de validation.</summary>
      <returns>Nœud de validation.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ValueProvider">
      <summary>Obtient ou définit le fournisseur de valeurs.</summary>
      <returns>Fournisseur de valeurs.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelError">
      <summary>Représente une erreur qui se produit lors de la liaison d'un modèle.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelError.#ctor(System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.ModelError" /> à l'aide de l'exception spécifiée.</summary>
      <param name="exception">Exception.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelError.#ctor(System.Exception,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.ModelError" /> à l'aide de l'exception et du message d'erreur spécifiés.</summary>
      <param name="exception">Exception.</param>
      <param name="errorMessage">Message d'erreur</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelError.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.ModelError" /> à l'aide du message d'erreur spécifié.</summary>
      <param name="errorMessage">Message d'erreur</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelError.ErrorMessage">
      <summary>Obtient ou définit le message d'erreur.</summary>
      <returns>Message d'erreur.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelError.Exception">
      <summary>Obtient ou définit l'objet d'exception.</summary>
      <returns>Objet d'exception.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelErrorCollection">
      <summary>Représente une collection d'instances <see cref="T:System.Web.Http.ModelBinding.ModelError" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelErrorCollection.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.ModelErrorCollection" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelErrorCollection.Add(System.Exception)">
      <summary>Ajoute l'objet Exception spécifié à la collection d'erreurs de modèle.</summary>
      <param name="exception">Exception.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelErrorCollection.Add(System.String)">
      <summary>Ajoute le message d'erreur spécifié à la collection d'erreurs de modèle.</summary>
      <param name="errorMessage">Message d'erreur.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelState">
      <summary>Encapsule l'état de la liaison du modèle dans une propriété d'un argument de méthode d'action, ou dans l'argument lui-même.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelState.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.ModelState" />.</summary>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelState.Errors">
      <summary>Obtient un objet <see cref="T:System.Web.Http.ModelBinding.ModelErrorCollection" /> qui contient les erreurs qui se sont produites pendant la liaison du modèle.</summary>
      <returns>Erreurs de l'état du modèle.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelState.Value">
      <summary>Obtient un objet <see cref="T:System.Web.Http.ValueProviders.ValueProviderResult" /> qui encapsule la valeur liée pendant la liaison du modèle.</summary>
      <returns>Valeur de l'état du modèle.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelStateDictionary">
      <summary>Représente l'état d'une tentative de liaison d'un formulaire publié à une méthode d'action, qui inclut les informations de validation.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" /> en utilisant les valeurs copiées à partir du dictionnaire d'états de modèles spécifié.</summary>
      <param name="dictionary">Dictionnaire.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.ModelBinding.ModelState})">
      <summary>Ajoute l'élément spécifié au dictionnaire d'états de modèles.</summary>
      <param name="item">Objet à ajouter au dictionnaire d'états de modèles.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Add(System.String,System.Web.Http.ModelBinding.ModelState)">
      <summary>Ajoute un élément qui a la clé et la valeur spécifiées au dictionnaire d'états de modèles.</summary>
      <param name="key">Clé de l'élément à ajouter.</param>
      <param name="value">Valeur de l'élément à ajouter.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.AddModelError(System.String,System.Exception)">
      <summary>Ajoute l'erreur de modèle spécifiée à la collection d'erreurs pour le dictionnaire d'états de modèles associé à la clé spécifiée.</summary>
      <param name="key">Clé.</param>
      <param name="exception">Exception.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.AddModelError(System.String,System.String)">
      <summary>Ajoute le message d'erreur spécifié à la collection d'erreurs pour le dictionnaire d'états de modèles associé à la clé spécifiée.</summary>
      <param name="key">Clé.</param>
      <param name="errorMessage">Message d'erreur.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Clear">
      <summary>Supprime tous les éléments du dictionnaire d'états de modèles.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.ModelBinding.ModelState})">
      <summary>Détermine si le dictionnaire d'états de modèles contient une valeur spécifique.</summary>
      <returns>true si l'élément existe dans le dictionnaire d'états de modèles ; sinon, false.</returns>
      <param name="item">Objet à trouver dans le dictionnaire d'états de modèles.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.ContainsKey(System.String)">
      <summary>Détermine si le dictionnaire d'états de modèles contient la clé spécifiée.</summary>
      <returns>true si le dictionnaire d'états de modèles contient la clé spécifiée ; sinon, false.</returns>
      <param name="key">Clé à trouver dans le dictionnaire d'états de modèles.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.ModelBinding.ModelState}[],System.Int32)">
      <summary>Copie les éléments du dictionnaire d'états de modèles dans un tableau, en commençant à l'index spécifié.</summary>
      <param name="array">Tableau. Le tableau doit comporter un index de base zéro.</param>
      <param name="arrayIndex">Index de base zéro dans le tableau à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.Count">
      <summary>Obtient le nombre de paires clé/valeur dans la collection.</summary>
      <returns>Nombre de paires clé/valeur dans la collection.</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.GetEnumerator">
      <summary>Retourne un énumérateur qui peut être utilisé pour itérer au sein de la collection.</summary>
      <returns>Énumérateur permettant d'itérer au sein de la collection.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.IsReadOnly">
      <summary>Obtient une valeur qui indique si la collection est en lecture seule.</summary>
      <returns>true si la collection est en lecture seule ; sinon, false.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.IsValid">
      <summary>Obtient une valeur qui indique si cette instance du dictionnaire d'états de modèles est valide.</summary>
      <returns>true si cette instance est valide ; sinon, false.</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.IsValidField(System.String)">
      <summary>Détermine s'il existe des objets <see cref="T:System.Web.Http.ModelBinding.ModelError" /> associés à la clé spécifiée ou précédés par cette dernière.</summary>
      <returns>true si le dictionnaire d'états de modèles contient une valeur associée à la clé spécifiée ; sinon, false.</returns>
      <param name="key">Clé.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.Item(System.String)">
      <summary>Obtient ou définit la valeur associée à la clé spécifiée.</summary>
      <returns>Élément d'état de modèle.</returns>
      <param name="key">Clé.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.Keys">
      <summary>Obtient une collection qui contient les clés dans le dictionnaire.</summary>
      <returns>Collection qui contient les clés du dictionnaire d'états de modèles.</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Merge(System.Web.Http.ModelBinding.ModelStateDictionary)">
      <summary>Copie les valeurs de l'objet <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" /> spécifié dans ce dictionnaire, en remplaçant les valeurs existantes si les clés sont les mêmes.</summary>
      <param name="dictionary">Dictionnaire.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.ModelBinding.ModelState})">
      <summary>Supprime la première occurrence de l'objet spécifié dans le dictionnaire d'états de modèles.</summary>
      <returns>true si l'élément a été correctement supprimé du dictionnaire d'états de modèles ; sinon, false. Cette méthode retourne également false si l'élément est introuvable dans le dictionnaire d'états de modèles.</returns>
      <param name="item">Objet à supprimer du dictionnaire d'états de modèles.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Remove(System.String)">
      <summary>Supprime l'élément comportant la clé spécifiée du dictionnaire d'états de modèles.</summary>
      <returns>true si l'élément est correctement supprimé ; sinon, false. Cette méthode retourne également false si la clé est introuvable dans le dictionnaire d'états de modèles.</returns>
      <param name="key">Clé de l'élément à supprimer.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.SetModelValue(System.String,System.Web.Http.ValueProviders.ValueProviderResult)">
      <summary>Définit la valeur de la clé spécifiée à l'aide du dictionnaire de fournisseurs de valeurs spécifié.</summary>
      <param name="key">Clé.</param>
      <param name="value">Valeur.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein d'une collection.</summary>
      <returns>Objet IEnumerator qui peut être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.TryGetValue(System.String,System.Web.Http.ModelBinding.ModelState@)">
      <summary>Tente d'obtenir la valeur associée à la clé spécifiée.</summary>
      <returns>true si l'objet contient un élément incluant la clé spécifiée ; sinon, false.</returns>
      <param name="key">Clé de la valeur à obtenir.</param>
      <param name="value">Valeur associée à la clé spécifiée.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.Values">
      <summary>Obtient une collection qui contient les valeurs dans le dictionnaire.</summary>
      <returns>Collection qui contient les valeurs du dictionnaire d'états de modèles.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ParameterBindingRulesCollection">
      <summary> Collection de fonctions qui peuvent produire une liaison de paramètre pour un paramètre donné.    </summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ParameterBindingRulesCollection.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.ParameterBindingRulesCollection" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ParameterBindingRulesCollection.Add(System.Type,System.Func{System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.Controllers.HttpParameterBinding})">
      <summary> Ajoute une fonction à la fin de la collection.  La fonction ajoutée est un wrapper autour de funcInner qui vérifie si parameterType correspond à typeMatch. </summary>
      <param name="typeMatch">type qui correspond à HttpParameterDescriptor.ParameterType</param>
      <param name="funcInner">fonction interne appelée si la correspondance de type réussit</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ParameterBindingRulesCollection.Insert(System.Int32,System.Type,System.Func{System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.Controllers.HttpParameterBinding})">
      <summary> Insérez une fonction à l'index spécifié dans la collection. /// La fonction ajoutée est un wrapper autour de funcInner qui vérifie si parameterType correspond à typeMatch. </summary>
      <param name="index">index au niveau duquel effectuer l'insertion.</param>
      <param name="typeMatch">type qui correspond à HttpParameterDescriptor.ParameterType</param>
      <param name="funcInner">fonction interne appelée si la correspondance de type réussit</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ParameterBindingRulesCollection.LookupBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary> Exécutez chaque fonction de liaison dans l'ordre jusqu'à ce que l'une d'elles retourne une liaison qui n'a pas la valeur null.  </summary>
      <returns>première liaison qui n'a pas la valeur null produite pour le paramètre. Valeur null si aucune liaison n'est produite.</returns>
      <param name="parameter">paramètre à lier.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1">
      <summary>Mappe une demande de navigateur à un tableau.</summary>
      <typeparam name="TElement">Type du tableau.</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Indique si le modèle est lié.</summary>
      <returns>true si le modèle spécifié est lié ; sinon, false.</returns>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="bindingContext">Contexte de liaison.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1.CreateOrReplaceCollection(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Collections.Generic.IList{`0})">
      <summary>Convertit la collection en tableau.</summary>
      <returns>true dans tous les cas.</returns>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="bindingContext">Contexte de liaison.</param>
      <param name="newCollection">Nouvelle collection.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ArrayModelBinderProvider">
      <summary>Fournit un classeur de modèles pour les tableaux.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ArrayModelBinderProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.Binders.ArrayModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ArrayModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Retourne un classeur de modèles pour les tableaux.</summary>
      <returns>Objet de classeur de modèles ou valeur null si la tentative d'obtention d'un classeur de modèles échoue.</returns>
      <param name="configuration">Configuration.</param>
      <param name="modelType">Type de modèle.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1">
      <summary>Mappe une demande de navigateur à une collection.</summary>
      <typeparam name="TElement">Type de la collection.</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Lie le modèle à l'aide du contexte d'exécution et du contexte de liaison spécifiés.</summary>
      <returns>true si la liaison de modèle réussit ; sinon, false.</returns>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="bindingContext">Contexte de liaison.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1.CreateOrReplaceCollection(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Collections.Generic.IList{`0})">
      <summary>Permet aux classes dérivées de manipuler la collection avant de la retourner au classeur.</summary>
      <returns>true dans tous les cas.</returns>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="bindingContext">Contexte de liaison.</param>
      <param name="newCollection">Nouvelle collection.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.CollectionModelBinderProvider">
      <summary>Fournit un classeur de modèles pour une collection.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CollectionModelBinderProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.Binders.CollectionModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CollectionModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Récupère un classeur de modèles pour une collection.</summary>
      <returns>Classeur de modèles.</returns>
      <param name="configuration">Configuration du modèle.</param>
      <param name="modelType">Type du modèle.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto">
      <summary>Représente un objet de transfert de données (DTO) pour un modèle complexe.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDto.#ctor(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Metadata.ModelMetadata})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</summary>
      <param name="modelMetadata">Métadonnées du modèle.</param>
      <param name="propertyMetadata">Collection de métadonnées de la propriété.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.ComplexModelDto.ModelMetadata">
      <summary>Obtient ou définit les métadonnées de modèle de <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</summary>
      <returns>Métadonnées de modèle de <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.ComplexModelDto.PropertyMetadata">
      <summary>Obtient ou définit la collection de métadonnées de la propriété de <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</summary>
      <returns>Collection de métadonnées de la propriété de <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.ComplexModelDto.Results">
      <summary>Obtient ou définit les résultats de <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</summary>
      <returns>Résultat de <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinder">
      <summary>Représente un classeur de modèles pour l'objet <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinder.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinder" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Indique si le modèle spécifié est lié.</summary>
      <returns>true si le modèle spécifié est lié ; sinon, false.</returns>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="bindingContext">Contexte de liaison.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinderProvider">
      <summary>Représente un modèle complexe qui appelle un fournisseur de classeurs de modèles.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinderProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Récupère le classeur de modèles associé.</summary>
      <returns>Classeur de modèles.</returns>
      <param name="configuration">Configuration.</param>
      <param name="modelType">Type du modèle à récupérer.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult">
      <summary>Représente le résultat pour l'objet <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult.#ctor(System.Object,System.Web.Http.Validation.ModelValidationNode)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult" />.</summary>
      <param name="model">Modèle objet.</param>
      <param name="validationNode">Nœud de validation.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult.Model">
      <summary>Obtient ou définit le modèle de cet objet.</summary>
      <returns>Modèle de cet objet.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult.ValidationNode">
      <summary>Obtient ou définit le <see cref="T:System.Web.Http.Validation.ModelValidationNode" /> de cet objet.</summary>
      <returns>
        <see cref="T:System.Web.Http.Validation.ModelValidationNode" /> de cet objet.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinder">
      <summary>Représente un <see cref="T:System.Web.Http.ModelBinding.IModelBinder" /> qui délègue à une instance d'une collection d'instances <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinder.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.ModelBinding.IModelBinder})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinder" />.</summary>
      <param name="binders">Énumération de classeurs.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinder.#ctor(System.Web.Http.ModelBinding.IModelBinder[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinder" />.</summary>
      <param name="binders">Tableau de classeurs.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Indique si le modèle spécifié est lié.</summary>
      <returns>true si le modèle est lié ; sinon, false.</returns>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="bindingContext">Contexte de liaison.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider">
      <summary>Représente la classe pour les fournisseurs de classeurs de modèles composites.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.ModelBinding.ModelBinderProvider})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider" />.</summary>
      <param name="providers">Collection de <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" />.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Obtient le classeur pour le modèle.</summary>
      <returns>Classeur du modèle.</returns>
      <param name="configuration">Configuration du classeur.</param>
      <param name="modelType">Type du modèle.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider.Providers">
      <summary>Obtient les fournisseurs pour le classeur de modèles composites.</summary>
      <returns>Collection de fournisseurs.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.DictionaryModelBinder`2">
      <summary>Mappe une demande de navigateur à un objet de données de dictionnaire.</summary>
      <typeparam name="TKey">Type de la clé.</typeparam>
      <typeparam name="TValue">Type de la valeur.</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.DictionaryModelBinder`2.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.Binders.DictionaryModelBinder`2" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.DictionaryModelBinder`2.CreateOrReplaceCollection(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Convertit la collection en dictionnaire.</summary>
      <returns>true dans tous les cas.</returns>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="bindingContext">Contexte de liaison.</param>
      <param name="newCollection">Nouvelle collection.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.DictionaryModelBinderProvider">
      <summary>Fournit un classeur de modèles pour un dictionnaire.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.DictionaryModelBinderProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.Binders.DictionaryModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.DictionaryModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Récupère le classeur de modèles associé.</summary>
      <returns>Classeur de modèles associé.</returns>
      <param name="configuration">Configuration à utiliser.</param>
      <param name="modelType">Type de modèle.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinder`2">
      <summary>Mappe une demande de navigateur à un objet de données de paire clé/valeur.</summary>
      <typeparam name="TKey">Type de la clé.</typeparam>
      <typeparam name="TValue">Type de la valeur.</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinder`2.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinder`2" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinder`2.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Lie le modèle à l'aide du contexte d'exécution et du contexte de liaison spécifiés.</summary>
      <returns>true si la liaison de modèle réussit ; sinon, false.</returns>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="bindingContext">Contexte de liaison.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinderProvider">
      <summary>Fournit un classeur de modèles pour une collection de paires clé/valeur.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinderProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Récupère le classeur de modèles associé.</summary>
      <returns>Classeur de modèles associé.</returns>
      <param name="configuration">Configuration.</param>
      <param name="modelType">Type de modèle.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder">
      <summary>Mappe une demande de navigateur à un objet de données mutable.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Lie le modèle à l'aide du contexte d'action et du contexte de liaison spécifiés.</summary>
      <returns>true si la liaison réussit ; sinon, false.</returns>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="bindingContext">Contexte de liaison.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.CanUpdateProperty(System.Web.Http.Metadata.ModelMetadata)">
      <summary>Récupère une valeur indiquant si une propriété peut être mise à jour.</summary>
      <returns>true si la propriété peut être mise à jour ; sinon, false.</returns>
      <param name="propertyMetadata">Métadonnées de la propriété à évaluer.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.CreateModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Crée une instance du modèle.</summary>
      <returns>Objet du modèle nouvellement créé.</returns>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="bindingContext">Contexte de liaison.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.EnsureModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Crée une instance de modèle si aucune instance n'existe dans le contexte de liaison.</summary>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="bindingContext">Contexte de liaison.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.GetMetadataForProperties(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Récupère les métadonnées des propriétés du modèle.</summary>
      <returns>Métadonnées des propriétés du modèle.</returns>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="bindingContext">Contexte de liaison.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.SetProperty(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Web.Http.Metadata.ModelMetadata,System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult,System.Web.Http.Validation.ModelValidator)">
      <summary>Définit la valeur d'une propriété spécifiée.</summary>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="bindingContext">Contexte de liaison.</param>
      <param name="propertyMetadata">Métadonnées de la propriété à définir.</param>
      <param name="dtoResult">Informations de validation à propos de la propriété.</param>
      <param name="requiredValidator">Validateur du modèle.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinderProvider">
      <summary>Fournit un classeur de modèles pour les objets mutables.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinderProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Récupère le classeur de modèles pour le type spécifié.</summary>
      <returns>Classeur de modèles.</returns>
      <param name="configuration">Configuration.</param>
      <param name="modelType">Type du modèle à récupérer.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider">
      <summary>Fournit un simple classeur de modèles pour cette classe de liaison de données.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider.#ctor(System.Type,System.Func{System.Web.Http.ModelBinding.IModelBinder})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider" />.</summary>
      <param name="modelType">Type de modèle.</param>
      <param name="modelBinderFactory">Fabrique de classeurs de modèles.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider.#ctor(System.Type,System.Web.Http.ModelBinding.IModelBinder)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider" /> en utilisant le type de modèle et le classeur de modèles spécifiés.</summary>
      <param name="modelType">Type de modèle.</param>
      <param name="modelBinder">Classeur de modèles.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Retourne un classeur de modèles à l'aide du contexte d'exécution et du contexte de liaison spécifiés.</summary>
      <returns>Classeur de modèles ou valeur null si la tentative d'obtention d'un classeur de modèles échoue.</returns>
      <param name="configuration">Configuration.</param>
      <param name="modelType">Type de modèle.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider.ModelType">
      <summary>Obtient le type du modèle.</summary>
      <returns>Type du modèle.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider.SuppressPrefixCheck">
      <summary>Obtient ou définit une valeur qui spécifie si la vérification du préfixe doit être supprimée.</summary>
      <returns>true si la vérification du préfixe doit être supprimée ; sinon, false.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinder">
      <summary>Mappe une demande de navigateur à un objet de données. Ce type est utilisé lorsque la liaison de modèle requiert des conversions à l'aide d'un convertisseur de type .NET Framework.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinder.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinder" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Lie le modèle à l'aide du contexte du contrôleur et du contexte de liaison spécifiés.</summary>
      <returns>true si la liaison de modèle réussit ; sinon, false.</returns>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="bindingContext">Contexte de liaison.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinderProvider">
      <summary>Fournit un classeur de modèles pour un modèle qui requiert une conversion de type.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinderProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Récupère un classeur de modèles pour un modèle qui requiert une conversion de type.</summary>
      <returns>Classeur de modèles ou Nothing si le type ne peut pas être converti ou s'il n'existe aucune valeur à convertir.</returns>
      <param name="configuration">Configuration du classeur.</param>
      <param name="modelType">Type du modèle.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinder">
      <summary>Mappe une demande de navigateur à un objet de données. Cette classe est utilisée lorsqu'une liaison de modèle ne requiert pas de conversion de type.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinder.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinder" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Lie le modèle à l'aide du contexte d'exécution et du contexte de liaison spécifiés.</summary>
      <returns>true si la liaison de modèle réussit ; sinon, false.</returns>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="bindingContext">Contexte de liaison.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinderProvider">
      <summary>Fournit un classeur de modèles pour un modèle qui ne requiert pas une conversion de type.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinderProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Récupère le classeur de modèles associé.</summary>
      <returns>Classeur de modèles associé.</returns>
      <param name="configuration">Configuration.</param>
      <param name="modelType">Type de modèle.</param>
    </member>
    <member name="T:System.Web.Http.Results.BadRequestErrorMessageResult">
      <summary>Représente un résultat d'action qui retourne une réponse <see cref="F:System.Net.HttpStatusCode.BadRequest" /> et effectue une négociation de contenu sur une <see cref="T:System.Web.Http.HttpError" /> avec <see cref="P:System.Web.Http.HttpError.Message" />. </summary>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestErrorMessageResult.#ctor(System.String,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.BadRequestErrorMessageResult" />.</summary>
      <param name="message">Message d'erreur visible pour l'utilisateur.</param>
      <param name="contentNegotiator">Négociateur de contenu pour gérer la négociation de contenu.</param>
      <param name="request">Message de requête ayant entraîné ce résultat.</param>
      <param name="formatters">Formateurs à utiliser pour négocier et formater le contenu.</param>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestErrorMessageResult.#ctor(System.String,System.Web.Http.ApiController)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.BadRequestErrorMessageResult" />. </summary>
      <param name="message">Message d'erreur visible pour l'utilisateur.</param>
      <param name="controller">Contrôleur à partir duquel obtenir les dépendances nécessaires pour l'exécution.</param>
    </member>
    <member name="P:System.Web.Http.Results.BadRequestErrorMessageResult.ContentNegotiator">
      <summary>Obtient le négociateur de contenu pour gérer la négociation de contenu.</summary>
      <returns>Retourne <see cref="T:System.Net.Http.Formatting.IContentNegotiator" />.</returns>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestErrorMessageResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.BadRequestErrorMessageResult.Formatters">
      <summary>Obtient les formateurs à utiliser pour négocier et formater le contenu.</summary>
      <returns>Retourne <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.BadRequestErrorMessageResult.Message">
      <summary>Obtient le message d'erreur visible pour l'utilisateur.</summary>
      <returns>Retourne <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.BadRequestErrorMessageResult.Request">
      <summary>Obtient le message de requête ayant entraîné ce résultat.</summary>
      <returns>Retourne <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
    </member>
    <member name="T:System.Web.Http.Results.BadRequestResult">
      <summary>Représente un résultat d'action qui retourne une réponse <see cref="F:System.Net.HttpStatusCode.BadRequest" /> vide.</summary>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestResult.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.BadRequestResult" />.</summary>
      <param name="request">Message de requête ayant entraîné ce résultat.</param>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestResult.#ctor(System.Web.Http.ApiController)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.BadRequestResult" />.</summary>
      <param name="controller">Contrôleur à partir duquel obtenir les dépendances nécessaires pour l'exécution.</param>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Exécute la requête de manière asynchrone.</summary>
      <returns>Tâche qui effectue l'opération d'exécution.</returns>
      <param name="cancellationToken">Jeton d'annulation.</param>
    </member>
    <member name="P:System.Web.Http.Results.BadRequestResult.Request">
      <summary>Obtient le message de requête ayant entraîné ce résultat.</summary>
      <returns>Message de requête ayant entraîné ce résultat.</returns>
    </member>
    <member name="T:System.Web.Http.Results.ConflictResult">
      <summary>Représente un résultat d'action qui retourne une réponse HttpStatusCode.Conflict vide.</summary>
    </member>
    <member name="M:System.Web.Http.Results.ConflictResult.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.ConflictResult" />.</summary>
      <param name="request">Message de requête ayant entraîné ce résultat.</param>
    </member>
    <member name="M:System.Web.Http.Results.ConflictResult.#ctor(System.Web.Http.ApiController)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.ConflictResult" />.</summary>
      <param name="controller">Contrôleur à partir duquel obtenir les dépendances nécessaires pour l'exécution.</param>
    </member>
    <member name="M:System.Web.Http.Results.ConflictResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Exécute de manière asynchrone l'opération du résultat de conflit.</summary>
      <returns>Exécute de manière asynchrone de la tâche spécifiée.</returns>
      <param name="cancellationToken">Jeton d'annulation.</param>
    </member>
    <member name="P:System.Web.Http.Results.ConflictResult.Request">
      <summary>Obtient le message de requête ayant entraîné ce résultat.</summary>
      <returns>Message de requête HTTP ayant entraîné ce résultat.</returns>
    </member>
    <member name="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1">
      <summary>Représente un résultat d'action qui effectue une génération d'itinéraire et une négociation de contenu, puis retourne une réponse <see cref="F:System.Net.HttpStatusCode.Created" /> en cas de réussite de la négociation de contenu.</summary>
      <typeparam name="T">Le type de contenu dans le corps d'entité.</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},`0,System.Web.Http.ApiController)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" /> avec les valeurs fournies.</summary>
      <param name="routeName">Nom de l'itinéraire à utiliser pour générer l'URL.</param>
      <param name="routeValues">Données d'itinéraire à utiliser pour générer l'URL.</param>
      <param name="content">La valeur de contenu pour négocier et formater le corps de l'entité.</param>
      <param name="controller">Contrôleur à partir duquel obtenir les dépendances nécessaires pour l'exécution.</param>
    </member>
    <member name="M:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},`0,System.Web.Http.Routing.UrlHelper,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" /> avec les valeurs fournies.</summary>
      <param name="routeName">Nom de l'itinéraire à utiliser pour générer l'URL.</param>
      <param name="routeValues">Données d'itinéraire à utiliser pour générer l'URL.</param>
      <param name="content">La valeur de contenu pour négocier et formater le corps de l'entité.</param>
      <param name="urlFactory">Fabrique à utiliser pour générer l'URL d'itinéraire.</param>
      <param name="contentNegotiator">Négociateur de contenu pour gérer la négociation de contenu.</param>
      <param name="request">Message de requête ayant entraîné ce résultat.</param>
      <param name="formatters">Formateurs à utiliser pour négocier et formater le contenu.</param>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.Content">
      <summary>Obtient la valeur de contenu pour négocier et formater le corps de l'entité.</summary>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.ContentNegotiator">
      <summary>Obtient le négociateur de contenu pour gérer la négociation de contenu.</summary>
    </member>
    <member name="M:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.Formatters">
      <summary>Obtient les formateurs à utiliser pour négocier et formater le contenu.</summary>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.Request">
      <summary>Obtient le message de requête ayant entraîné ce résultat.</summary>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.RouteName">
      <summary>Obtient le nom de l'itinéraire à utiliser pour générer l'URL.</summary>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.RouteValues">
      <summary>Obtient les données d'itinéraire à utiliser pour générer l'URL.</summary>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.UrlFactory">
      <summary>Obtient la fabrique à utiliser pour générer l'URL d'itinéraire.</summary>
    </member>
    <member name="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1">
      <summary>Représente un résultat d'action qui effectue une négociation de contenu, puis retourne une réponse <see cref="F:System.Net.HttpStatusCode.Created" /> en cas de réussite.</summary>
      <typeparam name="T">Le type de contenu dans le corps d'entité.</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.CreatedNegotiatedContentResult`1.#ctor(System.Uri,`0,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.OkNegotiatedContentResult`1" /> avec les valeurs fournies.</summary>
      <param name="location">La valeur de contenu pour négocier et formater le corps de l'entité.</param>
      <param name="content">Emplacement où le contenu a été créé.</param>
      <param name="contentNegotiator">Négociateur de contenu pour gérer la négociation de contenu.</param>
      <param name="request">Message de requête ayant entraîné ce résultat.</param>
      <param name="formatters">Formateurs à utiliser pour négocier et formater le contenu.</param>
    </member>
    <member name="M:System.Web.Http.Results.CreatedNegotiatedContentResult`1.#ctor(System.Uri,`0,System.Web.Http.ApiController)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" /> avec les valeurs fournies.</summary>
      <param name="location">Emplacement où le contenu a été créé.</param>
      <param name="content">La valeur de contenu pour négocier et formater le corps de l'entité.</param>
      <param name="controller">Contrôleur à partir duquel obtenir les dépendances nécessaires pour l'exécution.</param>
    </member>
    <member name="P:System.Web.Http.Results.CreatedNegotiatedContentResult`1.Content">
      <summary>Obtient la valeur de contenu pour négocier et formater le corps de l'entité.</summary>
      <returns>La valeur de contenu pour négocier et formater le corps de l'entité.</returns>
    </member>
    <member name="P:System.Web.Http.Results.CreatedNegotiatedContentResult`1.ContentNegotiator">
      <summary>Obtient le négociateur de contenu pour gérer la négociation de contenu.</summary>
      <returns>Négociateur de contenu pour gérer la négociation de contenu.</returns>
    </member>
    <member name="M:System.Web.Http.Results.CreatedNegotiatedContentResult`1.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Exécute de façon asynchrone l'opération correspondant au résultat de contenu négocié créé.</summary>
      <returns>Exécute de façon asynchrone une valeur de retour.</returns>
      <param name="cancellationToken">Jeton d'annulation.</param>
    </member>
    <member name="P:System.Web.Http.Results.CreatedNegotiatedContentResult`1.Formatters">
      <summary>Obtient les formateurs à utiliser pour négocier et formater le contenu.</summary>
      <returns>Formateurs à utiliser pour négocier et formater le contenu.</returns>
    </member>
    <member name="P:System.Web.Http.Results.CreatedNegotiatedContentResult`1.Location">
      <summary>Obtient l'emplacement où le contenu a été créé.</summary>
      <returns>Emplacement où le contenu a été créé.</returns>
    </member>
    <member name="P:System.Web.Http.Results.CreatedNegotiatedContentResult`1.Request">
      <summary>Obtient le message de requête ayant entraîné ce résultat.</summary>
      <returns>Message de requête HTTP ayant entraîné ce résultat.</returns>
    </member>
    <member name="T:System.Web.Http.Results.ExceptionResult">
      <summary>Représente un résultat d'action qui retourne une réponse <see cref="F:System.Net.HttpStatusCode.InternalServerError" /> et effectue une négociation de contenu sur une <see cref="T:System.Web.Http.HttpError" />, basée sur une <see cref="P:System.Web.Http.Results.ExceptionResult.Exception" />. </summary>
    </member>
    <member name="M:System.Web.Http.Results.ExceptionResult.#ctor(System.Exception,System.Boolean,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.ExceptionResult" />.</summary>
      <param name="exception">Exception à inclure dans l'erreur.</param>
      <param name="includeErrorDetail">true si l'erreur doit inclure des messages d'exception ; sinon, false. </param>
      <param name="contentNegotiator">Négociateur de contenu pour gérer la négociation de contenu.</param>
      <param name="request">Message de requête ayant entraîné ce résultat.</param>
      <param name="formatters">Formateurs à utiliser pour négocier et formater le contenu.</param>
    </member>
    <member name="M:System.Web.Http.Results.ExceptionResult.#ctor(System.Exception,System.Web.Http.ApiController)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.ExceptionResult" />. </summary>
      <param name="exception">Exception à inclure dans l'erreur.</param>
      <param name="controller">Contrôleur à partir duquel obtenir les dépendances nécessaires pour l'exécution.</param>
    </member>
    <member name="P:System.Web.Http.Results.ExceptionResult.ContentNegotiator">
      <summary>Obtient le négociateur de contenu pour gérer la négociation de contenu.</summary>
      <returns>Retourne <see cref="T:System.Net.Http.Formatting.IContentNegotiator" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.ExceptionResult.Exception">
      <summary>Obtient l'exception à inclure dans l'erreur.</summary>
      <returns>Retourne <see cref="T:System.Exception" />.</returns>
    </member>
    <member name="M:System.Web.Http.Results.ExceptionResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.ExceptionResult.Formatters">
      <summary>Obtient les formateurs à utiliser pour négocier et formater le contenu.</summary>
      <returns>Retourne <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.ExceptionResult.IncludeErrorDetail">
      <summary>Obtient une valeur indiquant si l'erreur doit inclure des messages d'exception.</summary>
      <returns>Retourne <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.ExceptionResult.Request">
      <summary>Obtient le message de requête ayant entraîné ce résultat.</summary>
      <returns>Retourne <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
    </member>
    <member name="T:System.Web.Http.Results.FormattedContentResult`1">
      <summary>Représente un résultat d'action qui retourne un contenu formaté.</summary>
      <typeparam name="T">Le type de contenu dans le corps d'entité.</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.FormattedContentResult`1.#ctor(System.Net.HttpStatusCode,`0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Net.Http.HttpRequestMessage)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.FormattedContentResult`1" /> avec les valeurs fournies.</summary>
      <param name="statusCode">Le code d'état HTTP pour le message de réponse.</param>
      <param name="content">La valeur de contenu pour formater le corps de l'entité.</param>
      <param name="formatter">Le formateur à utiliser pour formater le contenu.</param>
      <param name="mediaType">Valeur de l'en-tête Content-Type, ou <see cref="null" /> pour que le formateur choisisse une valeur par défaut.</param>
      <param name="request">Message de requête ayant entraîné ce résultat.</param>
    </member>
    <member name="M:System.Web.Http.Results.FormattedContentResult`1.#ctor(System.Net.HttpStatusCode,`0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Web.Http.ApiController)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.FormattedContentResult`1" /> avec les valeurs fournies.</summary>
      <param name="statusCode">Le code d'état HTTP pour le message de réponse.</param>
      <param name="content">La valeur de contenu pour formater le corps de l'entité.</param>
      <param name="formatter">Le formateur à utiliser pour formater le contenu.</param>
      <param name="mediaType">Valeur de l'en-tête Content-Type, ou <see cref="null" /> pour que le formateur choisisse une valeur par défaut.</param>
      <param name="controller">Contrôleur à partir duquel obtenir les dépendances nécessaires pour l'exécution.</param>
    </member>
    <member name="P:System.Web.Http.Results.FormattedContentResult`1.Content">
      <summary>Obtient la valeur de contenu à formater dans le corps de l'entité.</summary>
    </member>
    <member name="M:System.Web.Http.Results.FormattedContentResult`1.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.Results.FormattedContentResult`1.Formatter">
      <summary>Obtient le formateur à utiliser pour formater le contenu.</summary>
    </member>
    <member name="P:System.Web.Http.Results.FormattedContentResult`1.MediaType">
      <summary>Obtient la valeur de l'en-tête Content-Type, ou <see cref="null" /> pour que le formateur choisisse une valeur par défaut.</summary>
    </member>
    <member name="P:System.Web.Http.Results.FormattedContentResult`1.Request">
      <summary>Obtient le message de requête ayant entraîné ce résultat.</summary>
    </member>
    <member name="P:System.Web.Http.Results.FormattedContentResult`1.StatusCode">
      <summary>Obtient le code d'état HTTP pour le message de réponse.</summary>
    </member>
    <member name="T:System.Web.Http.Results.InternalServerErrorResult">
      <summary>Représente un résultat d'action qui retourne une réponse <see cref="F:System.Net.HttpStatusCode.InternalServerError" /> vide.</summary>
    </member>
    <member name="M:System.Web.Http.Results.InternalServerErrorResult.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.InternalServerErrorResult" />. </summary>
      <param name="request">Message de requête ayant entraîné ce résultat.</param>
    </member>
    <member name="M:System.Web.Http.Results.InternalServerErrorResult.#ctor(System.Web.Http.ApiController)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.InternalServerErrorResult" />. </summary>
      <param name="controller">Contrôleur à partir duquel obtenir les dépendances nécessaires pour l'exécution.</param>
    </member>
    <member name="M:System.Web.Http.Results.InternalServerErrorResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.InternalServerErrorResult.Request">
      <summary>Obtient le message de requête ayant entraîné ce résultat.</summary>
      <returns>Retourne <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
    </member>
    <member name="T:System.Web.Http.Results.InvalidModelStateResult">
      <summary>Représente un résultat d'action qui retourne une réponse <see cref="F:System.Net.HttpStatusCode.BadRequest" /> et effectue une négociation de contenu sur une <see cref="T:System.Web.Http.HttpError" />, basée sur un <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" />.</summary>
    </member>
    <member name="M:System.Web.Http.Results.InvalidModelStateResult.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary,System.Boolean,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.InvalidModelStateResult" />.</summary>
      <param name="modelState">L'état de modèle à inclure dans l'erreur.</param>
      <param name="includeErrorDetail">true si l'erreur doit inclure des messages d'exception ; sinon, false.</param>
      <param name="contentNegotiator">Négociateur de contenu pour gérer la négociation de contenu.</param>
      <param name="request">Message de requête ayant entraîné ce résultat.</param>
      <param name="formatters">Formateurs à utiliser pour négocier et formater le contenu.</param>
    </member>
    <member name="M:System.Web.Http.Results.InvalidModelStateResult.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary,System.Web.Http.ApiController)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.InvalidModelStateResult" />.</summary>
      <param name="modelState">L'état de modèle à inclure dans l'erreur.</param>
      <param name="controller">Contrôleur à partir duquel obtenir les dépendances nécessaires pour l'exécution.</param>
    </member>
    <member name="P:System.Web.Http.Results.InvalidModelStateResult.ContentNegotiator">
      <summary>Obtient le négociateur de contenu pour gérer la négociation de contenu.</summary>
      <returns>Négociateur de contenu pour gérer la négociation de contenu.</returns>
    </member>
    <member name="M:System.Web.Http.Results.InvalidModelStateResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Crée un message de réponse de manière asynchrone.</summary>
      <returns>Tâche qui, une fois accomplie, contient le message de réponse.</returns>
      <param name="cancellationToken">Jeton permettant de surveiller les demandes d'annulation.</param>
    </member>
    <member name="P:System.Web.Http.Results.InvalidModelStateResult.Formatters">
      <summary>Obtient les formateurs à utiliser pour négocier et formater le contenu.</summary>
      <returns>Formateurs à utiliser pour négocier et formater le contenu.</returns>
    </member>
    <member name="P:System.Web.Http.Results.InvalidModelStateResult.IncludeErrorDetail">
      <summary>Obtient une valeur indiquant si l'erreur doit inclure des messages d'exception.</summary>
      <returns>true si l'erreur doit inclure des messages d'exception ; sinon, false.</returns>
    </member>
    <member name="P:System.Web.Http.Results.InvalidModelStateResult.ModelState">
      <summary>Obtient l'état de modèle à inclure dans l'erreur.</summary>
      <returns>L'état de modèle à inclure dans l'erreur.</returns>
    </member>
    <member name="P:System.Web.Http.Results.InvalidModelStateResult.Request">
      <summary>Obtient le message de requête ayant entraîné ce résultat.</summary>
      <returns>Message de requête ayant entraîné ce résultat.</returns>
    </member>
    <member name="T:System.Web.Http.Results.JsonResult`1">
      <summary>Représente un résultat d'action qui retourne une réponse <see cref="F:System.Net.HttpStatusCode.OK" /> avec des données JSON.</summary>
      <typeparam name="T">Le type de contenu dans le corps d'entité.</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.JsonResult`1.#ctor(`0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding,System.Net.Http.HttpRequestMessage)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.JsonResult`1" /> avec les valeurs fournies.</summary>
      <param name="content">Valeur de contenu à sérialiser dans le corps de l'entité.</param>
      <param name="serializerSettings">Paramètres du sérialiseur.</param>
      <param name="encoding">Encodage du contenu.</param>
      <param name="request">Message de requête ayant entraîné ce résultat.</param>
    </member>
    <member name="M:System.Web.Http.Results.JsonResult`1.#ctor(`0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding,System.Web.Http.ApiController)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.JsonResult`1" /> avec les valeurs fournies.</summary>
      <param name="content">Valeur de contenu à sérialiser dans le corps de l'entité.</param>
      <param name="serializerSettings">Paramètres du sérialiseur.</param>
      <param name="encoding">Encodage du contenu.</param>
      <param name="controller">Contrôleur à partir duquel obtenir les dépendances nécessaires pour l'exécution.</param>
    </member>
    <member name="P:System.Web.Http.Results.JsonResult`1.Content">
      <summary>Obtient la valeur de contenu à sérialiser dans le corps de l'entité.</summary>
      <returns>Valeur de contenu à sérialiser dans le corps de l'entité.</returns>
    </member>
    <member name="P:System.Web.Http.Results.JsonResult`1.Encoding">
      <summary>Obtient l'encodage du contenu.</summary>
      <returns>Encodage du contenu.</returns>
    </member>
    <member name="M:System.Web.Http.Results.JsonResult`1.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Crée un message de réponse de manière asynchrone.</summary>
      <returns>Tâche qui, une fois accomplie, contient le message de réponse.</returns>
      <param name="cancellationToken">Jeton permettant de surveiller les demandes d'annulation.</param>
    </member>
    <member name="P:System.Web.Http.Results.JsonResult`1.Request">
      <summary>Obtient le message de requête ayant entraîné ce résultat.</summary>
      <returns>Message de requête ayant entraîné ce résultat.</returns>
    </member>
    <member name="P:System.Web.Http.Results.JsonResult`1.SerializerSettings">
      <summary>Obtient les paramètres du sérialiseur.</summary>
      <returns>Paramètres du sérialiseur.</returns>
    </member>
    <member name="T:System.Web.Http.Results.NegotiatedContentResult`1">
      <summary>Représente un résultat d'action qui effectue une négociation de contenu.</summary>
      <typeparam name="T">Le type de contenu dans le corps d'entité.</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.NegotiatedContentResult`1.#ctor(System.Net.HttpStatusCode,`0,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.NegotiatedContentResult`1" /> avec les valeurs fournies.</summary>
      <param name="statusCode">Le code d'état HTTP pour le message de réponse.</param>
      <param name="content">La valeur de contenu pour négocier et formater le corps de l'entité.</param>
      <param name="contentNegotiator">Négociateur de contenu pour gérer la négociation de contenu.</param>
      <param name="request">Message de requête ayant entraîné ce résultat.</param>
      <param name="formatters">Formateurs à utiliser pour négocier et formater le contenu.</param>
    </member>
    <member name="M:System.Web.Http.Results.NegotiatedContentResult`1.#ctor(System.Net.HttpStatusCode,`0,System.Web.Http.ApiController)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.NegotiatedContentResult`1" /> avec les valeurs fournies.</summary>
      <param name="statusCode">Le code d'état HTTP pour le message de réponse.</param>
      <param name="content">La valeur de contenu pour négocier et formater le corps de l'entité.</param>
      <param name="controller">Contrôleur à partir duquel obtenir les dépendances nécessaires pour l'exécution.</param>
    </member>
    <member name="P:System.Web.Http.Results.NegotiatedContentResult`1.Content">
      <summary>Obtient la valeur de contenu pour négocier et formater le corps de l'entité.</summary>
      <returns>La valeur de contenu pour négocier et formater le corps de l'entité.</returns>
    </member>
    <member name="P:System.Web.Http.Results.NegotiatedContentResult`1.ContentNegotiator">
      <summary>Obtient le négociateur de contenu pour gérer la négociation de contenu.</summary>
      <returns>Négociateur de contenu pour gérer la négociation de contenu.</returns>
    </member>
    <member name="M:System.Web.Http.Results.NegotiatedContentResult`1.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Exécute de manière asynchrone un résultat de contenu négocié HTTP.</summary>
      <returns>Exécute de manière asynchrone un résultat de contenu négocié HTTP.</returns>
      <param name="cancellationToken">Jeton d'annulation.</param>
    </member>
    <member name="P:System.Web.Http.Results.NegotiatedContentResult`1.Formatters">
      <summary>Obtient les formateurs à utiliser pour négocier et formater le contenu.</summary>
      <returns>Formateurs à utiliser pour négocier et formater le contenu.</returns>
    </member>
    <member name="P:System.Web.Http.Results.NegotiatedContentResult`1.Request">
      <summary>Obtient le message de requête ayant entraîné ce résultat.</summary>
      <returns>Message de requête HTTP ayant entraîné ce résultat.</returns>
    </member>
    <member name="P:System.Web.Http.Results.NegotiatedContentResult`1.StatusCode">
      <summary>Obtient le code d'état HTTP pour le message de réponse.</summary>
      <returns>Le code d'état HTTP pour le message de réponse.</returns>
    </member>
    <member name="T:System.Web.Http.Results.NotFoundResult">
      <summary>Représente un résultat d'action qui retourne une réponse <see cref="F:System.Net.HttpStatusCode.NotFound" /> vide.</summary>
    </member>
    <member name="M:System.Web.Http.Results.NotFoundResult.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.NotFoundResult" />.</summary>
      <param name="request">Message de requête ayant entraîné ce résultat.</param>
    </member>
    <member name="M:System.Web.Http.Results.NotFoundResult.#ctor(System.Web.Http.ApiController)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.NotFoundResult" />.</summary>
      <param name="controller">Contrôleur à partir duquel obtenir les dépendances nécessaires pour l'exécution.</param>
    </member>
    <member name="M:System.Web.Http.Results.NotFoundResult.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.Results.NotFoundResult.Request">
      <summary>Obtient le message de requête ayant entraîné ce résultat.</summary>
    </member>
    <member name="T:System.Web.Http.Results.OkNegotiatedContentResult`1">
      <summary>Représente un résultat d'action qui effectue une négociation de contenu, puis retourne une réponse HttpStatusCode.OK en cas de réussite.</summary>
      <typeparam name="T">Le type de contenu dans le corps d'entité.</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.OkNegotiatedContentResult`1.#ctor(`0,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.OkNegotiatedContentResult`1" /> avec les valeurs fournies.</summary>
      <param name="content">La valeur de contenu pour négocier et formater le corps de l'entité.</param>
      <param name="contentNegotiator">Négociateur de contenu pour gérer la négociation de contenu.</param>
      <param name="request">Message de requête ayant entraîné ce résultat.</param>
      <param name="formatters">Formateurs à utiliser pour négocier et formater le contenu.</param>
    </member>
    <member name="M:System.Web.Http.Results.OkNegotiatedContentResult`1.#ctor(`0,System.Web.Http.ApiController)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.OkNegotiatedContentResult`1" /> avec les valeurs fournies.</summary>
      <param name="content">La valeur de contenu pour négocier et formater le corps de l'entité.</param>
      <param name="controller">Contrôleur à partir duquel obtenir les dépendances nécessaires pour l'exécution.</param>
    </member>
    <member name="P:System.Web.Http.Results.OkNegotiatedContentResult`1.Content">
      <summary>Obtient la valeur de contenu pour négocier et formater le corps de l'entité.</summary>
    </member>
    <member name="P:System.Web.Http.Results.OkNegotiatedContentResult`1.ContentNegotiator">
      <summary>Obtient le négociateur de contenu pour gérer la négociation de contenu.</summary>
    </member>
    <member name="M:System.Web.Http.Results.OkNegotiatedContentResult`1.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.Results.OkNegotiatedContentResult`1.Formatters">
      <summary>Obtient les formateurs à utiliser pour négocier et formater le contenu.</summary>
    </member>
    <member name="P:System.Web.Http.Results.OkNegotiatedContentResult`1.Request">
      <summary>Obtient le message de requête ayant entraîné ce résultat.</summary>
    </member>
    <member name="T:System.Web.Http.Results.OkResult">
      <summary>Représente un résultat d'action qui retourne une réponse HttpStatusCode.OK vide.</summary>
    </member>
    <member name="M:System.Web.Http.Results.OkResult.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.NotFoundResult" />.</summary>
      <param name="request">Message de requête ayant entraîné ce résultat.</param>
    </member>
    <member name="M:System.Web.Http.Results.OkResult.#ctor(System.Web.Http.ApiController)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.NotFoundResult" />.</summary>
      <param name="controller">Contrôleur à partir duquel obtenir les dépendances nécessaires pour l'exécution.</param>
    </member>
    <member name="M:System.Web.Http.Results.OkResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>S'exécute en mode asynchrone.</summary>
      <returns>Retourne la tâche.</returns>
      <param name="cancellationToken">Jeton d'annulation.</param>
    </member>
    <member name="P:System.Web.Http.Results.OkResult.Request">
      <summary>Obtient un message de requête HTTP pour les résultats.</summary>
      <returns>Message de requête HTTP pour les résultats.</returns>
    </member>
    <member name="T:System.Web.Http.Results.RedirectResult">
      <summary>Représente un résultat d'action pour un &lt;voir cref="F:System.Net.HttpStatusCode.Redirect"/&gt;.</summary>
    </member>
    <member name="M:System.Web.Http.Results.RedirectResult.#ctor(System.Uri,System.Net.Http.HttpRequestMessage)">
      <summary>Initialise une nouvelle instance de la classe &lt;voir cref="T:System.Net.Http.ObjectContent`1" /&gt; avec les valeurs fournies.</summary>
      <param name="location">Emplacement pour la redirection.</param>
      <param name="request">Message de requête ayant entraîné ce résultat.</param>
    </member>
    <member name="M:System.Web.Http.Results.RedirectResult.#ctor(System.Uri,System.Web.Http.ApiController)">
      <summary>Initialise une nouvelle instance de la classe &lt;voir cref="T:System.Net.Http.ObjectContent`1" /&gt; avec les valeurs fournies.</summary>
      <param name="location">Emplacement pour la redirection.</param>
      <param name="controller">Contrôleur à partir duquel obtenir les dépendances nécessaires pour l'exécution.</param>
    </member>
    <member name="M:System.Web.Http.Results.RedirectResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.RedirectResult.Location">
      <summary>Obtient l'emplacement où le contenu a été créé.</summary>
      <returns>Retourne <see cref="T:System.Uri" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.RedirectResult.Request">
      <summary>Obtient le message de requête ayant entraîné ce résultat.</summary>
      <returns>Retourne <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
    </member>
    <member name="T:System.Web.Http.Results.RedirectToRouteResult">
      <summary>Représente un résultat d'action qui effectue une génération d'itinéraire, puis retourne une réponse &lt;voir cref="F:System.Net.HttpStatusCode.Redirect"/&gt; en cas de réussite.</summary>
    </member>
    <member name="M:System.Web.Http.Results.RedirectToRouteResult.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.ApiController)">
      <summary>Initialise une nouvelle instance de la classe &lt;voir cref="T:System.Web.Http.Results.RedirectToRouteResult"/&gt; avec les valeurs fournies.</summary>
      <param name="routeName">Nom de l'itinéraire à utiliser pour générer l'URL.</param>
      <param name="routeValues">Donnée d'itinéraire à utiliser pour générer l'URL.</param>
      <param name="controller">Contrôleur à partir duquel obtenir les dépendances nécessaires pour l'exécution.</param>
    </member>
    <member name="M:System.Web.Http.Results.RedirectToRouteResult.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.UrlHelper,System.Net.Http.HttpRequestMessage)">
      <summary>Initialise une nouvelle instance de la classe &lt;voir cref="T:System.Web.Http.Results.RedirectToRouteResult"/&gt; avec les valeurs fournies.</summary>
      <param name="routeName">Nom de l'itinéraire à utiliser pour générer l'URL.</param>
      <param name="routeValues">Donnée d'itinéraire à utiliser pour générer l'URL.</param>
      <param name="urlFactory">Fabrique à utiliser pour générer l'URL d'itinéraire.</param>
      <param name="request">Message de requête ayant entraîné ce résultat.</param>
    </member>
    <member name="M:System.Web.Http.Results.RedirectToRouteResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.RedirectToRouteResult.Request">
      <summary>Obtient le message de requête ayant entraîné ce résultat.</summary>
      <returns>Retourne <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.RedirectToRouteResult.RouteName">
      <summary>Obtient le nom de l'itinéraire à utiliser pour générer l'URL.</summary>
      <returns>Retourne <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.RedirectToRouteResult.RouteValues">
      <summary>Obtient les données d'itinéraire à utiliser pour générer l'URL.</summary>
      <returns>Retourne <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.RedirectToRouteResult.UrlFactory">
      <summary>Obtient la fabrique à utiliser pour générer l'URL d'itinéraire.</summary>
      <returns>Retourne <see cref="T:System.Web.Http.Routing.UrlHelper" />.</returns>
    </member>
    <member name="T:System.Web.Http.Results.ResponseMessageResult">
      <summary>Représente un résultat d'action qui retourne un message de réponse spécifié.</summary>
    </member>
    <member name="M:System.Web.Http.Results.ResponseMessageResult.#ctor(System.Net.Http.HttpResponseMessage)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.ResponseMessageResult" />.</summary>
      <param name="response">Message de réponse.</param>
    </member>
    <member name="M:System.Web.Http.Results.ResponseMessageResult.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.Results.ResponseMessageResult.Response">
      <summary>Obtient le message de réponse.</summary>
    </member>
    <member name="T:System.Web.Http.Results.StatusCodeResult">
      <summary>Représente un résultat d'action qui retourne un code d'état HTTP spécifié.</summary>
    </member>
    <member name="M:System.Web.Http.Results.StatusCodeResult.#ctor(System.Net.HttpStatusCode,System.Net.Http.HttpRequestMessage)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.StatusCodeResult" />.</summary>
      <param name="statusCode">Le code d'état HTTP pour le message de réponse.</param>
      <param name="request">Message de requête ayant entraîné ce résultat.</param>
    </member>
    <member name="M:System.Web.Http.Results.StatusCodeResult.#ctor(System.Net.HttpStatusCode,System.Web.Http.ApiController)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.StatusCodeResult" />.</summary>
      <param name="statusCode">Le code d'état HTTP pour le message de réponse.</param>
      <param name="controller">Contrôleur à partir duquel obtenir les dépendances nécessaires pour l'exécution.</param>
    </member>
    <member name="M:System.Web.Http.Results.StatusCodeResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Crée un message de réponse de manière asynchrone.</summary>
      <returns>Tâche qui, une fois accomplie, contient le message de réponse.</returns>
      <param name="cancellationToken">Jeton permettant de surveiller les demandes d'annulation.</param>
    </member>
    <member name="P:System.Web.Http.Results.StatusCodeResult.Request">
      <summary>Obtient le message de requête ayant entraîné ce résultat.</summary>
      <returns>Message de requête ayant entraîné ce résultat.</returns>
    </member>
    <member name="P:System.Web.Http.Results.StatusCodeResult.StatusCode">
      <summary>Obtient le code d'état HTTP pour le message de réponse.</summary>
      <returns>Le code d'état HTTP pour le message de réponse.</returns>
    </member>
    <member name="T:System.Web.Http.Results.UnauthorizedResult">
      <summary>Représente un résultat d'action qui retourne une réponse <see cref="F:System.Net.HttpStatusCode.Unauthorized" /> vide. </summary>
    </member>
    <member name="M:System.Web.Http.Results.UnauthorizedResult.#ctor(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue},System.Net.Http.HttpRequestMessage)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.StatusCodeResult" />. </summary>
      <param name="challenges">Challenges WWW-Authenticate.</param>
      <param name="request">Message de requête ayant entraîné ce résultat.</param>
    </member>
    <member name="M:System.Web.Http.Results.UnauthorizedResult.#ctor(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue},System.Web.Http.ApiController)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Results.StatusCodeResult" />. </summary>
      <param name="challenges">Challenges WWW-Authenticate.</param>
      <param name="controller">Contrôleur à partir duquel obtenir les dépendances nécessaires pour l'exécution.</param>
    </member>
    <member name="P:System.Web.Http.Results.UnauthorizedResult.Challenges">
      <summary>Obtient les challenges WWW-Authenticate.</summary>
      <returns>Retourne <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
    </member>
    <member name="M:System.Web.Http.Results.UnauthorizedResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.UnauthorizedResult.Request">
      <summary>Obtient le message de requête ayant entraîné ce résultat.</summary>
      <returns>Retourne <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.DefaultDirectRouteProvider">
      <summary>Implémentation par défaut de <see cref="T:System.Web.Http.Routing.IDirectRouteProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.#ctor"></member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.GetActionDirectRoutes(System.Web.Http.Controllers.HttpActionDescriptor,System.Collections.Generic.IReadOnlyList{System.Web.Http.Routing.IDirectRouteFactory},System.Web.Http.Routing.IInlineConstraintResolver)">
      <summary>Crée des instances <see cref="T:System.Web.Http.Routing.RouteEntry" /> en fonction des fabriques et action fournies.Les entrées d'itinéraire fournissent le routage direct vers l'action fournie.</summary>
      <returns>Ensemble d'entrées d'itinéraire.</returns>
      <param name="actionDescriptor">Descripteur de l'action.</param>
      <param name="factories">Fabriques d'itinéraire direct.</param>
      <param name="constraintResolver">Programme de résolution de contrainte.</param>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.GetActionRouteFactories(System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>Obtient un ensemble de fabriques d'itinéraire pour le descripteur d'action donné.</summary>
      <returns>Ensemble de fabriques d'itinéraire.</returns>
      <param name="actionDescriptor">Descripteur de l'action.</param>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.GetControllerDirectRoutes(System.Web.Http.Controllers.HttpControllerDescriptor,System.Collections.Generic.IReadOnlyList{System.Web.Http.Controllers.HttpActionDescriptor},System.Collections.Generic.IReadOnlyList{System.Web.Http.Routing.IDirectRouteFactory},System.Web.Http.Routing.IInlineConstraintResolver)">
      <summary>Crée des instances <see cref="T:System.Web.Http.Routing.RouteEntry" /> en fonction des fabriques, du contrôleur et des action indiquées.Les entrées d'itinéraire fournissaient le routage direct vers le contrôleur indiqué et peuvent atteindre l'ensemble d'actions données.</summary>
      <returns>Ensemble d'entrées d'itinéraire.</returns>
      <param name="controllerDescriptor">Descripteur du contrôleur.</param>
      <param name="actionDescriptors">Descripteurs de l'action.</param>
      <param name="factories">Fabriques d'itinéraire direct.</param>
      <param name="constraintResolver">Programme de résolution de contrainte.</param>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.GetControllerRouteFactories(System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>Obtient les fabriques d'itinéraire pour le descripteur de contrôleur donné.</summary>
      <returns>Ensemble de fabriques d'itinéraire.</returns>
      <param name="controllerDescriptor">Descripteur du contrôleur.</param>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.GetDirectRoutes(System.Web.Http.Controllers.HttpControllerDescriptor,System.Collections.Generic.IReadOnlyList{System.Web.Http.Controllers.HttpActionDescriptor},System.Web.Http.Routing.IInlineConstraintResolver)">
      <summary>Obtient les itinéraires directs pour le descripteur de contrôleur donné et les descripteurs d'action en fonction des attributs <see cref="T:System.Web.Http.Routing.IDirectRouteFactory" />.</summary>
      <returns>Ensemble d'entrées d'itinéraire.</returns>
      <param name="controllerDescriptor">Descripteur du contrôleur.</param>
      <param name="actionDescriptors">Descripteurs d'action pour toutes les actions.</param>
      <param name="constraintResolver">Programme de résolution de contrainte.</param>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.GetRoutePrefix(System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>Obtient le préfixe d'itinéraire du contrôleur indiqué.</summary>
      <returns>Préfixe d'itinéraire ou null.</returns>
      <param name="controllerDescriptor">Descripteur du contrôleur.</param>
    </member>
    <member name="T:System.Web.Http.Routing.DefaultInlineConstraintResolver">
      <summary>Implémentation par défaut de <see cref="T:System.Web.Http.Routing.IInlineConstraintResolver" />.Résout des contraintes en analysant une clé de contrainte et des arguments de contrainte, en utilisant un mappage pour résoudre le type de contrainte, et en appelant un constructeur approprié pour le type de contrainte.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultInlineConstraintResolver.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.DefaultInlineConstraintResolver" />.</summary>
    </member>
    <member name="P:System.Web.Http.Routing.DefaultInlineConstraintResolver.ConstraintMap">
      <summary> Obtient le dictionnaire mutable qui mappe les clés de contrainte à un type de contrainte particulier. </summary>
      <returns>Dictionnaire mutable qui mappe les clés de contrainte à un type de contrainte particulier.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultInlineConstraintResolver.ResolveConstraint(System.String)">
      <summary>Résout la contrainte en ligne.</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.IHttpRouteConstraint" /> dans laquelle la contrainte a été résolue.</returns>
      <param name="inlineConstraint">Contrainte en ligne à résoudre.</param>
    </member>
    <member name="T:System.Web.Http.Routing.DirectRouteFactoryContext">
      <summary>Représente un contexte qui prend en charge la création d'un itinéraire direct.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.DirectRouteFactoryContext.#ctor(System.String,System.Collections.Generic.IReadOnlyCollection{System.Web.Http.Controllers.HttpActionDescriptor},System.Web.Http.Routing.IInlineConstraintResolver,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.DirectRouteFactoryContext" />.</summary>
      <param name="prefix">Le préfixe d'itinéraire défini par le contrôleur, le cas échéant.</param>
      <param name="actions">Descripteurs d'action pour lesquels créer un itinéraire.</param>
      <param name="inlineConstraintResolver">Programme de résolution de contrainte en ligne.</param>
      <param name="targetIsAction">Valeur indiquant si l'itinéraire est configuré au niveau action ou contrôleur.</param>
    </member>
    <member name="P:System.Web.Http.Routing.DirectRouteFactoryContext.Actions">
      <summary>Obtient les descripteurs d'action pour lesquels créer un itinéraire.</summary>
      <returns>Descripteurs d'action pour lesquels créer un itinéraire.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.DirectRouteFactoryContext.CreateBuilder(System.String)">
      <summary>Crée un générateur d'itinéraire pouvant générer un itinéraire correspondant à ce contexte.</summary>
      <returns>Générateur d'itinéraire pouvant générer un itinéraire correspondant à ce contexte.</returns>
      <param name="template">Modèle d'itinéraire.</param>
    </member>
    <member name="M:System.Web.Http.Routing.DirectRouteFactoryContext.CreateBuilder(System.String,System.Web.Http.Routing.IInlineConstraintResolver)">
      <summary>Crée un générateur d'itinéraire pouvant générer un itinéraire correspondant à ce contexte.</summary>
      <returns>Générateur d'itinéraire pouvant générer un itinéraire correspondant à ce contexte.</returns>
      <param name="template">Modèle d'itinéraire.</param>
      <param name="constraintResolver">Le programme de résolution de contrainte en ligne à utiliser, le cas échéant ; sinon, null.</param>
    </member>
    <member name="P:System.Web.Http.Routing.DirectRouteFactoryContext.InlineConstraintResolver">
      <summary>Obtient le programme de résolution de contrainte en ligne.</summary>
      <returns>Programme de résolution de contrainte en ligne.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.DirectRouteFactoryContext.Prefix">
      <summary>Obtient le préfixe d'itinéraire défini par le contrôleur, le cas échéant.</summary>
      <returns>Le préfixe d'itinéraire défini par le contrôleur, le cas échéant.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.DirectRouteFactoryContext.TargetIsAction">
      <summary>Obtient une valeur indiquant si l'itinéraire est configuré au niveau action ou contrôleur.</summary>
      <returns>true quand l'itinéraire est configuré au niveau action ; sinon, false (si l'itinéraire est configuré au niveau contrôleur).</returns>
    </member>
    <member name="T:System.Web.Http.Routing.HttpMethodConstraint">
      <summary>Permet de définir les verbes HTTP qui sont autorisés lorsque le routage ASP.NET détermine si une URL correspond à un itinéraire.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpMethodConstraint.#ctor(System.Net.Http.HttpMethod[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.HttpMethodConstraint" /> en utilisant les verbes HTTP autorisés pour l'itinéraire.</summary>
      <param name="allowedMethods">Verbes HTTP valides pour l'itinéraire.</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpMethodConstraint.AllowedMethods">
      <summary>Obtient ou définit la collection de verbes HTTP autorisés pour l'itinéraire.</summary>
      <returns>Collection de verbes HTTP autorisés pour l'itinéraire.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.HttpMethodConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Détermine si la demande a été effectuée avec l'un des verbes HTTP autorisés pour l'itinéraire.</summary>
      <returns>Lorsque le routage ASP.NET traite une demande, true si la demande a été effectuée à l'aide d'un verbe HTTP autorisé ; sinon, false. Lorsque le routage ASP.NET construit une URL, true si les valeurs fournies contiennent un verbe HTTP correspondant à l'un de ceux autorisés ; sinon, false. La valeur par défaut est true.</returns>
      <param name="request">Demande vérifiée de manière à déterminer si elle correspond à l'URL.</param>
      <param name="route">Objet vérifié de manière à déterminer s'il correspond à l'URL.</param>
      <param name="parameterName">Nom du paramètre vérifié.</param>
      <param name="values">Objet qui contient les paramètres d'un itinéraire.</param>
      <param name="routeDirection">Objet qui indique si le contrôle des contraintes est effectué lorsqu'une demande entrante est traitée ou lorsqu'une URL est générée.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpMethodConstraint.System#Web#Http#Routing#IHttpRouteConstraint#Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Détermine si la demande a été effectuée avec l'un des verbes HTTP autorisés pour l'itinéraire.</summary>
      <returns>Lorsque le routage ASP.NET traite une demande, true si la demande a été effectuée à l'aide d'un verbe HTTP autorisé ; sinon, false. Lorsque le routage ASP.NET construit une URL, true si les valeurs fournies contiennent un verbe HTTP correspondant à l'un de ceux autorisés ; sinon, false. La valeur par défaut est true.</returns>
      <param name="request">Demande vérifiée de manière à déterminer si elle correspond à l'URL.</param>
      <param name="route">Objet vérifié de manière à déterminer s'il correspond à l'URL.</param>
      <param name="parameterName">Nom du paramètre vérifié.</param>
      <param name="values">Objet qui contient les paramètres d'un itinéraire.</param>
      <param name="routeDirection">Objet qui indique si le contrôle des contraintes est effectué lorsqu'une demande entrante est traitée ou lorsqu'une URL est générée.</param>
    </member>
    <member name="T:System.Web.Http.Routing.HttpRoute">
      <summary>Représente une classe d'itinéraire pour l'auto-hébergement (c.-à-d.hébergement hors d'ASP.NET).</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.HttpRoute" />.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.HttpRoute" />.</summary>
      <param name="routeTemplate">Modèle d'itinéraire.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor(System.String,System.Web.Http.Routing.HttpRouteValueDictionary)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.HttpRoute" />.</summary>
      <param name="routeTemplate">Modèle d'itinéraire.</param>
      <param name="defaults">Valeurs par défaut des paramètres d'itinéraire.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor(System.String,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.HttpRoute" />.</summary>
      <param name="routeTemplate">Modèle d'itinéraire.</param>
      <param name="defaults">Valeurs par défaut des paramètres d'itinéraire.</param>
      <param name="constraints">Contraintes des paramètres d'itinéraire.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor(System.String,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.HttpRoute" />.</summary>
      <param name="routeTemplate">Modèle d'itinéraire.</param>
      <param name="defaults">Valeurs par défaut des paramètres d'itinéraire.</param>
      <param name="constraints">Contraintes des paramètres d'itinéraire.</param>
      <param name="dataTokens">Tout jeton supplémentaire des paramètres d'itinéraire.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor(System.String,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary,System.Net.Http.HttpMessageHandler)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.HttpRoute" />.</summary>
      <param name="routeTemplate">Modèle d'itinéraire.</param>
      <param name="defaults">Valeurs par défaut des paramètres d'itinéraire.</param>
      <param name="constraints">Contraintes des paramètres d'itinéraire.</param>
      <param name="dataTokens">Tout jeton supplémentaire des paramètres d'itinéraire.</param>
      <param name="handler">Gestionnaire de messages qui sera le destinataire de la demande.</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRoute.Constraints">
      <summary>Obtient les contraintes pour les paramètres d'itinéraire.</summary>
      <returns>Contraintes des paramètres d'itinéraire.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRoute.DataTokens">
      <summary>Obtient des jetons de données supplémentaires qui ne sont pas directement utilisés pour déterminer si l'itinéraire correspond à un <see cref="T:System.Net.Http.HttpRequestMessage" /> entrant.</summary>
      <returns>Jetons de données supplémentaires qui ne sont pas directement utilisés pour déterminer si l'itinéraire correspond à un <see cref="T:System.Net.Http.HttpRequestMessage" /> entrant.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRoute.Defaults">
      <summary>Obtient les valeurs par défaut pour les paramètres d'itinéraire si celles-ci ne sont pas fournies par le <see cref="T:System.Net.Http.HttpRequestMessage" /> entrant.</summary>
      <returns>Valeurs par défaut des paramètres d'itinéraire si celles-ci ne sont pas fournies par le <see cref="T:System.Net.Http.HttpRequestMessage" /> entrant.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.GetRouteData(System.String,System.Net.Http.HttpRequestMessage)">
      <summary>Détermine si cet itinéraire est une correspondance pour la demande entrante en recherchant les données <see cref="T:System.Web.Http.Routing.HttpRouteData" /> de l'itinéraire.</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.HttpRouteData" /> d'un itinéraire en cas de correspondance ; sinon null.</returns>
      <param name="virtualPathRoot">Racine du chemin d'accès virtuel.</param>
      <param name="request">Requête HTTP.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.GetVirtualPath(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Tente de générer un URI qui représente les valeurs transmises en fonction des valeurs actuelles des <see cref="T:System.Web.Http.Routing.HttpRouteData" /> et des nouvelles valeurs à l'aide du <see cref="T:System.Web.Http.Routing.HttpRoute" /> spécifié.</summary>
      <returns>Instance <see cref="T:System.Web.Http.Routing.HttpVirtualPathData" /> ou valeur null si l'URI ne peut pas être généré.</returns>
      <param name="request">Message de la requête HTTP.</param>
      <param name="values">Valeurs d'itinéraire.</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRoute.Handler">
      <summary>Obtient ou définit le gestionnaire d'itinéraire HTTP.</summary>
      <returns>Gestionnaire d'itinéraire HTTP.</returns>
    </member>
    <member name="F:System.Web.Http.Routing.HttpRoute.HttpRouteKey">
      <summary>Spécifie la clé d'itinéraire HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.ProcessConstraint(System.Net.Http.HttpRequestMessage,System.Object,System.String,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Indique si cette instance correspond à un itinéraire spécifié.</summary>
      <returns>true si cette instance correspond à un itinéraire spécifié ; sinon, false.</returns>
      <param name="request">Requête HTTP.</param>
      <param name="constraint">Contraintes des paramètres d'itinéraire.</param>
      <param name="parameterName">Nom du paramètre.</param>
      <param name="values">Liste des valeurs de paramètre.</param>
      <param name="routeDirection">Une des valeurs d'énumération de l'énumération <see cref="System.Web.Http.Routing.HttpRouteDirection" />.</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRoute.RouteTemplate">
      <summary>Obtient le modèle d'itinéraire décrivant le modèle d'URI à rechercher.</summary>
      <returns>Modèle d'itinéraire décrivant le modèle d'URI à rechercher.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.HttpRouteData">
      <summary>Encapsule les informations sur l'itinéraire HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteData.#ctor(System.Web.Http.Routing.IHttpRoute)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.HttpRouteData" />.</summary>
      <param name="route">Objet qui définit l'itinéraire.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteData.#ctor(System.Web.Http.Routing.IHttpRoute,System.Web.Http.Routing.HttpRouteValueDictionary)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.HttpRouteData" />.</summary>
      <param name="route">Objet qui définit l'itinéraire.</param>
      <param name="values">Valeur.</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRouteData.Route">
      <summary>Obtient l'objet qui représente l'itinéraire.</summary>
      <returns>objet qui représente l'itinéraire.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRouteData.Values">
      <summary>Obtient une collection de valeurs de paramètres d'URL et de valeurs par défaut pour l'itinéraire.</summary>
      <returns>Objet contenant des valeurs analysées à partir de l'URL et des valeurs par défaut.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.HttpRouteDataExtensions">
      <summary>Supprime tous les paramètres facultatifs qui n'ont pas de valeur des données d'itinéraire.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteDataExtensions.GetSubRoutes(System.Web.Http.Routing.IHttpRouteData)">
      <summary>Si un itinéraire est vraiment une union d'autres itinéraires, retourne l'ensemble de sous-itinéraires.</summary>
      <returns>Retourne l'ensemble de sous-itinéraires contenus dans cet itinéraire.</returns>
      <param name="routeData">Données d'itinéraires d'union.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteDataExtensions.RemoveOptionalRoutingParameters(System.Web.Http.Routing.IHttpRouteData)">
      <summary>Supprime tous les paramètres facultatifs qui n'ont pas de valeur des données d'itinéraire.</summary>
      <param name="routeData">Les données d'itinéraire, à muter sur place.</param>
    </member>
    <member name="T:System.Web.Http.Routing.HttpRouteDirection">
      <summary>Spécifie une énumération du sens de l'itinéraire.</summary>
    </member>
    <member name="F:System.Web.Http.Routing.HttpRouteDirection.UriGeneration">
      <summary>Itinéraire UriResolution.</summary>
    </member>
    <member name="F:System.Web.Http.Routing.HttpRouteDirection.UriResolution">
      <summary>Sens UriResolution.</summary>
    </member>
    <member name="T:System.Web.Http.Routing.HttpRouteValueDictionary">
      <summary>Représente une classe d'itinéraire pour l'auto-hébergement de paires clé/valeur spécifiées.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteValueDictionary.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.HttpRouteValueDictionary" />.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteValueDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.HttpRouteValueDictionary" />.</summary>
      <param name="dictionary">Dictionnaire.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteValueDictionary.#ctor(System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.HttpRouteValueDictionary" />.</summary>
      <param name="values">Valeur clé.</param>
    </member>
    <member name="T:System.Web.Http.Routing.HttpVirtualPathData">
      <summary>Présente les données concernant le chemin virtuel HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpVirtualPathData.#ctor(System.Web.Http.Routing.IHttpRoute,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.HttpVirtualPathData" />.</summary>
      <param name="route">Itinéraire du chemin d'accès virtuel.</param>
      <param name="virtualPath">URL créée à partir de la définition de l'itinéraire.</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpVirtualPathData.Route">
      <summary>Obtient ou définit l'itinéraire du chemin d'accès virtuel.</summary>
      <returns>Itinéraire du chemin d'accès virtuel.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.HttpVirtualPathData.VirtualPath">
      <summary>Obtient ou définit l'URL créée à partir de la définition de l'itinéraire.</summary>
      <returns>URL créée à partir de la définition de l'itinéraire.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.IDirectRouteBuilder">
      <summary>Définit un générateur qui crée des itinéraires directs vers les actions (itinéraires d'attribut).</summary>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Actions">
      <summary>Obtient les descripteurs d'action pour lesquels créer un itinéraire.</summary>
      <returns>Descripteurs d'action pour lesquels créer un itinéraire.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.IDirectRouteBuilder.Build">
      <summary>Crée une entrée d'itinéraire sur les valeurs de propriétés actuelles.</summary>
      <returns>Entrée d'itinéraire créée.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Constraints">
      <summary>Obtient ou définit les contraintes d'itinéraire.</summary>
      <returns>Contraintes d'itinéraire.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.DataTokens">
      <summary>Obtient ou définit les jetons de données d'itinéraire.</summary>
      <returns>Jetons de données d'itinéraire.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Defaults">
      <summary>Obtient ou définit les valeurs d'itinéraire par défaut.</summary>
      <returns>Valeurs par défaut d'itinéraire.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Name">
      <summary>Obtient ou définit le nom de l'itinéraire, le cas échéant ; sinon, null.</summary>
      <returns>Nom de l'itinéraire, le cas échéant ; sinon, null.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Order">
      <summary>Obtient ou définit l'ordre de l'itinéraire.</summary>
      <returns>Ordre de l'itinéraire.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Precedence">
      <summary>Obtient ou définit la précédence d'itinéraire.</summary>
      <returns>Précédence d'itinéraire.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.TargetIsAction">
      <summary>Obtient une valeur indiquant si l'itinéraire est configuré au niveau action ou contrôleur.</summary>
      <returns>true quand l'itinéraire est configuré au niveau action ; sinon, false (si l'itinéraire est configuré au niveau contrôleur).</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Template">
      <summary>Obtient ou définit le modèle de l'itinéraire.</summary>
      <returns>Modèle d'itinéraire.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.IDirectRouteFactory">
      <summary>Définit une fabrique qui crée un itinéraire directement vers un ensemble de descripteurs d'action (un itinéraire d'attribut).</summary>
    </member>
    <member name="M:System.Web.Http.Routing.IDirectRouteFactory.CreateRoute(System.Web.Http.Routing.DirectRouteFactoryContext)">
      <summary>Crée une entrée d'itinéraire direct.</summary>
      <returns>Entrée de l'itinéraire direct.</returns>
      <param name="context">Contexte à utiliser pour créer l'itinéraire.</param>
    </member>
    <member name="T:System.Web.Http.Routing.IDirectRouteProvider">
      <summary>Définit un fournisseur pour les itinéraires qui ciblent directement les descripteurs d'action (itinéraires d'attribut).</summary>
    </member>
    <member name="M:System.Web.Http.Routing.IDirectRouteProvider.GetDirectRoutes(System.Web.Http.Controllers.HttpControllerDescriptor,System.Collections.Generic.IReadOnlyList{System.Web.Http.Controllers.HttpActionDescriptor},System.Web.Http.Routing.IInlineConstraintResolver)">
      <summary>Obtient les itinéraires directs pour un contrôleur.</summary>
      <returns>Un ensemble d'entrées d'itinéraire pour le contrôleur.</returns>
      <param name="controllerDescriptor">Descripteur du contrôleur.</param>
      <param name="actionDescriptors">Descripteurs de l'action.</param>
      <param name="constraintResolver">Programme de résolution de contrainte en ligne.</param>
    </member>
    <member name="T:System.Web.Http.Routing.IHttpRoute">
      <summary>
        <see cref="T:System.Web.Http.Routing.IHttpRoute" /> définit l'interface pour un itinéraire décrivant le mappage d'un <see cref="T:System.Net.Http.HttpRequestMessage" /> entrant sur une action et un contrôleur particuliers. </summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRoute.Constraints">
      <summary> Obtient les contraintes pour les paramètres d'itinéraire. </summary>
      <returns>Contraintes des paramètres d'itinéraire.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRoute.DataTokens">
      <summary> Obtient des jetons de données supplémentaires qui ne sont pas directement utilisés pour déterminer si l'itinéraire correspond à un <see cref="T:System.Net.Http.HttpRequestMessage" /> entrant. </summary>
      <returns>Jetons de données supplémentaires.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRoute.Defaults">
      <summary> Obtient les valeurs par défaut pour les paramètres d'itinéraire si celles-ci ne sont pas fournies par le <see cref="T:System.Net.Http.HttpRequestMessage" /> entrant. </summary>
      <returns>Valeurs par défaut des paramètres d'itinéraire.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.IHttpRoute.GetRouteData(System.String,System.Net.Http.HttpRequestMessage)">
      <summary> Détermine si cet itinéraire est une correspondance pour la demande entrante en recherchant les &lt;see cref="!:IRouteData" /&gt; pour l'itinéraire. </summary>
      <returns>&lt;see cref="!:RouteData" /&gt; pour un itinéraire correspondant ; sinon, null.</returns>
      <param name="virtualPathRoot">Racine du chemin d'accès virtuel.</param>
      <param name="request">Demande.</param>
    </member>
    <member name="M:System.Web.Http.Routing.IHttpRoute.GetVirtualPath(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Obtient des données de chemin d'accès virtuel en fonction de l'itinéraire et des valeurs fournis.</summary>
      <returns>Données de chemin d'accès virtuel.</returns>
      <param name="request">Message de requête.</param>
      <param name="values">Valeurs.</param>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRoute.Handler">
      <summary>Obtient le gestionnaire de messages qui sera le destinataire de la demande.</summary>
      <returns>Gestionnaire de messages.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRoute.RouteTemplate">
      <summary> Obtient le modèle d'itinéraire décrivant le modèle d'URI à rechercher.  </summary>
      <returns>Modèle d'itinéraire.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.IHttpRouteConstraint">
      <summary>Représente une contrainte de classe d'itinéraire de base.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.IHttpRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Indique si cette instance correspond à un itinéraire spécifié.</summary>
      <returns>True si cette instance correspond à un itinéraire spécifié ; sinon, false.</returns>
      <param name="request">Demande.</param>
      <param name="route">Itinéraire à comparer.</param>
      <param name="parameterName">Nom du paramètre.</param>
      <param name="values">Liste de valeurs de paramètre.</param>
      <param name="routeDirection">Sens de l'itinéraire.</param>
    </member>
    <member name="T:System.Web.Http.Routing.IHttpRouteData">
      <summary>Fournit des informations sur un itinéraire.</summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRouteData.Route">
      <summary>Obtient l'objet qui représente l'itinéraire.</summary>
      <returns>Objet qui représente l'itinéraire.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRouteData.Values">
      <summary>Obtient une collection de valeurs de paramètres d'URL et de valeurs par défaut pour l'itinéraire.</summary>
      <returns>Valeurs de paramètres d'URL et par défaut analysées.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.IHttpRouteInfoProvider">
      <summary> Fournit des informations pour la définition d'un itinéraire. </summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRouteInfoProvider.Name">
      <summary> Obtient le nom de l'itinéraire à générer. </summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRouteInfoProvider.Order">
      <summary> Obtient l'ordre de l'itinéraire par rapport à d'autres itinéraires. </summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRouteInfoProvider.Template">
      <summary> Obtient le modèle d'itinéraire décrivant le modèle d'URI à rechercher. </summary>
    </member>
    <member name="T:System.Web.Http.Routing.IHttpVirtualPathData">
      <summary>Définit les propriétés de l'itinéraire HTTP.</summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpVirtualPathData.Route">
      <summary>Obtient l'itinéraire HTTP.</summary>
      <returns>Itinéraire HTTP.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpVirtualPathData.VirtualPath">
      <summary>Obtient l'URI qui représente le chemin virtuel de l'itinéraire HTTP actuel.</summary>
      <returns>URI représentant le chemin virtuel de l'itinéraire HTTP actuel.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.IInlineConstraintResolver">
      <summary> Définit une abstraction pour la résolution de contraintes en ligne comme de instances de <see cref="T:System.Web.Http.Routing.IHttpRouteConstraint" />. </summary>
    </member>
    <member name="M:System.Web.Http.Routing.IInlineConstraintResolver.ResolveConstraint(System.String)">
      <summary> Résout la contrainte en ligne. </summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.IHttpRouteConstraint" /> dans laquelle la contrainte a été résolue.</returns>
      <param name="inlineConstraint">Contrainte en ligne à résoudre.</param>
    </member>
    <member name="T:System.Web.Http.Routing.IRoutePrefix">
      <summary>Définit un préfixe d'itinéraire.</summary>
    </member>
    <member name="P:System.Web.Http.Routing.IRoutePrefix.Prefix">
      <summary>Obtient le préfixe d'itinéraire.</summary>
      <returns>Préfixe d'itinéraire.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.RouteEntry">
      <summary>Représente un itinéraire nommé.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.RouteEntry.#ctor(System.String,System.Web.Http.Routing.IHttpRoute)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.RouteEntry" />.</summary>
      <param name="name">Nom de l'itinéraire, le cas échéant ; sinon, null.</param>
      <param name="route">Itinéraire.</param>
    </member>
    <member name="P:System.Web.Http.Routing.RouteEntry.Name">
      <summary>Obtient le nom de l'itinéraire, le cas échéant ; sinon, null.</summary>
      <returns>Nom de l'itinéraire, le cas échéant ; sinon, null.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.RouteEntry.Route">
      <summary>Obtient l'itinéraire.</summary>
      <returns>Itinéraire.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.RouteFactoryAttribute">
      <summary>Représente un itinéraire d'attribut pouvant contenir des contraintes personnalisées.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.RouteFactoryAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.RouteFactoryAttribute" />.</summary>
      <param name="template">Modèle d'itinéraire.</param>
    </member>
    <member name="P:System.Web.Http.Routing.RouteFactoryAttribute.Constraints">
      <summary>Obtient les contraintes de l'itinéraire, le cas échéant ; sinon, null.</summary>
      <returns>Les contraintes de l'itinéraire, le cas échéant ; sinon, null.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.RouteFactoryAttribute.CreateRoute(System.Web.Http.Routing.DirectRouteFactoryContext)">
      <summary>Crée l'entrée de l'itinéraire</summary>
      <returns>Entrée d'itinéraire créée.</returns>
      <param name="context">Contexte.</param>
    </member>
    <member name="P:System.Web.Http.Routing.RouteFactoryAttribute.DataTokens">
      <summary>Obtient les jetons de données de l'itinéraire, le cas échéant ; sinon, null.</summary>
      <returns>Les jetons de données de l'itinéraire, le cas échéant ; sinon, null.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.RouteFactoryAttribute.Defaults">
      <summary>Obtient les valeurs par défaut de l'itinéraire, le cas échéant ; sinon, null.</summary>
      <returns>Les valeurs par défaut de l'itinéraire, le cas échéant ; sinon, null.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.RouteFactoryAttribute.Name">
      <summary>Obtient ou définit le nom de l'itinéraire, le cas échéant ; sinon, null.</summary>
      <returns>Nom de l'itinéraire, le cas échéant ; sinon, null.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.RouteFactoryAttribute.Order">
      <summary>Obtient ou définit l'ordre de l'itinéraire.</summary>
      <returns>Ordre de l'itinéraire.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.RouteFactoryAttribute.Template">
      <summary>Obtient le modèle d'itinéraire.</summary>
      <returns>Modèle d'itinéraire.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.StopRoutingHandler">
      <summary>Représente un gestionnaire qui spécifie que le routage ne doit pas gérer les requêtes pour un modèle d'itinéraire.Lorsqu'un itinéraire fournit cette classe comme gestionnaire, les requêtes correspondant à cet itinéraire sont ignorées.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.StopRoutingHandler.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.StopRoutingHandler" />.</summary>
    </member>
    <member name="T:System.Web.Http.Routing.UrlHelper">
      <summary>Représente une fabrique de création d'URL. </summary>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.#ctor">
      <summary> Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.UrlHelper" />. </summary>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.UrlHelper" />.</summary>
      <param name="request">Requête HTTP pour cette instance.</param>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.Content(System.String)">
      <summary>Crée une URL absolue à l'aide du chemin d'accès spécifié.</summary>
      <returns>URL générée.</returns>
      <param name="path">Chemin d'accès de l'URL qui peut être une URL relative, une URL associée à une racine ou un chemin d'accès virtuel.</param>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.Link(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Renvoie un lien pour l'itinéraire spécifié.</summary>
      <returns>Lien pour l'itinéraire spécifié.</returns>
      <param name="routeName">Nom de l'itinéraire.</param>
      <param name="routeValues">Objet qui contient les paramètres d'un itinéraire.</param>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.Link(System.String,System.Object)">
      <summary>Renvoie un lien pour l'itinéraire spécifié.</summary>
      <returns>Lien pour l'itinéraire spécifié.</returns>
      <param name="routeName">Nom de l'itinéraire.</param>
      <param name="routeValues">Valeur d'itinéraire.</param>
    </member>
    <member name="P:System.Web.Http.Routing.UrlHelper.Request">
      <summary>Obtient ou définit le <see cref="T:System.Net.Http.HttpRequestMessage" /> de l'instance <see cref="T:System.Web.Http.Routing.UrlHelper" /> actuelle.</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpRequestMessage" /> de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.Route(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Retourne l'itinéraire pour le <see cref="T:System.Web.Http.Routing.UrlHelper" />.</summary>
      <returns>Itinéraire pour le <see cref="T:System.Web.Http.Routing.UrlHelper" />.</returns>
      <param name="routeName">Nom de l'itinéraire.</param>
      <param name="routeValues">Liste de valeurs d'itinéraire.</param>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.Route(System.String,System.Object)">
      <summary>Retourne l'itinéraire pour le <see cref="T:System.Web.Http.Routing.UrlHelper" />.</summary>
      <returns>Itinéraire pour le <see cref="T:System.Web.Http.Routing.UrlHelper" />.</returns>
      <param name="routeName">Nom de l'itinéraire.</param>
      <param name="routeValues">Valeurs d'itinéraire.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.AlphaRouteConstraint">
      <summary>Contraint un paramètre d'itinéraire à contenir uniquement des lettres de A à Z minuscules ou majuscules de l'alphabet anglais.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.AlphaRouteConstraint.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.Constraints.AlphaRouteConstraint" />.</summary>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.BoolRouteConstraint">
      <summary>Contraint un paramètre d'itinéraire à représenter uniquement des valeurs booléennes.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.BoolRouteConstraint.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.Constraints.BoolRouteConstraint" />.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.BoolRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Indique si cette instance correspond à un itinéraire spécifié.</summary>
      <returns>true si cette instance correspond à un itinéraire spécifié ; sinon, false.</returns>
      <param name="request">Demande.</param>
      <param name="route">Itinéraire à comparer.</param>
      <param name="parameterName">Nom du paramètre.</param>
      <param name="values">Liste de valeurs de paramètre.</param>
      <param name="routeDirection">Sens de l'itinéraire.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.CompoundRouteConstraint">
      <summary>Force un itinéraire à l'aide de plusieurs contraintes enfant.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.CompoundRouteConstraint.#ctor(System.Collections.Generic.IList{System.Web.Http.Routing.IHttpRouteConstraint})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.Constraints.CompoundRouteConstraint" />.</summary>
      <param name="constraints">Contraintes enfant qui doivent correspondre pour que cette contrainte corresponde.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.CompoundRouteConstraint.Constraints">
      <summary>Obtient les contraintes enfant qui doivent correspondre pour que cette contrainte corresponde.</summary>
      <returns>Contraintes enfant qui doivent correspondre pour que cette contrainte corresponde.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.CompoundRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Indique si cette instance correspond à un itinéraire spécifié.</summary>
      <returns>true si cette instance correspond à un itinéraire spécifié ; sinon, false.</returns>
      <param name="request">Demande.</param>
      <param name="route">Itinéraire à comparer.</param>
      <param name="parameterName">Nom du paramètre.</param>
      <param name="values">Liste de valeurs de paramètre.</param>
      <param name="routeDirection">Sens de l'itinéraire.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.DateTimeRouteConstraint">
      <summary>Contraint un paramètre d'itinéraire à représenter uniquement des valeurs <see cref="T:System.DateTime" />.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.DateTimeRouteConstraint.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.Constraints.DateTimeRouteConstraint" />.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.DateTimeRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Indique si cette instance correspond à un itinéraire spécifié.</summary>
      <returns>true si cette instance correspond à un itinéraire spécifié ; sinon, false.</returns>
      <param name="request">Demande.</param>
      <param name="route">Itinéraire à comparer.</param>
      <param name="parameterName">Nom du paramètre.</param>
      <param name="values">Liste de valeurs de paramètre.</param>
      <param name="routeDirection">Itinéraire de direction.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.DecimalRouteConstraint">
      <summary>Contraint un paramètre d'itinéraire à représenter uniquement des valeurs décimales.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.DecimalRouteConstraint.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.Constraints.DecimalRouteConstraint" />.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.DecimalRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Indique si cette instance correspond à un itinéraire spécifié.</summary>
      <returns>true si cette instance correspond à un itinéraire spécifié ; sinon, false.</returns>
      <param name="request">Demande.</param>
      <param name="route">Itinéraire à comparer.</param>
      <param name="parameterName">Nom du paramètre.</param>
      <param name="values">Liste de valeurs de paramètre.</param>
      <param name="routeDirection">Sens de l'itinéraire.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.DoubleRouteConstraint">
      <summary>Contraint un paramètre d'itinéraire à représenter uniquement des valeurs à virgule flottante 64 bits.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.DoubleRouteConstraint.#ctor"></member>
    <member name="M:System.Web.Http.Routing.Constraints.DoubleRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="T:System.Web.Http.Routing.Constraints.FloatRouteConstraint">
      <summary>Contraint un paramètre d'itinéraire à représenter uniquement des valeurs à virgule flottante 32 bits.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.FloatRouteConstraint.#ctor"></member>
    <member name="M:System.Web.Http.Routing.Constraints.FloatRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="T:System.Web.Http.Routing.Constraints.GuidRouteConstraint">
      <summary>Contraint un paramètre d'itinéraire à représenter uniquement des valeurs <see cref="T:System.Guid" />.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.GuidRouteConstraint.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.Constraints.GuidRouteConstraint" />.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.GuidRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Indique si cette instance correspond à un itinéraire spécifié.</summary>
      <returns>true si cette instance correspond à un itinéraire spécifié ; sinon, false.</returns>
      <param name="request">Demande.</param>
      <param name="route">Itinéraire à comparer.</param>
      <param name="parameterName">Nom du paramètre.</param>
      <param name="values">Liste de valeurs de paramètre.</param>
      <param name="routeDirection">Sens de l'itinéraire.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.IntRouteConstraint">
      <summary>Contraint un paramètre d'itinéraire à représenter uniquement des valeurs entières 32 bits.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.IntRouteConstraint.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.Constraints.IntRouteConstraint" />.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.IntRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Indique si cette instance correspond à un itinéraire spécifié.</summary>
      <returns>true si cette instance correspond à un itinéraire spécifié ; sinon, false.</returns>
      <param name="request">Demande.</param>
      <param name="route">Itinéraire à comparer.</param>
      <param name="parameterName">Nom du paramètre.</param>
      <param name="values">Liste de valeurs de paramètre.</param>
      <param name="routeDirection">Sens de l'itinéraire.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.LengthRouteConstraint">
      <summary>Contraint un paramètre d'itinéraire à être une chaîne d'une longueur donnée ou s'inscrivant dans une plage donnée de longueurs.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.LengthRouteConstraint.#ctor(System.Int32)"></member>
    <member name="M:System.Web.Http.Routing.Constraints.LengthRouteConstraint.#ctor(System.Int32,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.Constraints.LengthRouteConstraint" /> qui contraint un paramètre d'itinéraire à être une chaîne d'une longueur donnée.</summary>
      <param name="minLength">Longueur minimale du paramètre d'itinéraire.</param>
      <param name="maxLength">Longueur maximale du paramètre d'itinéraire.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.LengthRouteConstraint.Length">
      <summary>Obtient la longueur du paramètre d'itinéraire si elle est définie.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.LengthRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="P:System.Web.Http.Routing.Constraints.LengthRouteConstraint.MaxLength">
      <summary>Obtient la longueur maximale du paramètre d'itinéraire si elle est définie.</summary>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.LengthRouteConstraint.MinLength">
      <summary>Obtient la longueur minimale du paramètre d'itinéraire si elle est définie.</summary>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.LongRouteConstraint">
      <summary>Contraint un paramètre d'itinéraire à représenter uniquement des valeurs entières 64 bits.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.LongRouteConstraint.#ctor"></member>
    <member name="M:System.Web.Http.Routing.Constraints.LongRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="T:System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint">
      <summary>Contraint un paramètre d'itinéraire à être une chaîne d'une longueur maximale.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint.#ctor(System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint" />.</summary>
      <param name="maxLength">Longueur maximale.</param>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Indique si cette instance correspond à un itinéraire spécifié.</summary>
      <returns>true si cette instance correspond à un itinéraire spécifié ; sinon, false.</returns>
      <param name="request">Demande.</param>
      <param name="route">Itinéraire à comparer.</param>
      <param name="parameterName">Nom du paramètre.</param>
      <param name="values">Liste de valeurs de paramètre.</param>
      <param name="routeDirection">Sens de l'itinéraire.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint.MaxLength">
      <summary>Obtient la longueur maximale du paramètre d'itinéraire.</summary>
      <returns>Longueur maximale du paramètre d'itinéraire.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.MaxRouteConstraint">
      <summary>Contraint un paramètre d'itinéraire à être un nombre entier d'une valeur maximale.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MaxRouteConstraint.#ctor(System.Int64)"></member>
    <member name="M:System.Web.Http.Routing.Constraints.MaxRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="P:System.Web.Http.Routing.Constraints.MaxRouteConstraint.Max">
      <summary>Obtient la valeur maximale du paramètre d'itinéraire.</summary>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.MinLengthRouteConstraint">
      <summary>Contraint un paramètre d'itinéraire à être une chaîne d'une longueur maximale.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MinLengthRouteConstraint.#ctor(System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.Constraints.MinLengthRouteConstraint" />.</summary>
      <param name="minLength">Longueur minimale.</param>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MinLengthRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Indique si cette instance correspond à un itinéraire spécifié.</summary>
      <returns>true si cette instance correspond à un itinéraire spécifié ; sinon, false.</returns>
      <param name="request">Demande.</param>
      <param name="route">Itinéraire à comparer.</param>
      <param name="parameterName">Nom du paramètre.</param>
      <param name="values">Liste de valeurs de paramètre.</param>
      <param name="routeDirection">Sens de l'itinéraire.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.MinLengthRouteConstraint.MinLength">
      <summary>Obtient la longueur minimale du paramètre d'itinéraire.</summary>
      <returns>Longueur minimale du paramètre d'itinéraire.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.MinRouteConstraint">
      <summary>Contraint un paramètre d'itinéraire à être long avec une valeur minimale.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MinRouteConstraint.#ctor(System.Int64)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.Constraints.MinRouteConstraint" />.</summary>
      <param name="min">Valeur minimale du paramètre d'itinéraire.</param>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MinRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Indique si cette instance correspond à un itinéraire spécifié.</summary>
      <returns>true si cette instance correspond à un itinéraire spécifié ; sinon, false.</returns>
      <param name="request">Demande.</param>
      <param name="route">Itinéraire à comparer.</param>
      <param name="parameterName">Nom du paramètre.</param>
      <param name="values">Liste de valeurs de paramètre.</param>
      <param name="routeDirection">Sens de l'itinéraire.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.MinRouteConstraint.Min">
      <summary>Obtient la valeur minimale du paramètre d'itinéraire.</summary>
      <returns>Valeur minimale du paramètre d'itinéraire.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.OptionalRouteConstraint">
      <summary>Force un itinéraire par une contrainte interne qui n'échoue pas quand un paramètre facultatif est défini sur sa valeur par défaut.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.OptionalRouteConstraint.#ctor(System.Web.Http.Routing.IHttpRouteConstraint)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.Constraints.OptionalRouteConstraint" />.</summary>
      <param name="innerConstraint">Contrainte interne à mettre en correspondance si le paramètre n'est pas un paramètre facultatif sans valeur.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.OptionalRouteConstraint.InnerConstraint">
      <summary>Obtient la contrainte interne à mettre en correspondance si le paramètre n'est pas un paramètre facultatif sans valeur.</summary>
      <returns>Contrainte interne à mettre en correspondance si le paramètre n'est pas un paramètre facultatif sans valeur.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.OptionalRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Indique si cette instance correspond à un itinéraire spécifié.</summary>
      <returns>true si cette instance correspond à un itinéraire spécifié ; sinon, false.</returns>
      <param name="request">Demande.</param>
      <param name="route">Itinéraire à comparer.</param>
      <param name="parameterName">Nom du paramètre.</param>
      <param name="values">Liste de valeurs de paramètre.</param>
      <param name="routeDirection">Sens de l'itinéraire.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.RangeRouteConstraint">
      <summary>Contraint un paramètre d'itinéraire à être un nombre entier à l'intérieur d'une plage de valeurs.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.RangeRouteConstraint.#ctor(System.Int64,System.Int64)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.Constraints.RangeRouteConstraint" />.</summary>
      <param name="min">Valeur minimale.</param>
      <param name="max">Valeur maximale.</param>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.RangeRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Indique si cette instance correspond à un itinéraire spécifié.</summary>
      <returns>true si cette instance correspond à un itinéraire spécifié ; sinon, false.</returns>
      <param name="request">Demande.</param>
      <param name="route">Itinéraire à comparer.</param>
      <param name="parameterName">Nom du paramètre.</param>
      <param name="values">Liste de valeurs de paramètre.</param>
      <param name="routeDirection">Sens de l'itinéraire.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.RangeRouteConstraint.Max">
      <summary>Obtient la valeur maximale du paramètre d'itinéraire.</summary>
      <returns>Valeur maximale du paramètre d'itinéraire.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.RangeRouteConstraint.Min">
      <summary>Obtient la valeur minimale du paramètre d'itinéraire.</summary>
      <returns>Valeur minimale du paramètre d'itinéraire.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.RegexRouteConstraint">
      <summary>Contraint un paramètre d'itinéraire à correspondre à une expression régulières.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.RegexRouteConstraint.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Routing.Constraints.RegexRouteConstraint" />.</summary>
      <param name="pattern">Modèle.</param>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.RegexRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Indique si cette instance correspond à un itinéraire spécifié.</summary>
      <returns>true si cette instance correspond à un itinéraire spécifié ; sinon, false.</returns>
      <param name="request">Demande.</param>
      <param name="route">Itinéraire à comparer.</param>
      <param name="parameterName">Nom du paramètre.</param>
      <param name="values">Liste de valeurs de paramètre.</param>
      <param name="routeDirection">Sens de l'itinéraire.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.RegexRouteConstraint.Pattern">
      <summary>Obtient le modèle d'expression régulière pour lequel rechercher une correspondance.</summary>
      <returns>Modèle d'expression régulière pour lequel rechercher une correspondance.</returns>
    </member>
    <member name="T:System.Web.Http.Services.Decorator">
      <summary> Fournit une méthode pour récupérer l'objet le plus intérieur d'un objet qui pourrait être encapsulé par &lt;see cref="T:System.Web.Http.Services.IDecorator`1" /&gt;. </summary>
    </member>
    <member name="M:System.Web.Http.Services.Decorator.GetInner``1(``0)">
      <summary> Obtient l'objet le plus intérieur qui n'implémente pas &lt;see cref="T:System.Web.Http.Services.IDecorator`1" /&gt;. </summary>
      <param name="outer">Objet à désencapsuler.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:System.Web.Http.Services.DefaultServices">
      <summary>Représente un conteneur pour les instances de service utilisées par <see cref="T:System.Web.Http.HttpConfiguration" />.Notez que ce conteneur prend en charge uniquement les types connus et que les méthodes permettant d'obtenir ou de définir des types de services arbitraires appelées lèveront <see cref="T:System.ArgumentException" />.Pour créer des types arbitraires, veuillez utiliser <see cref="T:System.Web.Http.Dependencies.IDependencyResolver" />.Ce conteneur prend en charge les types suivants :        <see cref="T:System.Web.Http.Controllers.IActionValueBinder" /><see cref="T:System.Web.Http.Description.IApiExplorer" /><see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver" /><see cref="T:System.Web.Http.Validation.IBodyModelValidator" /><see cref="T:System.Net.Http.Formatting.IContentNegotiator" /><see cref="T:System.Web.Http.Description.IDocumentationProvider" /><see cref="T:System.Web.Http.Filters.IFilterProvider" /><see cref="T:System.Web.Http.Hosting.IHostBufferPolicySelector" /><see cref="T:System.Web.Http.Controllers.IHttpActionInvoker" /><see cref="T:System.Web.Http.Controllers.IHttpActionSelector" /><see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" /><see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector" /><see cref="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver" /><see cref="T:System.Web.Http.Tracing.ITraceManager" /><see cref="T:System.Web.Http.Tracing.ITraceWriter" /><see cref="T:System.Web.Http.Query.IStructuredQueryBuilder" /><see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" /><see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" /><see cref="T:System.Web.Http.Validation.ModelValidatorProvider" /><see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />Le passage de tout autre type ne figurant pas dans cette liste à une méthode sur cette interface lèvera une <see cref="T:System.ArgumentException" />.</summary>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Services.DefaultServices" />.</summary>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Services.DefaultServices" /> avec un objet <see cref="T:System.Web.Http.HttpConfiguration" /> spécifié.</summary>
      <param name="configuration">Objet <see cref="T:System.Web.Http.HttpConfiguration" />.</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.ClearSingle(System.Type)">
      <summary>Supprime un service à une seule instance des services par défaut.</summary>
      <param name="serviceType">Type de service.</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.GetService(System.Type)">
      <summary>Obtient un service du type spécifié.</summary>
      <returns>Première instance du service ou valeur null si le service est introuvable.</returns>
      <param name="serviceType">Type de service.</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.GetServiceInstances(System.Type)">
      <summary>Obtient la liste des objets du service pour un type de service donné et valide le type de service.</summary>
      <returns>Liste des objets de service du type spécifié.</returns>
      <param name="serviceType">Type de service.</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.GetServices(System.Type)">
      <summary>Obtient la liste des objets de service pour un type de service donné.</summary>
      <returns>Liste d'objets de service pour le type spécifié, ou liste vide si le service est introuvable.</returns>
      <param name="serviceType">Type de service.</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.IsSingleService(System.Type)">
      <summary>Envoie une requête visant à vérifier si un type de service est à une seule instance.</summary>
      <returns>true si le type de service a une instance maximum ; ou false si le type de service prend en charge plusieurs instances.</returns>
      <param name="serviceType">Type de service.</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.ReplaceSingle(System.Type,System.Object)">
      <summary>Remplace un objet de service à une seule instance.</summary>
      <param name="serviceType">Type de service.</param>
      <param name="service">Objet de service qui remplace l'instance précédente.</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.ResetCache(System.Type)">
      <summary>Supprime les valeurs mises en cache pour un seul type de service.</summary>
      <param name="serviceType">Type de service.</param>
    </member>
    <member name="T:System.Web.Http.Services.IDecorator`1">
      <summary> Définit un élément décoratif qui expose l'objet décoré interne. </summary>
      <typeparam name="T">Ce paramètre de type est covariant. Autrement dit, vous pouvez utiliser le type que vous avez spécifié ou tout type plus dérivé. Pour plus d'informations sur la covariance et la contravariance, consultez .</typeparam>
    </member>
    <member name="P:System.Web.Http.Services.IDecorator`1.Inner">
      <summary> Obtient l'objet interne. </summary>
    </member>
    <member name="T:System.Web.Http.Tracing.ITraceManager">
      <summary>Représente une classe de suivi des performances pour journaliser l'entrée/sortie de la méthode et sa durée.</summary>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceManager.Initialize(System.Web.Http.HttpConfiguration)">
      <summary>Initialise la classe <see cref="T:System.Web.Http.Tracing.ITraceManager" /> avec une configuration spécifiée.</summary>
      <param name="configuration">Configuration.</param>
    </member>
    <member name="T:System.Web.Http.Tracing.ITraceWriter">
      <summary>Représente le writer du suivi.</summary>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriter.Trace(System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.Action{System.Web.Http.Tracing.TraceRecord})">
      <summary> Appelle la traceAction spécifiée pour autoriser la définition de valeurs dans un nouveau <see cref="T:System.Web.Http.Tracing.TraceRecord" />, si le suivi est autorisé pour la catégorie et le niveau donnés uniquement. </summary>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" /> actuel.Le paramètre peut avoir la valeur null, mais dans ce cas, l'analyse de suivi ultérieure ne pourra pas mettre le suivi en corrélation avec une demande particulière.</param>
      <param name="category">Catégorie logique du suivi.Les utilisateurs peuvent définir leur propre catégorie.</param>
      <param name="level">
        <see cref="T:System.Web.Http.Tracing.TraceLevel" /> auquel écrire ce suivi.</param>
      <param name="traceAction">Action à appeler si le suivi est activé.L'appelant est censé remplir les champs du <see cref="T:System.Web.Http.Tracing.TraceRecord" /> donné dans cette action.</param>
    </member>
    <member name="T:System.Web.Http.Tracing.ITraceWriterExtensions">
      <summary>Représente des méthodes d'extension pour <see cref="T:System.Web.Http.Tracing.ITraceWriter" />. </summary>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
      <summary>Fournit un ensemble de méthodes et de propriétés qui permettent de déboguer votre code avec le writer, la requête, la catégorie et l'exception spécifiés.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" /> avec lequel associer le suivi.Le paramètre peut avoir la valeur null.</param>
      <param name="category">Catégorie logique du suivi.</param>
      <param name="exception">L'erreur s'est produite pendant l'exécution.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
      <summary>Fournit un ensemble de méthodes et de propriétés qui permettent de déboguer votre code avec le writer, la requête, la catégorie, l'exception, le format et l'argument de message spécifiés.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" /> avec lequel associer le suivi.Le paramètre peut avoir la valeur null.</param>
      <param name="category">Catégorie logique du suivi.</param>
      <param name="exception">L'erreur s'est produite pendant l'exécution.</param>
      <param name="messageFormat">Format du message.</param>
      <param name="messageArguments">Argument du message.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
      <summary>Fournit un ensemble de méthodes et de propriétés qui permettent de déboguer votre code avec le writer, la requête, la catégorie, l'exception, le format et l'argument de message spécifiés.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" /> avec lequel associer le suivi.Le paramètre peut avoir la valeur null.</param>
      <param name="category">Catégorie logique du suivi.</param>
      <param name="messageFormat">Format du message.</param>
      <param name="messageArguments">Argument du message.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
      <summary>Affiche un message d'erreur dans la liste avec le writer, la requête, la catégorie, l'exception spécifiés.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" /> avec lequel associer le suivi.Le paramètre peut avoir la valeur null.</param>
      <param name="category">Catégorie logique du suivi.</param>
      <param name="exception">L'erreur s'est produite pendant l'exécution.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
      <summary>Affiche un message d'erreur dans la liste avec le writer, la requête, la catégorie, l'exception, le format et l'argument de message spécifiés.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" /> avec lequel associer le suivi.Le paramètre peut avoir la valeur null.</param>
      <param name="category">Catégorie logique du suivi.</param>
      <param name="exception">Exception.</param>
      <param name="messageFormat">Format du message.</param>
      <param name="messageArguments">Argument du message.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
      <summary>Affiche un message d'erreur dans la liste avec le writer, la requête, la catégorie, le format et l'argument de message spécifiés.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" /> avec lequel associer le suivi.Le paramètre peut avoir la valeur null.</param>
      <param name="category">Catégorie logique du suivi.</param>
      <param name="messageFormat">Format du message.</param>
      <param name="messageArguments">Argument du message.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
      <summary>Affiche un message d'erreur dans la classe <see cref="T:System.Web.Http.Tracing.ITraceWriterExtensions" /> avec le writer, la requête, la catégorie et l'exception spécifiés.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" /> avec lequel associer le suivi.Le paramètre peut avoir la valeur null.</param>
      <param name="category">Catégorie logique du suivi.</param>
      <param name="exception">Exception qui apparaît pendant l'exécution.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
      <summary>Affiche un message d'erreur dans la classe <see cref="T:System.Web.Http.Tracing.ITraceWriterExtensions" /> avec le writer, la requête, la catégorie, l'exception, le format et l'argument de message spécifiés.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" /> avec lequel associer le suivi.Le paramètre peut avoir la valeur null.</param>
      <param name="category">Catégorie logique du suivi.</param>
      <param name="exception">Exception.</param>
      <param name="messageFormat">Format du message.</param>
      <param name="messageArguments">Argument du message.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
      <summary>Affiche un message d'erreur dans la classe <see cref="T:System.Web.Http.Tracing.ITraceWriterExtensions" /> avec le writer, la requête, la catégorie, le format et l'argument de message spécifiés.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" /> avec lequel associer le suivi.Le paramètre peut avoir la valeur null.</param>
      <param name="category">Catégorie logique du suivi.</param>
      <param name="messageFormat">Format du message.</param>
      <param name="messageArguments">Argument du message.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
      <summary>Affiche les détails dans la classe <see cref="System.Web.Http.Tracing.ITraceWriterExtensions" />.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" /> avec lequel associer le suivi.Le paramètre peut avoir la valeur null.</param>
      <param name="category">Catégorie logique du suivi.</param>
      <param name="exception">L'erreur s'est produite pendant l'exécution.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
      <summary>Affiche les détails dans la classe <see cref="System.Web.Http.Tracing.ITraceWriterExtensions" />.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" /> avec lequel associer le suivi.Le paramètre peut avoir la valeur null.</param>
      <param name="category">Catégorie logique du suivi.</param>
      <param name="exception">L'erreur s'est produite pendant l'exécution.</param>
      <param name="messageFormat">Format du message.</param>
      <param name="messageArguments">Argument du message.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
      <summary>Affiche les détails dans la classe <see cref="System.Web.Http.Tracing.ITraceWriterExtensions" />.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" /> avec lequel associer le suivi.Le paramètre peut avoir la valeur null.</param>
      <param name="category">Catégorie logique du suivi.</param>
      <param name="messageFormat">Format du message.</param>
      <param name="messageArguments">Argument du message.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.Exception)">
      <summary>Indique les écouteurs de suivi dans la collection Écouteurs.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" /> avec lequel associer le suivi.Le paramètre peut avoir la valeur null.</param>
      <param name="category">Catégorie logique du suivi.</param>
      <param name="level">Niveau du suivi.</param>
      <param name="exception">L'erreur s'est produite pendant l'exécution.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.Exception,System.String,System.Object[])">
      <summary>Indique les écouteurs de suivi dans la collection Écouteurs.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" /> avec lequel associer le suivi.Le paramètre peut avoir la valeur null.</param>
      <param name="category">Catégorie logique du suivi.</param>
      <param name="level">Niveau du suivi.</param>
      <param name="exception">L'erreur s'est produite pendant l'exécution.</param>
      <param name="messageFormat">Format du message.</param>
      <param name="messageArguments">Argument du message.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.Object[])">
      <summary>Indique les écouteurs de suivi dans la collection Écouteurs.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" /> avec lequel associer le suivi.Le paramètre peut avoir la valeur null.</param>
      <param name="category">Catégorie logique du suivi.</param>
      <param name="level">
        <see cref="T:System.Web.Http.Tracing.TraceLevel" /> du suivi.</param>
      <param name="messageFormat">Format du message.</param>
      <param name="messageArguments">Argument du message.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEnd(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Action,System.Action{System.Web.Http.Tracing.TraceRecord},System.Action{System.Web.Http.Tracing.TraceRecord})">
      <summary>Place une trace de début et de fin autour d'une opération spécifique.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" /> avec lequel associer le suivi.Le paramètre peut avoir la valeur null.</param>
      <param name="category">Catégorie logique du suivi.</param>
      <param name="level">
        <see cref="T:System.Web.Http.Tracing.TraceLevel" /> du suivi.</param>
      <param name="operatorName">Nom de l'objet exécutant l'opération.Le paramètre peut avoir la valeur null.</param>
      <param name="operationName">Nom de l'opération en cours d'exécution.Le paramètre peut avoir la valeur null.</param>
      <param name="beginTrace">
        <see cref="T:System.Action" /> à appeler avant d’exécuter l’opération, pour renseigner le <see cref="T:System.Web.Http.Tracing.TraceRecord" /> donné.Le paramètre peut avoir la valeur null.</param>
      <param name="execute">&lt;see cref="T:System.Func`1" /&gt; qui retourne la <see cref="T:System.Threading.Tasks.Task" /> qui exécutera l'opération.</param>
      <param name="endTrace">
        <see cref="T:System.Action" /> à appeler après avoir exécuté correctement l’opération, pour renseigner le <see cref="T:System.Web.Http.Tracing.TraceRecord" /> donné.Le paramètre peut avoir la valeur null.</param>
      <param name="errorTrace">
        <see cref="T:System.Action" /> à appeler si une erreur s’est produite lors de l’exécution de l’opération, pour renseigner le <see cref="T:System.Web.Http.Tracing.TraceRecord" /> donné.Le paramètre peut avoir la valeur null.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEndAsync``1(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Func{System.Threading.Tasks.Task{``0}},System.Action{System.Web.Http.Tracing.TraceRecord,``0},System.Action{System.Web.Http.Tracing.TraceRecord})">
      <summary> Place une trace de début et de fin autour d'une opération spécifique. </summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> retournée par l'opération.</returns>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" /> avec lequel associer le suivi.Le paramètre peut avoir la valeur null.</param>
      <param name="category">Catégorie logique du suivi.</param>
      <param name="level">
        <see cref="T:System.Web.Http.Tracing.TraceLevel" /> du suivi.</param>
      <param name="operatorName">Nom de l'objet exécutant l'opération.Le paramètre peut avoir la valeur null.</param>
      <param name="operationName">Nom de l'opération en cours d'exécution.Le paramètre peut avoir la valeur null.</param>
      <param name="beginTrace">
        <see cref="T:System.Action" /> à appeler avant d’exécuter l’opération, pour renseigner le <see cref="T:System.Web.Http.Tracing.TraceRecord" /> donné.Le paramètre peut avoir la valeur null.</param>
      <param name="execute">&lt;see cref="T:System.Func`1" /&gt; qui retourne la <see cref="T:System.Threading.Tasks.Task" /> qui exécutera l'opération.</param>
      <param name="endTrace">
        <see cref="T:System.Action" /> à appeler après avoir exécuté correctement l’opération, pour renseigner le <see cref="T:System.Web.Http.Tracing.TraceRecord" /> donné.Le résultat de la tâche terminée sera également transmis à cette action.Cette action peut avoir la valeur null.</param>
      <param name="errorTrace">
        <see cref="T:System.Action" /> à appeler si une erreur s’est produite lors de l’exécution de l’opération, pour renseigner le <see cref="T:System.Web.Http.Tracing.TraceRecord" /> donné.Le paramètre peut avoir la valeur null.</param>
      <typeparam name="TResult">Type de résultat produit par la <see cref="T:System.Threading.Tasks.Task" />.</typeparam>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEndAsync(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Func{System.Threading.Tasks.Task},System.Action{System.Web.Http.Tracing.TraceRecord},System.Action{System.Web.Http.Tracing.TraceRecord})">
      <summary> Place une trace de début et de fin autour d'une opération spécifique. </summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> retournée par l'opération.</returns>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" /> avec lequel associer le suivi.Le paramètre peut avoir la valeur null.</param>
      <param name="category">Catégorie logique du suivi.</param>
      <param name="level">
        <see cref="T:System.Web.Http.Tracing.TraceLevel" /> du suivi.</param>
      <param name="operatorName">Nom de l'objet exécutant l'opération.Le paramètre peut avoir la valeur null.</param>
      <param name="operationName">Nom de l'opération en cours d'exécution.Le paramètre peut avoir la valeur null.</param>
      <param name="beginTrace">
        <see cref="T:System.Action" /> à appeler avant d’exécuter l’opération, pour renseigner le <see cref="T:System.Web.Http.Tracing.TraceRecord" /> donné.Le paramètre peut avoir la valeur null.</param>
      <param name="execute">&lt;see cref="T:System.Func`1" /&gt; qui retourne la <see cref="T:System.Threading.Tasks.Task" /> qui exécutera l'opération.</param>
      <param name="endTrace">
        <see cref="T:System.Action" /> à appeler après avoir exécuté correctement l’opération, pour renseigner le <see cref="T:System.Web.Http.Tracing.TraceRecord" /> donné.Le paramètre peut avoir la valeur null.</param>
      <param name="errorTrace">
        <see cref="T:System.Action" /> à appeler si une erreur s’est produite lors de l’exécution de l’opération, pour renseigner le <see cref="T:System.Web.Http.Tracing.TraceRecord" /> donné.Le paramètre peut avoir la valeur null.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
      <summary>Indique le niveau d'avertissement de l'exécution.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" /> avec lequel associer le suivi.Le paramètre peut avoir la valeur null.</param>
      <param name="category">Catégorie logique du suivi.</param>
      <param name="exception">L'erreur s'est produite pendant l'exécution.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
      <summary>Indique le niveau d'avertissement de l'exécution.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" /> avec lequel associer le suivi.Le paramètre peut avoir la valeur null.</param>
      <param name="category">Catégorie logique du suivi.</param>
      <param name="exception">L'erreur s'est produite pendant l'exécution.</param>
      <param name="messageFormat">Format du message.</param>
      <param name="messageArguments">Argument du message.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
      <summary>Indique le niveau d'avertissement de l'exécution.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" /> avec lequel associer le suivi.Le paramètre peut avoir la valeur null.</param>
      <param name="category">Catégorie logique du suivi.</param>
      <param name="messageFormat">Format du message.</param>
      <param name="messageArguments">Argument du message.</param>
    </member>
    <member name="T:System.Web.Http.Tracing.TraceCategories">
      <summary>Spécifie une énumération de catégories de suivi.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.ActionCategory">
      <summary>Catégorie d'action.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.ControllersCategory">
      <summary>Catégorie de contrôleurs.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.FiltersCategory">
      <summary>Catégorie de filtres.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.FormattingCategory">
      <summary>Catégorie de mise en forme.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.MessageHandlersCategory">
      <summary>Catégorie de gestionnaires de messages.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.ModelBindingCategory">
      <summary>Catégorie de liaison de modèle.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.RequestCategory">
      <summary>Catégorie de la demande.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.RoutingCategory">
      <summary>Catégorie de routage.</summary>
    </member>
    <member name="T:System.Web.Http.Tracing.TraceKind">
      <summary>Spécifie le type d'opération de suivi.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceKind.Begin">
      <summary>Suivi indiquant le début d'une opération.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceKind.End">
      <summary>Suivi indiquant la fin d'une opération.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceKind.Trace">
      <summary>Suivi unique, ne fait pas partie d'une paire de suivis de début/fin.</summary>
    </member>
    <member name="T:System.Web.Http.Tracing.TraceLevel">
      <summary>Spécifie une énumération de niveau de suivi.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Debug">
      <summary>Niveau de suivi pour les suivis de débogage.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Error">
      <summary>Niveau de suivi pour les suivis d'erreur.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Fatal">
      <summary>Niveau de suivi pour les suivis critiques.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Info">
      <summary>Niveau de suivi pour les suivis d'information.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Off">
      <summary>Le suivi est désactivé.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Warn">
      <summary>Niveau de suivi pour les suivis d'avertissement.</summary>
    </member>
    <member name="T:System.Web.Http.Tracing.TraceRecord">
      <summary>Représente un enregistrement de suivi.</summary>
    </member>
    <member name="M:System.Web.Http.Tracing.TraceRecord.#ctor(System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Tracing.TraceRecord" />.</summary>
      <param name="request">Message de la demande.</param>
      <param name="category">Catégorie du suivi.</param>
      <param name="level">Niveau du suivi.</param>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Category">
      <summary>Obtient ou définit la catégorie de suivi.</summary>
      <returns>Catégorie du suivi.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Exception">
      <summary>Obtient ou définit l'exception.</summary>
      <returns>Exception.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Kind">
      <summary>Obtient ou définit le type de suivi.</summary>
      <returns>Type de suivi.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Level">
      <summary>Obtient ou définit le niveau de suivi.</summary>
      <returns>Niveau du suivi.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Message">
      <summary>Obtient ou définit le message.</summary>
      <returns>Message.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Operation">
      <summary>Obtient ou définit le nom de l'opération logique en cours d'exécution.</summary>
      <returns>Nom de l'opération logique en cours d'exécution.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Operator">
      <summary>Obtient ou définit le nom logique de l'objet effectuant l'opération.</summary>
      <returns>Nom logique de l'objet exécutant l'opération.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Properties">
      <summary>Obtient les propriétés facultatives définies par l'utilisateur.</summary>
      <returns>Propriétés facultatives définies par l'utilisateur.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Request">
      <summary>Obtient le <see cref="T:System.Net.Http.HttpRequestMessage" /> de l'enregistrement.</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpRequestMessage" /> de l'enregistrement.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.RequestId">
      <summary>Obtient l'ID de corrélation à partir de la <see cref="P:System.Web.Http.Tracing.TraceRecord.Request" />.</summary>
      <returns>ID de corrélation à partir de la <see cref="P:System.Web.Http.Tracing.TraceRecord.Request" />.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Status">
      <summary>Obtient ou définit le <see cref="T:System.Net.HttpStatusCode" /> associé au <see cref="T:System.Net.Http.HttpResponseMessage" />.</summary>
      <returns>
        <see cref="T:System.Net.HttpStatusCode" /> associé au <see cref="T:System.Net.Http.HttpResponseMessage" />.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Timestamp">
      <summary>Obtient la <see cref="T:System.DateTime" /> de ce suivi (via <see cref="P:System.DateTime.UtcNow" />).</summary>
      <returns>
        <see cref="T:System.DateTime" /> de ce suivi (via <see cref="P:System.DateTime.UtcNow" />).</returns>
    </member>
    <member name="T:System.Web.Http.Validation.DefaultBodyModelValidator">
      <summary>Représente une classe utilisée pour valider successivement un objet.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.DefaultBodyModelValidator.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Validation.DefaultBodyModelValidator" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.DefaultBodyModelValidator.ShouldValidateType(System.Type)">
      <summary>Détermine si les instances d'un type particulier doivent être validés.</summary>
      <returns>true si le type doit être validé ; sinon, false.</returns>
      <param name="type">Type à valider.</param>
    </member>
    <member name="M:System.Web.Http.Validation.DefaultBodyModelValidator.Validate(System.Object,System.Type,System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.String)">
      <summary>Détermine si le <paramref name="model" /> est correct et ajoute les erreurs de validation éventuelles au <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" /> du <paramref name="actionContext" />.</summary>
      <returns>true si le modèle est correct ; sinon, false.</returns>
      <param name="model">Modèle à valider.</param>
      <param name="type">
        <see cref="T:System.Type" /> à utiliser pour la validation.</param>
      <param name="metadataProvider">
        <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" /> utilisé pour la fourniture des métadonnées de modèle.</param>
      <param name="actionContext">
        <see cref="T:System.Web.Http.Controllers.HttpActionContext" /> dans lequel le modèle est validé.</param>
      <param name="keyPrefix">
        <see cref="T:System.String" /> à ajouter à la clé pour les erreurs de validation éventuelles.</param>
    </member>
    <member name="T:System.Web.Http.Validation.IBodyModelValidator">
      <summary>Représente une interface pour la validation des modèles</summary>
    </member>
    <member name="M:System.Web.Http.Validation.IBodyModelValidator.Validate(System.Object,System.Type,System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.String)">
      <summary> Détermine si le modèle est correct et ajoute les erreurs de validation éventuelles au <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" /> du actionContext</summary>
      <returns>true si le modèle est correct ; sinon, false.</returns>
      <param name="model">Modèle à valider.</param>
      <param name="type">
        <see cref="T:System.Type" /> à utiliser pour la validation.</param>
      <param name="metadataProvider">
        <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" /> utilisé pour la fourniture des métadonnées de modèle.</param>
      <param name="actionContext">
        <see cref="T:System.Web.Http.Controllers.HttpActionContext" /> dans lequel le modèle est validé.</param>
      <param name="keyPrefix">
        <see cref="T:System.String" /> à ajouter à la clé pour les erreurs de validation éventuelles.</param>
    </member>
    <member name="T:System.Web.Http.Validation.ModelStateFormatterLogger">
      <summary>Ce <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> consigne les erreurs du formateur dans le <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" /> fourni.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelStateFormatterLogger.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Validation.ModelStateFormatterLogger" />.</summary>
      <param name="modelState">État du modèle.</param>
      <param name="prefix">Préfixe.</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelStateFormatterLogger.LogError(System.String,System.Exception)">
      <summary>Journalise l'erreur du modèle spécifié.</summary>
      <param name="errorPath">Chemin d'accès à l'erreur.</param>
      <param name="exception">Message d'erreur.</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelStateFormatterLogger.LogError(System.String,System.String)">
      <summary>Journalise l'erreur du modèle spécifié.</summary>
      <param name="errorPath">Chemin d'accès à l'erreur.</param>
      <param name="errorMessage">Message d'erreur.</param>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidatedEventArgs">
      <summary>Fournit des données pour l'événement <see cref="E:System.Web.Http.Validation.ModelValidationNode.Validated" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidatedEventArgs.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.Validation.ModelValidationNode)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Validation.ModelValidatedEventArgs" />.</summary>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="parentNode">Nœud parent.</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidatedEventArgs.ActionContext">
      <summary>Obtient ou définit le contexte d'une action.</summary>
      <returns>Contexte d'une action.</returns>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidatedEventArgs.ParentNode">
      <summary>Obtient ou définit le parent de ce nœud.</summary>
      <returns>Parent de ce nœud.</returns>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidatingEventArgs">
      <summary>Fournit des données pour l'événement <see cref="E:System.Web.Http.Validation.ModelValidationNode.Validating" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidatingEventArgs.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.Validation.ModelValidationNode)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Validation.ModelValidatingEventArgs" />.</summary>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="parentNode">Nœud parent.</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidatingEventArgs.ActionContext">
      <summary>Obtient ou définit le contexte d'une action.</summary>
      <returns>Contexte d'une action.</returns>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidatingEventArgs.ParentNode">
      <summary>Obtient ou définit le parent de ce nœud.</summary>
      <returns>Parent de ce nœud.</returns>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidationNode">
      <summary>Fournit un conteneur pour les informations de validation du modèle.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationNode.#ctor(System.Web.Http.Metadata.ModelMetadata,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Validation.ModelValidationNode" /> en utilisant les métadonnées de modèle et la clé des états.</summary>
      <param name="modelMetadata">Métadonnées du modèle.</param>
      <param name="modelStateKey">Clé d'états du modèle.</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationNode.#ctor(System.Web.Http.Metadata.ModelMetadata,System.String,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidationNode})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Validation.ModelValidationNode" /> en utilisant les métadonnées de modèle, la clé des états du modèle et les nœuds enfants de validation du modèle.</summary>
      <param name="modelMetadata">Métadonnées du modèle.</param>
      <param name="modelStateKey">Clé d'états du modèle.</param>
      <param name="childNodes">Nœuds enfants du modèle.</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationNode.ChildNodes">
      <summary>Obtient ou définit les nœuds enfants.</summary>
      <returns>Nœuds enfants.</returns>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationNode.CombineWith(System.Web.Http.Validation.ModelValidationNode)">
      <summary>Combine l'instance <see cref="T:System.Web.Http.Validation.ModelValidationNode" /> actuelle avec une instance <see cref="T:System.Web.Http.Validation.ModelValidationNode" /> spécifiée.</summary>
      <param name="otherNode">Nœud de validation du modèle à combiner avec l'instance actuelle.</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationNode.ModelMetadata">
      <summary>Obtient ou définit les métadonnées du modèle.</summary>
      <returns>Métadonnées du modèle.</returns>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationNode.ModelStateKey">
      <summary>Obtient ou définit la clé d'états du modèle.</summary>
      <returns>Clé d'états du modèle.</returns>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationNode.SuppressValidation">
      <summary>Obtient ou définit une valeur indiquant si la validation doit être supprimée.</summary>
      <returns>true si la validation doit être supprimée ; sinon, false.</returns>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationNode.Validate(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Valide le modèle à l'aide du contexte d'exécution spécifié.</summary>
      <param name="actionContext">Contexte de l'action.</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationNode.Validate(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.Validation.ModelValidationNode)">
      <summary>Valide le modèle à l'aide du contexte d'exécution et du nœud parent spécifiés.</summary>
      <param name="actionContext">Contexte de l'action.</param>
      <param name="parentNode">Nœud parent.</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationNode.ValidateAllProperties">
      <summary>Obtient ou définit une valeur indiquant si toutes les propriétés du modèle doivent être validées.</summary>
      <returns>true si toutes les propriétés du modèle doivent être validées ou false si la validation doit être ignorée.</returns>
    </member>
    <member name="E:System.Web.Http.Validation.ModelValidationNode.Validated">
      <summary>Se produit lorsque le modèle a été validé.</summary>
    </member>
    <member name="E:System.Web.Http.Validation.ModelValidationNode.Validating">
      <summary>Se produit lorsque le modèle est en cours de validation.</summary>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidationRequiredMemberSelector">
      <summary>Représente la sélection des membres obligatoires en recherchant les ModelValidators requis associés au membre.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationRequiredMemberSelector.#ctor(System.Web.Http.Metadata.ModelMetadataProvider,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Validation.ModelValidationRequiredMemberSelector" />.</summary>
      <param name="metadataProvider">Fournisseur de métadonnées.</param>
      <param name="validatorProviders">Fournisseurs de validateurs.</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationRequiredMemberSelector.IsRequiredMember(System.Reflection.MemberInfo)">
      <summary>Indique si le membre est requis pour la validation.</summary>
      <returns>true si le membre est requis pour la validation ; sinon, false.</returns>
      <param name="member">Membre.</param>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidationResult">
      <summary>Fournit un conteneur pour un résultat de validation.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationResult.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Validation.ModelValidationResult" />.</summary>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationResult.MemberName">
      <summary>Obtient ou définit le nom du membre.</summary>
      <returns>Nom du membre.</returns>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationResult.Message">
      <summary>Obtient ou définit le message du résultat de validation.</summary>
      <returns>Message du résultat de validation.</returns>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidator">
      <summary>Fournit une classe de base pour l'implémentation de la logique de validation.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidator.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Validation.ModelValidator" />.</summary>
      <param name="validatorProviders">Fournisseurs de validateurs.</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidator.GetModelValidator(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Retourne un validateur de modèle composite pour le modèle.</summary>
      <returns>Validateur de modèle composite pour le modèle.</returns>
      <param name="validatorProviders">Énumération de fournisseurs de validateurs.</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidator.IsRequired">
      <summary>Obtient une valeur qui indique si une propriété de modèle est requise.</summary>
      <returns>true si la propriété de modèle est requise ; sinon, false.</returns>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidator.Validate(System.Web.Http.Metadata.ModelMetadata,System.Object)">
      <summary>Valide un objet spécifié.</summary>
      <returns>Liste de résultats de validation.</returns>
      <param name="metadata">Métadonnées.</param>
      <param name="container">Conteneur.</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidator.ValidatorProviders">
      <summary>Obtient ou définit l'énumération des fournisseurs de validateurs.</summary>
      <returns>Énumération de fournisseurs de validateurs.</returns>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidatorProvider">
      <summary>Fournit une liste de validateurs pour un modèle.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidatorProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Obtient une liste de validateurs associés à ce <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" />.</summary>
      <returns>Liste de validateurs.</returns>
      <param name="metadata">Métadonnées.</param>
      <param name="validatorProviders">Fournisseurs de validateurs.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.AssociatedValidatorProvider">
      <summary>Fournit une classe abstraite pour les classes qui implémentent un fournisseur de validation.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.AssociatedValidatorProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Validation.Providers.AssociatedValidatorProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.AssociatedValidatorProvider.GetTypeDescriptor(System.Type)">
      <summary>Obtient un descripteur de type pour le type spécifié.</summary>
      <returns>Descripteur de type pour le type spécifié.</returns>
      <param name="type">Type du fournisseur de validation.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.AssociatedValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Obtient les validateurs du modèle à l'aide des métadonnées et des fournisseurs de validateurs.</summary>
      <returns>Validateurs du modèle.</returns>
      <param name="metadata">Métadonnées.</param>
      <param name="validatorProviders">Énumération de fournisseurs de validateurs.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.AssociatedValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Obtient les validateurs du modèle à l'aide des métadonnées, des fournisseurs de validateurs et d'une liste d'attributs.</summary>
      <returns>Validateurs du modèle.</returns>
      <param name="metadata">Métadonnées.</param>
      <param name="validatorProviders">Énumération de fournisseurs de validateurs.</param>
      <param name="attributes">Liste d'attributs.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.DataAnnotationsModelValidationFactory">
      <summary>Représente la méthode qui crée une instance <see cref="T:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider" />.</summary>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider">
      <summary>Représente une implémentation de <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" /> qui fournit des validateurs pour les attributs dérivés de <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />. Elle fournit également un validateur pour les types qui implémentent <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />. Pour prendre en charge la validation côté client, vous pouvez inscrire les adaptateurs via les méthodes statiques sur cette classe ou laisser les attributs de validation implémenter <see cref="T:System.Web.Http.Validation.IClientValidatable" />. La logique prenant en charge IClientValidatable est implémentée dans <see cref="T:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator" />. </summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Obtient les validateurs du modèle à l'aide des métadonnées, du fournisseur de validateurs et des attributs spécifiés.</summary>
      <returns>Validateurs du modèle.</returns>
      <param name="metadata">Métadonnées.</param>
      <param name="validatorProviders">Fournisseurs de validateurs.</param>
      <param name="attributes">Attributs.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterAdapter(System.Type,System.Type)">
      <summary>Inscrit un adaptateur pour fournir la validation côté client.</summary>
      <param name="attributeType">Type de l'attribut de validation.</param>
      <param name="adapterType">Type de l'adaptateur.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterAdapterFactory(System.Type,System.Web.Http.Validation.Providers.DataAnnotationsModelValidationFactory)">
      <summary>Inscrit une fabrique d'adaptateur pour le fournisseur de validation.</summary>
      <param name="attributeType">Type de l'attribut.</param>
      <param name="factory">Fabrique qui sera utilisée pour créer l'objet <see cref="T:System.Web.Http.Validation.ModelValidator" /> pour l'attribut spécifié.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterDefaultAdapter(System.Type)">
      <summary>Inscrit l'adaptateur par défaut.</summary>
      <param name="adapterType">Type de l'adaptateur.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterDefaultAdapterFactory(System.Web.Http.Validation.Providers.DataAnnotationsModelValidationFactory)">
      <summary>Inscrit la fabrique d'adaptateur par défaut.</summary>
      <param name="factory">Fabrique qui sera utilisée pour créer l'objet <see cref="T:System.Web.Http.Validation.ModelValidator" /> pour l'adaptateur par défaut.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterDefaultValidatableObjectAdapter(System.Type)">
      <summary>Inscrit le type d'adaptateur par défaut pour les objets qui implémentent <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />. Le type d'adaptateur doit dériver de <see cref="T:System.Web.Http.Validation.ModelValidator" /> et doit contenir un constructeur public qui prend deux paramètres des types <see cref="T:System.Web.Http.Metadata.ModelMetadata" /> et <see cref="T:System.Web.Http.Controllers.HttpActionContext" />. </summary>
      <param name="adapterType">Type de l'adaptateur.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterDefaultValidatableObjectAdapterFactory(System.Web.Http.Validation.Providers.DataAnnotationsValidatableObjectAdapterFactory)">
      <summary>Inscrit la fabrique d'adaptateur par défaut pour les objets qui implémentent <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />. </summary>
      <param name="factory">Fabrique.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterValidatableObjectAdapter(System.Type,System.Type)">
      <summary>Inscrit un type d'adaptateur pour le modelType donné, qui doit implémenter <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />. Le type d'adaptateur doit dériver de <see cref="T:System.Web.Http.Validation.ModelValidator" /> et doit contenir un constructeur public qui prend deux paramètres des types <see cref="T:System.Web.Http.Metadata.ModelMetadata" /> et <see cref="T:System.Web.Http.Controllers.HttpActionContext" />. </summary>
      <param name="modelType">Type de modèle.</param>
      <param name="adapterType">Type de l'adaptateur.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterValidatableObjectAdapterFactory(System.Type,System.Web.Http.Validation.Providers.DataAnnotationsValidatableObjectAdapterFactory)">
      <summary>Inscrit une fabrique d'adaptateur pour le modelType donné, qui doit implémenter <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />. </summary>
      <param name="modelType">Type de modèle.</param>
      <param name="factory">Fabrique.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.DataAnnotationsValidatableObjectAdapterFactory">
      <summary>Fournit une fabrique pour les validateurs basés sur <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />.</summary>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.DataMemberModelValidatorProvider">
      <summary>Représente un fournisseur de validateurs pour le modèle de membres de données.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataMemberModelValidatorProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Validation.Providers.DataMemberModelValidatorProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataMemberModelValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Obtient les validateurs pour le modèle.</summary>
      <returns>Validateurs du modèle.</returns>
      <param name="metadata">Métadonnées.</param>
      <param name="validatorProviders">Énumérateur de fournisseurs de validateurs.</param>
      <param name="attributes">Liste d'attributs.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider">
      <summary>Implémentation de <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" /> qui fournit des validateurs qui lèvent des exceptions lorsque le modèle n'est pas valide.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Obtient une liste de validateurs associés à ce <see cref="T:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider" />.</summary>
      <returns>Liste de validateurs.</returns>
      <param name="metadata">Métadonnées.</param>
      <param name="validatorProviders">Fournisseurs de validateurs.</param>
      <param name="attributes">Liste d'attributs.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.RequiredMemberModelValidatorProvider">
      <summary>Représente le fournisseur pour le validateur de modèles de membres requis.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.RequiredMemberModelValidatorProvider.#ctor(System.Net.Http.Formatting.IRequiredMemberSelector)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Validation.Providers.RequiredMemberModelValidatorProvider" />.</summary>
      <param name="requiredMemberSelector">Sélecteur de membre requis.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.RequiredMemberModelValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Obtient le validateur pour le modèle de membre.</summary>
      <returns>Validateur du modèle de membre.</returns>
      <param name="metadata">Métadonnées.</param>
      <param name="validatorProviders">Fournisseurs de validateurs.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator">
      <summary>Fournit un validateur de modèle.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.ComponentModel.DataAnnotations.ValidationAttribute)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator" />.</summary>
      <param name="validatorProviders">Fournisseurs de validateurs.</param>
      <param name="attribute">Attribut de validation du modèle.</param>
    </member>
    <member name="P:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator.Attribute">
      <summary>Obtient ou définit l'attribut de validation du validateur de modèle.</summary>
      <returns>Attribut de validation du validateur de modèle.</returns>
    </member>
    <member name="P:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator.IsRequired">
      <summary>Obtient une valeur qui indique si la validation de modèle est requise.</summary>
      <returns>true si la validation du modèle est requise ; sinon, false.</returns>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator.Validate(System.Web.Http.Metadata.ModelMetadata,System.Object)">
      <summary>Valide le modèle et renvoie éventuellement les erreurs de validation.</summary>
      <returns>Liste de messages d'erreur de validation pour le modèle ou liste vide si aucune erreur ne s'est produite.</returns>
      <param name="metadata">Métadonnées du modèle.</param>
      <param name="container">Conteneur du modèle.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Validators.ErrorModelValidator">
      <summary>
        <see cref="T:System.Web.Http.Validation.ModelValidator" /> pour représenter une erreur.Ce validateur lève toujours une exception, quelle que soit la valeur de modèle réelle.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.ErrorModelValidator.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Validation.Validators.ErrorModelValidator" />.</summary>
      <param name="validatorProviders">Liste des fournisseurs de validateurs de modèle.</param>
      <param name="errorMessage">Message d'erreur correspondant à l'exception.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.ErrorModelValidator.Validate(System.Web.Http.Metadata.ModelMetadata,System.Object)">
      <summary>Valide un objet spécifié.</summary>
      <returns>Liste de résultats de validation.</returns>
      <param name="metadata">Métadonnées.</param>
      <param name="container">Conteneur.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Validators.RequiredMemberModelValidator">
      <summary>Représente le <see cref="T:System.Web.Http.Validation.ModelValidator" /> pour les membres obligatoires. </summary>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.RequiredMemberModelValidator.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Validation.Validators.RequiredMemberModelValidator" />.</summary>
      <param name="validatorProviders">Fournisseurs de validateurs.</param>
    </member>
    <member name="P:System.Web.Http.Validation.Validators.RequiredMemberModelValidator.IsRequired">
      <summary>Obtient ou définit une valeur qui ordonne au moteur de sérialisation que le membre doit être présent lors de la validation.</summary>
      <returns>true si le membre est obligatoire ; sinon, false.</returns>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.RequiredMemberModelValidator.Validate(System.Web.Http.Metadata.ModelMetadata,System.Object)">
      <summary>Valide l'objet.</summary>
      <returns>Liste de résultats de validation.</returns>
      <param name="metadata">Métadonnées.</param>
      <param name="container">Conteneur.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Validators.ValidatableObjectAdapter">
      <summary>Fournit un adaptateur d'objet qui peut être validé.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.ValidatableObjectAdapter.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.Validation.Validators.ValidatableObjectAdapter" />.</summary>
      <param name="validatorProviders">Fournisseur de validation.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.ValidatableObjectAdapter.Validate(System.Web.Http.Metadata.ModelMetadata,System.Object)">
      <summary>Valide l'objet spécifié.</summary>
      <returns>Liste de résultats de validation.</returns>
      <param name="metadata">Métadonnées.</param>
      <param name="container">Conteneur.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.IEnumerableValueProvider">
      <summary>Représente la classe de base pour les fournisseurs de valeurs dont les valeurs proviennent d'une collection qui implémente l'interface <see cref="T:System.Collections.IEnumerable" />.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.IEnumerableValueProvider.GetKeysFromPrefix(System.String)">
      <summary>Récupère les clés à partir du <paramref name="prefix" /> spécifié.</summary>
      <returns>Clés à partir du <paramref name="prefix" /> spécifié.</returns>
      <param name="prefix">Préfixe.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.IUriValueProviderFactory">
      <summary>Représente une interface implémentée par n'importe quelle <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" /> prenant en charge la création d'un <see cref="T:System.Web.Http.ValueProviders.IValueProvider" /> pour accéder à l'URI <see cref="T:System.Uri" /> d'un <see cref="T:System.Net.Http.HttpRequestMessage" /> entrant.</summary>
    </member>
    <member name="T:System.Web.Http.ValueProviders.IValueProvider">
      <summary>Définit les méthodes requises pour un fournisseur de valeurs dans ASP.NET MVC.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.IValueProvider.ContainsPrefix(System.String)">
      <summary>Détermine si la collection contient le préfixe spécifié.</summary>
      <returns>true si la collection contient le préfixe spécifié ; sinon, false.</returns>
      <param name="prefix">Préfixe à rechercher.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.IValueProvider.GetValue(System.String)">
      <summary>Récupère un objet de valeur à l'aide de la clé spécifiée.</summary>
      <returns>L'objet de valeur pour la clé spécifiée, ou null si la clé est introuvable.</returns>
      <param name="key">Clé de l'objet de valeur à récupérer.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.ValueProviderAttribute">
      <summary> Cet attribut permet de spécifier une classe <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" /> personnalisée. </summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderAttribute.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de <see cref="T:System.Web.Http.ValueProviders.ValueProviderAttribute" />.</summary>
      <param name="valueProviderFactory">Type du classeur de modèles.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderAttribute.#ctor(System.Type[])">
      <summary>Initialise une nouvelle instance de <see cref="T:System.Web.Http.ValueProviders.ValueProviderAttribute" />.</summary>
      <param name="valueProviderFactories">Tableau de types de classeurs de modèles.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderAttribute.GetValueProviderFactories(System.Web.Http.HttpConfiguration)">
      <summary>Obtient les fabriques de fournisseur de valeur.</summary>
      <returns>Collection de fabriques de fournisseur de valeur.</returns>
      <param name="configuration">Objet de configuration.</param>
    </member>
    <member name="P:System.Web.Http.ValueProviders.ValueProviderAttribute.ValueProviderFactoryTypes">
      <summary>Obtient les types d'objets renvoyés par la fabrique de fournisseur de valeur.</summary>
      <returns>Collection de types.</returns>
    </member>
    <member name="T:System.Web.Http.ValueProviders.ValueProviderFactory">
      <summary>Représente une fabrique pour la création d'objets de fournisseur de valeurs.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderFactory.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderFactory.GetValueProvider(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Retourne un objet de fournisseur de valeurs pour le contexte de contrôleur spécifié.</summary>
      <returns>Objet de fournisseur de valeurs.</returns>
      <param name="actionContext">Objet qui encapsule des informations sur la requête HTTP en cours.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.ValueProviderResult">
      <summary>Représente le résultat de la liaison d'une valeur (par exemple, une publication de formulaire ou une chaîne de requête) avec une propriété d'argument de méthode d'action, ou avec l'argument lui-même.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderResult.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ValueProviders.ValueProviderResult" />.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderResult.#ctor(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ValueProviders.ValueProviderResult" />.</summary>
      <param name="rawValue">Valeur brute.</param>
      <param name="attemptedValue">Valeur tentée.</param>
      <param name="culture">Culture.</param>
    </member>
    <member name="P:System.Web.Http.ValueProviders.ValueProviderResult.AttemptedValue">
      <summary>Obtient ou définit la valeur brute convertie en chaîne pour l'affichage.</summary>
      <returns>Valeur brute convertie en chaîne pour l'affichage.</returns>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderResult.ConvertTo(System.Type)">
      <summary>Convertit la valeur encapsulée par ce résultat vers le type spécifié.</summary>
      <returns>Valeur convertie.</returns>
      <param name="type">Type cible.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderResult.ConvertTo(System.Type,System.Globalization.CultureInfo)">
      <summary>Convertit la valeur encapsulée par ce résultat vers le type spécifié à l'aide des informations de culture spécifiées.</summary>
      <returns>Valeur convertie.</returns>
      <param name="type">Type cible.</param>
      <param name="culture">Culture à utiliser lors de la conversion.</param>
    </member>
    <member name="P:System.Web.Http.ValueProviders.ValueProviderResult.Culture">
      <summary>Obtient ou définit la culture.</summary>
      <returns>Culture.</returns>
    </member>
    <member name="P:System.Web.Http.ValueProviders.ValueProviderResult.RawValue">
      <summary>Obtient ou définit la valeur brute donnée par le fournisseur de valeurs.</summary>
      <returns>Valeur brute fournie par le fournisseur de valeur.</returns>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.CompositeValueProvider">
      <summary>Représente un fournisseur de valeur dont les valeurs proviennent d'une liste de fournisseurs qui implémente l'interface <see cref="T:System.Collections.IEnumerable" />.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ValueProviders.Providers.CompositeValueProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.#ctor(System.Collections.Generic.IList{System.Web.Http.ValueProviders.IValueProvider})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ValueProviders.Providers.CompositeValueProvider" />.</summary>
      <param name="list">Liste de fournisseurs de valeurs.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.ContainsPrefix(System.String)">
      <summary>Détermine si la collection contient le <paramref name="prefix" /> spécifié.</summary>
      <returns>true si la collection contient le <paramref name="prefix" /> spécifié ; sinon, false.</returns>
      <param name="prefix">Préfixe à rechercher.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.GetKeysFromPrefix(System.String)">
      <summary>Récupère les clés du <paramref name="prefix" /> spécifié.</summary>
      <returns>Clés du <paramref name="prefix" /> spécifié.</returns>
      <param name="prefix">Préfixe duquel les clés sont extraites.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.GetValue(System.String)">
      <summary>Récupère un objet de valeur à l'aide de la <paramref name="key" /> spécifiée.</summary>
      <returns>Objet de valeur pour la <paramref name="key" /> spécifiée.</returns>
      <param name="key">Clé de l'objet de valeur à récupérer.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.InsertItem(System.Int32,System.Web.Http.ValueProviders.IValueProvider)">
      <summary>Insère un élément dans la collection à l'index spécifié.</summary>
      <param name="index">Index de base zéro auquel <paramref name="item" /> doit être inséré.</param>
      <param name="item">Objet à insérer.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.SetItem(System.Int32,System.Web.Http.ValueProviders.IValueProvider)">
      <summary>Remplace l'élément au niveau de l'index spécifié.</summary>
      <param name="index">Index de base zéro de l'élément à remplacer.</param>
      <param name="item">Nouvelle valeur de l'élément à l'index spécifié.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.CompositeValueProviderFactory">
      <summary>Représente une fabrique pour la création d'une liste d'objets de fournisseur de valeur.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProviderFactory.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ValueProviders.Providers.CompositeValueProviderFactory" />.</summary>
      <param name="factories">Collection de fabriques de fournisseur de valeur.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProviderFactory.GetValueProvider(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Récupère la liste d'objets de fournisseur de valeur pour le contexte de contrôleur spécifié.</summary>
      <returns>Liste d'objets de fournisseur de valeur pour le contexte de contrôleur spécifié.</returns>
      <param name="actionContext">Objet qui encapsule des informations sur la requête HTTP en cours.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider">
      <summary>Fournisseur de valeurs pour les paires nom/valeur.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Globalization.CultureInfo)"></member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Globalization.CultureInfo)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider" />.</summary>
      <param name="values">Paires nom/valeur pour le fournisseur.</param>
      <param name="culture">Culture utilisée pour les paires nom/valeur.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.#ctor(System.Func{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}},System.Globalization.CultureInfo)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider" /> à l'aide d'une fonction déléguée pour fournir les paires nom/valeur.</summary>
      <param name="valuesFactory">Une fonction déléguée qui renvoie une collection de paires nom/valeur.</param>
      <param name="culture">Culture utilisée pour les paires nom/valeur.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.ContainsPrefix(System.String)">
      <summary>Détermine si la collection contient le préfixe spécifié.</summary>
      <returns>true si la collection contient le préfixe spécifié ; sinon, false.</returns>
      <param name="prefix">Préfixe à rechercher.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.GetKeysFromPrefix(System.String)">
      <summary>Obtient les clés à partir d'un préfixe.</summary>
      <returns>Clés.</returns>
      <param name="prefix">Préfixe.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.GetValue(System.String)">
      <summary>Récupère un objet de valeur à l'aide de la clé spécifiée.</summary>
      <returns>Objet de valeur pour la clé spécifiée.</returns>
      <param name="key">Clé de l'objet de valeur à récupérer.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.QueryStringValueProvider">
      <summary>Représente un fournisseur de valeurs pour les chaînes de requête contenues dans un objet <see cref="T:System.Collections.Specialized.NameValueCollection" />.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.QueryStringValueProvider.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Globalization.CultureInfo)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ValueProviders.Providers.QueryStringValueProvider" />.</summary>
      <param name="actionContext">Objet qui encapsule des informations sur la requête HTTP en cours.</param>
      <param name="culture">Objet qui contient les informations relatives à la culture cible.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.QueryStringValueProviderFactory">
      <summary>Représente une classe qui est chargée de la création d'une instance d'un objet de fournisseur de valeurs de chaîne de requête.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.QueryStringValueProviderFactory.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ValueProviders.Providers.QueryStringValueProviderFactory" />.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.QueryStringValueProviderFactory.GetValueProvider(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Récupère un objet de fournisseur de valeurs pour le contexte de contrôleur spécifié.</summary>
      <returns>Objet de fournisseur de valeurs de chaîne de requête.</returns>
      <param name="actionContext">Objet qui encapsule des informations sur la requête HTTP en cours.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.RouteDataValueProvider">
      <summary>Représente un fournisseur de valeurs pour les données d'itinéraire contenues dans un objet qui implémente l'interface IDictionary(Of TKey, TValue).</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.RouteDataValueProvider.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Globalization.CultureInfo)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ValueProviders.Providers.RouteDataValueProvider" />.</summary>
      <param name="actionContext">Objet qui contient des informations sur la requête HTTP.</param>
      <param name="culture">Objet qui contient les informations relatives à la culture cible.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.RouteDataValueProviderFactory">
      <summary>Représente une fabrique pour la création d'objets de fournisseur de valeurs de données d'itinéraire.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.RouteDataValueProviderFactory.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Http.ValueProviders.Providers.RouteDataValueProviderFactory" />.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.RouteDataValueProviderFactory.GetValueProvider(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Récupère un objet de fournisseur de valeurs pour le contexte de contrôleur spécifié.</summary>
      <returns>Objet de fournisseur de valeurs.</returns>
      <param name="actionContext">Objet qui encapsule des informations sur la requête HTTP en cours.</param>
    </member>
  </members>
</doc>